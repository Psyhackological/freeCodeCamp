WEBVTT
Kind: captions

00:00:00.000 --> 00:00:04.640 position:63% line:0%
In this course, you will learn how to automate&nbsp;
a bunch of different things in Python. You will&nbsp;&nbsp;

00:00:04.640 --> 00:00:11.200 position:63% line:0%
learn about web scraping, automating downloads,&nbsp;
extracting from PDFs, automated image processing,&nbsp;&nbsp;

00:00:11.200 --> 00:00:17.280 position:63% line:0%
building an automated new summarizer and more.&nbsp;
The instructor for this course is Abdul, also&nbsp;&nbsp;

00:00:17.280 --> 00:00:22.080 position:63% line:0%
known as one little coder. He has been creating&nbsp;
courses for a while and is a great teacher.&nbsp;&nbsp;

00:00:22.960 --> 00:00:30.000 position:63% line:0%
Welcome to the section one of hands on with tools&nbsp;
to automate stuff in Python. In this section,&nbsp;&nbsp;

00:00:30.000 --> 00:00:36.480 position:63% line:0%
we'll build Hacker News Headlines, emailer will&nbsp;
begin with the understanding of the basics of web&nbsp;&nbsp;

00:00:36.480 --> 00:00:42.000 position:63% line:0%
scraping. Then we'll set up a system environment&nbsp;
by installing the required Python packages.&nbsp;&nbsp;

00:00:42.000 --> 00:00:46.560 position:63% line:0%
Then we'll move on to understand the project&nbsp;
architecture. And then we'll start scraping&nbsp;&nbsp;

00:00:46.560 --> 00:00:52.560 position:63% line:0%
project with Hacker News front page. And then&nbsp;
finally, we'll complete the email section&nbsp;&nbsp;

00:00:52.560 --> 00:00:57.840 position:63% line:0%
to finish the tool building so the tool&nbsp;
can send us the Hacker News Headlines.&nbsp;&nbsp;

00:00:59.840 --> 00:01:05.440 position:63% line:0%
In this video, we'll learn about project&nbsp;
architecture of building an automated Hacker&nbsp;&nbsp;

00:01:05.440 --> 00:01:12.080 position:63% line:0%
News Headlines email. This architecture starts&nbsp;
with getting the content of the Hacker News&nbsp;&nbsp;

00:01:12.080 --> 00:01:18.720 position:63% line:0%
website front page, so we'll use the Python&nbsp;
package request to get the get request&nbsp;&nbsp;

00:01:19.520 --> 00:01:24.640 position:63% line:0%
to extract the content of the website. Once&nbsp;
we have the content of the website in place,&nbsp;&nbsp;

00:01:24.640 --> 00:01:30.960 position:63% line:0%
we'll use a Python package beautifulsoup to scrape&nbsp;
the recorded content. So the required content,&nbsp;&nbsp;

00:01:30.960 --> 00:01:39.920 position:63% line:0%
I mean, the components like title, link, score,&nbsp;
domain name, etc. So we'll use beautifulsoup. To&nbsp;&nbsp;

00:01:39.920 --> 00:01:45.920 position:63% line:0%
extract these required components from the content&nbsp;
that we had extracted from the previous step.&nbsp;&nbsp;

00:01:46.480 --> 00:01:52.800 position:63% line:0%
The next step is to build the email body or the&nbsp;
content of the email. From the scraped content.&nbsp;&nbsp;

00:01:53.360 --> 00:01:58.560 position:63% line:0%
We'll arrange it in such a way that the email&nbsp;
body looks like there is a title there is a link,&nbsp;&nbsp;

00:01:58.560 --> 00:02:04.480 position:63% line:0%
there is a number so that the email body looks&nbsp;
exactly like a news presentation. And once we&nbsp;&nbsp;

00:02:04.480 --> 00:02:10.160 position:63% line:0%
have the email body ready, we'll move on to the&nbsp;
email authentication section, where we will use&nbsp;&nbsp;

00:02:10.160 --> 00:02:19.120 position:63% line:0%
your Gmail ID. to authenticate the email section,&nbsp;
we'll use the Python package SMTP lib to set up&nbsp;&nbsp;

00:02:19.120 --> 00:02:26.400 position:63% line:0%
an SMTP library authentication system where we'll&nbsp;
use a gmail authentication once the authentication&nbsp;&nbsp;

00:02:26.400 --> 00:02:32.160 position:63% line:0%
is set up. And then we have provided or email id&nbsp;
and then other necessary information. Finally,&nbsp;&nbsp;

00:02:32.160 --> 00:02:37.440 position:63% line:0%
we are going to send that email using the email&nbsp;
body that we have set up. So ultimately, what&nbsp;&nbsp;

00:02:37.440 --> 00:02:42.000 position:63% line:0%
we are doing is we are extracting content from&nbsp;
the web page. And then we are going to take the&nbsp;&nbsp;

00:02:42.000 --> 00:02:48.800 position:63% line:0%
required components and then use the component to&nbsp;
build an email body and then use the email body in&nbsp;&nbsp;

00:02:48.800 --> 00:02:55.440 position:63% line:0%
the email that we compose and then we sent it to&nbsp;
the required users. In the next video, we'll start&nbsp;&nbsp;

00:02:55.440 --> 00:03:00.880 position:63% line:0%
to learn how to set up our Python environment in&nbsp;
such a way that we have all the required packages.&nbsp;&nbsp;

00:03:02.480 --> 00:03:07.440 position:63% line:0%
In this video, we'll learn how to set up&nbsp;
our Python environment in such a way that&nbsp;&nbsp;

00:03:07.440 --> 00:03:12.640 position:63% line:0%
we have all the required packages. These are&nbsp;
the following packages that we will be using&nbsp;&nbsp;

00:03:12.640 --> 00:03:20.080 position:63% line:0%
in this particular project. Request package&nbsp;
is used for HTTP requests. beautifulsoup is&nbsp;&nbsp;

00:03:20.080 --> 00:03:26.400 position:63% line:0%
used for web scraping. SMTP lib is used for&nbsp;
email authentication and email transaction,&nbsp;&nbsp;

00:03:26.400 --> 00:03:33.600 position:63% line:0%
email dot mine is used for creating the email&nbsp;
body. And then finally date time is used for&nbsp;&nbsp;

00:03:33.600 --> 00:03:40.880 position:63% line:0%
accessing or manipulating date and time. But these&nbsp;
packages SMTP lib email dot mine on day 10 comes&nbsp;&nbsp;

00:03:40.880 --> 00:03:46.400 position:63% line:0%
by default with your Python installation. So what&nbsp;
we have to do is there are two external libraries&nbsp;&nbsp;

00:03:46.400 --> 00:03:51.920 position:63% line:0%
request package and beautifulsoup that we are&nbsp;
supposed to install in our Python environment.&nbsp;&nbsp;

00:03:51.920 --> 00:03:57.920 position:63% line:0%
So let us go ahead and see how to install&nbsp;
those two packages that are required. First,&nbsp;&nbsp;

00:03:57.920 --> 00:04:03.040 position:63% line:0%
open your terminal and then make sure that you&nbsp;
have Python installed already. Once you have&nbsp;&nbsp;

00:04:03.040 --> 00:04:10.400 position:63% line:0%
Python installed already, you can start with&nbsp;
PIP three install requests. Once you enter it,&nbsp;&nbsp;

00:04:11.680 --> 00:04:19.280 position:63% line:0%
Python is going to look up for requests and then&nbsp;
it is going to get a request package from pi pi&nbsp;&nbsp;

00:04:19.280 --> 00:04:23.760 position:63% line:0%
which is the repository where all the packages&nbsp;
are available and then it is going to install in&nbsp;&nbsp;

00:04:23.760 --> 00:04:28.800 position:63% line:0%
your machine. To check if request packages&nbsp;
installed. Let us invoke our Python three&nbsp;&nbsp;

00:04:28.800 --> 00:04:35.920 position:63% line:0%
console and then check input requests. As you&nbsp;
can see it has successfully imported so let us&nbsp;&nbsp;

00:04:35.920 --> 00:04:40.960 position:63% line:0%
exit and now move ahead with the next package. The&nbsp;
next package that we are supposed to installers,&nbsp;&nbsp;

00:04:41.760 --> 00:04:51.600 position:63% line:0%
Pip three install Beautiful Soup for now again&nbsp;
Beautiful Soup is getting downloaded from pi pi&nbsp;&nbsp;

00:04:51.600 --> 00:04:56.800 position:63% line:0%
and then Beautiful Soup is getting installed. So&nbsp;
as we can see Beautiful Soup is installed now, let&nbsp;&nbsp;

00:04:56.800 --> 00:05:01.840 position:63% line:0%
us go ahead and invoke our Python three console&nbsp;
and then To check if beautifulsoup is installed&nbsp;&nbsp;

00:05:02.400 --> 00:05:07.360 position:63% line:0%
As you can see Beautiful Soup even though is the&nbsp;
package name while you are importing the package&nbsp;&nbsp;

00:05:07.360 --> 00:05:12.800 position:63% line:0%
in your Python session, you have to use bs for&nbsp;
as you can see bs four is successfully installed.&nbsp;&nbsp;

00:05:12.800 --> 00:05:19.440 position:63% line:0%
You can even check if a particular object is&nbsp;
getting imported bs from VS code input beautiful.&nbsp;&nbsp;

00:05:19.440 --> 00:05:25.920 position:63% line:0%
So, as you can see B is capital here and s also&nbsp;
also capital. So it has successfully imported.&nbsp;&nbsp;

00:05:25.920 --> 00:05:33.760 position:63% line:0%
So let us exit our Python environment. For now&nbsp;
we have successfully installed beautifulsoup for&nbsp;&nbsp;

00:05:33.760 --> 00:05:38.240 position:63% line:0%
and then request package. Both are the&nbsp;
external libraries that are required for&nbsp;&nbsp;

00:05:38.240 --> 00:05:43.600 position:63% line:0%
this particular project. And all other packages&nbsp;
like SMTP lib, email, dot mime and date time&nbsp;&nbsp;

00:05:43.600 --> 00:05:48.960 position:63% line:0%
are inbuilt present in our Python setup.&nbsp;
But let us make sure that those packages&nbsp;&nbsp;

00:05:48.960 --> 00:05:53.760 position:63% line:0%
are available also. So let us invoke our&nbsp;
Python console once again, Python three.&nbsp;&nbsp;

00:05:56.800 --> 00:06:00.000 position:63% line:0%
Let us clear our terminal&nbsp;
First, open Python three,&nbsp;&nbsp;

00:06:00.640 --> 00:06:12.080 position:63% line:0%
and then do import SMTP lib SMTP&nbsp;
lib is successfully imported.&nbsp;&nbsp;

00:06:12.080 --> 00:06:13.680 position:63% line:0%
Let us input email.my email that mine was&nbsp;
successfully imported. Let us input date,&nbsp;&nbsp;

00:06:13.680 --> 00:06:19.520 position:63% line:0%
time, date time is also successfully imported. So&nbsp;
this tells us that all the required packages are&nbsp;&nbsp;

00:06:19.520 --> 00:06:24.720 position:63% line:0%
available in the Python environment that we have&nbsp;
got. So we are good to go ahead with our project.&nbsp;&nbsp;

00:06:29.440 --> 00:06:36.800 position:63% line:0%
In this video, they start to learn how to code&nbsp;
the project script. For this code editing,&nbsp;&nbsp;

00:06:36.800 --> 00:06:42.880 position:63% line:0%
I'm using Python Community Edition.&nbsp;
But you can use any ID of your choice.&nbsp;&nbsp;

00:06:43.840 --> 00:06:49.840 position:63% line:0%
So make sure that Python installation is proper&nbsp;
in your machine and Python is added in the system&nbsp;&nbsp;

00:06:49.840 --> 00:06:55.200 position:63% line:0%
path, then you can use any code editor to do the&nbsp;
same thing that I'm going to show you right now.&nbsp;&nbsp;

00:06:56.320 --> 00:06:59.840 position:63% line:0%
We'll start with importing all&nbsp;
the packages that are required.&nbsp;&nbsp;

00:06:59.840 --> 00:07:02.960 position:63% line:0%
And if you remember, those are&nbsp;
the packages that we installed.&nbsp;&nbsp;

00:07:03.760 --> 00:07:11.280 position:63% line:0%
In the previous section. I will start with import&nbsp;
requests, which is for our HTTP request. And then&nbsp;&nbsp;

00:07:11.280 --> 00:07:19.840 position:63% line:0%
we'll import Beautiful Soup from bs for Next,&nbsp;
we'll move on to importing SMTP lib. And then&nbsp;&nbsp;

00:07:20.560 --> 00:07:27.200 position:63% line:0%
we'll input two objects from email mime.&nbsp;
And then finally we'll import date time.&nbsp;&nbsp;

00:07:28.560 --> 00:07:35.120 position:63% line:0%
Once all the inputs are finished, we'll start&nbsp;
with extracting the current date time, which&nbsp;&nbsp;

00:07:35.120 --> 00:07:43.200 position:63% line:0%
is the system date time. The reason we are using&nbsp;
date time to extract the current date time is to&nbsp;&nbsp;

00:07:43.200 --> 00:07:50.880 position:63% line:0%
create an email subject line where it will show us&nbsp;
the appropriate date when the email was sent. This&nbsp;&nbsp;

00:07:50.880 --> 00:07:57.120 position:63% line:0%
is for us to make sure that the same email get&nbsp;
doesn't get overwritten every day. So that we have&nbsp;&nbsp;

00:07:57.120 --> 00:08:03.040 position:63% line:0%
an understanding that every day we are receiving&nbsp;
a new email from the automated email. So the next&nbsp;&nbsp;

00:08:03.040 --> 00:08:08.880 position:63% line:0%
step is to create an empty Python object with&nbsp;
nothing, it's a string object with nothing in it,&nbsp;&nbsp;

00:08:09.600 --> 00:08:14.880 position:63% line:0%
which is going to be used as an email content&nbsp;
placeholder. Once we are ready with this thing,&nbsp;&nbsp;

00:08:14.880 --> 00:08:21.120 position:63% line:0%
we can move on to start creating a new&nbsp;
function where we will extract the Hacker News&nbsp;&nbsp;

00:08:21.760 --> 00:08:28.960 position:63% line:0%
components that we are required. First, let us&nbsp;
create a function called extract underscore news,&nbsp;&nbsp;

00:08:28.960 --> 00:08:35.440 position:63% line:0%
which will take one argument which is a URL that&nbsp;
it is required to keep the user updated will print&nbsp;&nbsp;

00:08:35.440 --> 00:08:41.600 position:63% line:0%
the user message saying extracting Hacker News&nbsp;
stories. Then we'll create another temporary&nbsp;&nbsp;

00:08:41.600 --> 00:08:47.680 position:63% line:0%
placeholder, which is again an empty string. So&nbsp;
this temporary placeholder is going to be used to&nbsp;&nbsp;

00:08:48.240 --> 00:08:54.960 position:63% line:0%
assign value to this content, which is the actual&nbsp;
email body that we want. So the first line that we&nbsp;&nbsp;

00:08:54.960 --> 00:09:01.600 position:63% line:0%
want in our email body is to say that this is a 10&nbsp;
top stories, it N stands for Hacker News. And then&nbsp;&nbsp;

00:09:01.600 --> 00:09:08.720 position:63% line:0%
we are going to display a 10 top stories and it&nbsp;
is going to be a bold text. And then we are going&nbsp;&nbsp;

00:09:08.720 --> 00:09:14.880 position:63% line:0%
to have line breaks and then we are going to show&nbsp;
star star star star just to make it more readable&nbsp;&nbsp;

00:09:15.680 --> 00:09:22.560 position:63% line:0%
once this line is defined. Now we will move on to&nbsp;
get the content of the URL, the URL that we are&nbsp;&nbsp;

00:09:22.560 --> 00:09:28.160 position:63% line:0%
going to pass to this function when we call this&nbsp;
function. So we are going to use request packets&nbsp;&nbsp;

00:09:28.160 --> 00:09:35.840 position:63% line:0%
get function to get the content of this URL and&nbsp;
then store it in the response object. The content&nbsp;&nbsp;

00:09:35.840 --> 00:09:44.320 position:63% line:0%
once we get from the get function is actually in&nbsp;
response body HTTP response, which will contain&nbsp;&nbsp;

00:09:44.320 --> 00:09:50.240 position:63% line:0%
content the actual content that is required for&nbsp;
us which is the content of the webpage. So we&nbsp;&nbsp;

00:09:50.240 --> 00:09:56.800 position:63% line:0%
are going to use the method content on the object&nbsp;
response to store the actual content in content.&nbsp;&nbsp;

00:09:56.800 --> 00:10:02.320 position:63% line:0%
Remember, this is a global object which is&nbsp;
called And this is a local object within this&nbsp;&nbsp;

00:10:02.320 --> 00:10:08.320 position:63% line:0%
particular function, which means these two are&nbsp;
different. So the scope of this particular content&nbsp;&nbsp;

00:10:08.320 --> 00:10:13.440 position:63% line:0%
lies only within this function. So do not get&nbsp;
confused with this content and this content.&nbsp;&nbsp;

00:10:14.320 --> 00:10:20.880 position:63% line:0%
Now, we are going to use this content that we&nbsp;
extracted using the response body. And we are&nbsp;&nbsp;

00:10:20.880 --> 00:10:27.920 position:63% line:0%
going to use the HTML parser to extract or make&nbsp;
a soup out of it. from that particular soup,&nbsp;&nbsp;

00:10:27.920 --> 00:10:33.440 position:63% line:0%
what we are going to be interested is about the&nbsp;
components that we are going to require in this&nbsp;&nbsp;

00:10:34.080 --> 00:10:39.360 position:63% line:0%
particular project. So, to understand what are&nbsp;
the components that we are going to required,&nbsp;&nbsp;

00:10:39.360 --> 00:10:45.440 position:63% line:0%
we have to see the website structure. So, in the&nbsp;
next video, we will see the website structure of&nbsp;&nbsp;

00:10:45.440 --> 00:10:50.800 position:63% line:0%
the Hacker News front page to see what are&nbsp;
the components that we would be required&nbsp;&nbsp;

00:10:50.800 --> 00:10:59.840 position:63% line:0%
to extract using this beautifulsoup function?&nbsp;
In this video, we'll see what are the components&nbsp;&nbsp;

00:10:59.840 --> 00:11:05.280 position:63% line:0%
that we need from the Hacker News front page&nbsp;
website. And as you can see from this code,&nbsp;&nbsp;

00:11:05.280 --> 00:11:11.040 position:63% line:0%
this is the URL that we are going to use. And&nbsp;
this is the Hacker News front page URL. So let&nbsp;&nbsp;

00:11:11.040 --> 00:11:16.480 position:63% line:0%
us go to our browser. So in this case, I'm using&nbsp;
Mozilla Firefox. So let us go to our browser,&nbsp;&nbsp;

00:11:16.480 --> 00:11:21.680 position:63% line:0%
and then open Hacker News front page. And this&nbsp;
is how the site actually looks. This is one of&nbsp;&nbsp;

00:11:21.680 --> 00:11:27.120 position:63% line:0%
the most popular websites on the internet. And&nbsp;
this was started by Paul Graham was a very famous&nbsp;&nbsp;

00:11:27.120 --> 00:11:34.000 position:63% line:0%
personality, and internet entrepreneur. And he&nbsp;
also runs an incubator called Y Combinator. So&nbsp;&nbsp;

00:11:34.000 --> 00:11:39.600 position:63% line:0%
this is a website that has been read by 1000s&nbsp;
and 1000s of people every day. And our objective&nbsp;&nbsp;

00:11:39.600 --> 00:11:45.520 position:63% line:0%
is to extract this content and automatically send&nbsp;
an email to us so that we can see why only when&nbsp;&nbsp;

00:11:45.520 --> 00:11:49.600 position:63% line:0%
there is an important or interesting content&nbsp;
for us to see, then we can go to the website,&nbsp;&nbsp;

00:11:50.320 --> 00:11:55.520 position:63% line:0%
that is the objective of this entire project.&nbsp;
So as we can see, this website, we can see&nbsp;&nbsp;

00:11:55.520 --> 00:12:01.840 position:63% line:0%
a header in this website or a navigation bar.&nbsp;
And then we have list, which is very similar to&nbsp;&nbsp;

00:12:01.840 --> 00:12:06.880 position:63% line:0%
how, you know Reddit kind of website look. So&nbsp;
in this setup, there are some components that&nbsp;&nbsp;

00:12:06.880 --> 00:12:12.800 position:63% line:0%
we could be interested in to understand what is&nbsp;
the link? Or what is the information about First,&nbsp;&nbsp;

00:12:12.800 --> 00:12:17.680 position:63% line:0%
we need this one, which is the actual title&nbsp;
of the link, then we would be also interested&nbsp;&nbsp;

00:12:17.680 --> 00:12:23.520 position:63% line:0%
in knowing the points which shows how popular&nbsp;
that particular link is. So to know what are&nbsp;&nbsp;

00:12:23.520 --> 00:12:30.000 position:63% line:0%
the contents that we should be escaping from this&nbsp;
website, we have to first open our web inspector.&nbsp;&nbsp;

00:12:30.800 --> 00:12:35.680 position:63% line:0%
To open web Inspector, you can&nbsp;
either press F 12 in your keyboard,&nbsp;&nbsp;

00:12:35.680 --> 00:12:41.680 position:63% line:0%
or you can right click in your machine, the&nbsp;
browser using your mouse and then click inspect&nbsp;&nbsp;

00:12:41.680 --> 00:12:47.520 position:63% line:0%
element. So click Inspect Element, then you will&nbsp;
get this particular page opened, which will give&nbsp;&nbsp;

00:12:47.520 --> 00:12:53.520 position:63% line:0%
you a sense of how the web page is designed&nbsp;
to let us slightly increase the size of this.&nbsp;&nbsp;

00:12:54.640 --> 00:13:02.000 position:63% line:0%
And let us pick the pick an element tool. So now&nbsp;
we have picked up this tool to understand what are&nbsp;&nbsp;

00:13:02.000 --> 00:13:08.720 position:63% line:0%
the components that we need from this particular&nbsp;
Hacker News front page, which we will use in the&nbsp;&nbsp;

00:13:08.720 --> 00:13:14.320 position:63% line:0%
code to extract that particular component from the&nbsp;
content that we have already extracted. So pick&nbsp;&nbsp;

00:13:14.320 --> 00:13:21.200 position:63% line:0%
this thing and then go here, as you can see this,&nbsp;
as you hover, you can actually see the CSS value,&nbsp;&nbsp;

00:13:21.200 --> 00:13:28.160 position:63% line:0%
which is also called the selector. As you can see,&nbsp;
moreover, you can see a dot story link here you&nbsp;&nbsp;

00:13:28.160 --> 00:13:35.360 position:63% line:0%
can see a dot h and user a dot some score value,&nbsp;
then you can actually see a then you can see a&nbsp;&nbsp;

00:13:35.360 --> 00:13:42.960 position:63% line:0%
so what we can see is we can click mouse and then&nbsp;
see how we don't have to actually click we can&nbsp;&nbsp;

00:13:42.960 --> 00:13:47.920 position:63% line:0%
just hover around and we can actually see how the&nbsp;
chord changes and then the first area of interest&nbsp;&nbsp;

00:13:47.920 --> 00:13:56.080 position:63% line:0%
for us was the title. So who are your most of them&nbsp;
and click the button. As you can see, once you&nbsp;&nbsp;

00:13:56.080 --> 00:14:04.480 position:63% line:0%
hover there what you actually get is you get an A&nbsp;
anchor text with the class story link and which is&nbsp;&nbsp;

00:14:04.480 --> 00:14:11.760 position:63% line:0%
present inside a table with class title. So,&nbsp;
the first point that we are looking for is&nbsp;&nbsp;

00:14:12.320 --> 00:14:19.680 position:63% line:0%
anchor text with story link. So let us go to our&nbsp;
code and see what we have written. So what is our&nbsp;&nbsp;

00:14:19.680 --> 00:14:28.720 position:63% line:0%
area of interest is we are trying to extract&nbsp;
everywhere where we have got db, db is in HTML&nbsp;&nbsp;

00:14:29.760 --> 00:14:39.600 position:63% line:0%
is the actual sale inside a table HTML table HTML&nbsp;
table is created using this tag table. A table row&nbsp;&nbsp;

00:14:39.600 --> 00:14:45.840 position:63% line:0%
is created using this tag BR and then the values&nbsp;
the actual sales inside the table row is using&nbsp;&nbsp;

00:14:45.840 --> 00:14:51.840 position:63% line:0%
created using the tag the D in this step what&nbsp;
we are trying to do is we are trying to tell&nbsp;&nbsp;

00:14:52.400 --> 00:15:01.040 position:63% line:0%
beautiful su to find all TD from this particular&nbsp;
soup that we have just created. de su. So, we are&nbsp;&nbsp;

00:15:01.040 --> 00:15:07.840 position:63% line:0%
using the function find all to find everything&nbsp;
that is TD, but as you can see, we are trying&nbsp;&nbsp;

00:15:07.840 --> 00:15:14.480 position:63% line:0%
to find everywhere where there is TD with class&nbsp;
title. So, as you can see, we are trying to find&nbsp;&nbsp;

00:15:14.480 --> 00:15:20.320 position:63% line:0%
everywhere there there is class title and then&nbsp;
we are trying to extract the components of it&nbsp;&nbsp;

00:15:21.600 --> 00:15:25.280 position:63% line:0%
everywhere there is class title and then&nbsp;
we are trying to extract the components&nbsp;&nbsp;

00:15:25.840 --> 00:15:30.560 position:63% line:0%
or the values inside it that is exactly&nbsp;
what we're doing in this function&nbsp;&nbsp;

00:15:30.560 --> 00:15:36.480 position:63% line:0%
soup dot find all DD and then the attributes&nbsp;
the HTML attributes that we are looking for this&nbsp;&nbsp;

00:15:36.480 --> 00:15:42.880 position:63% line:0%
class title and then we align we align&nbsp;
is something that you can actually see,&nbsp;&nbsp;

00:15:44.240 --> 00:15:50.080 position:63% line:0%
this is what we are trying to find out from this&nbsp;
particular webpage. So, we are trying to find&nbsp;&nbsp;

00:15:50.640 --> 00:15:58.080 position:63% line:0%
everything that is TD and we are trying to&nbsp;
extract that using this attribute class title&nbsp;&nbsp;

00:15:58.080 --> 00:16:04.080 position:63% line:0%
and then we are saying we align should be empty&nbsp;
the first attribute class should have value title,&nbsp;&nbsp;

00:16:04.080 --> 00:16:09.680 position:63% line:0%
the second attribute we align should have&nbsp;
nothing in it. So, just let us see it once again.&nbsp;&nbsp;

00:16:09.680 --> 00:16:15.360 position:63% line:0%
Once you click the inspector tool, and then&nbsp;
however on the page, you click on the title&nbsp;&nbsp;

00:16:15.360 --> 00:16:22.560 position:63% line:0%
that you want, and you can actually see the&nbsp;
title The TD plus attribute holds the value title&nbsp;&nbsp;

00:16:22.560 --> 00:16:29.200 position:63% line:0%
and then the we align like this one is not present&nbsp;
yet. So, this is to eliminate the junk and then&nbsp;&nbsp;

00:16:29.200 --> 00:16:36.480 position:63% line:0%
extract the component that we want. So, once we do&nbsp;
that, we are trying to find wherever we are trying&nbsp;&nbsp;

00:16:36.480 --> 00:16:42.800 position:63% line:0%
to convert the entire thing as a text. So, to see&nbsp;
that we have to understand one more thing, what&nbsp;&nbsp;

00:16:42.800 --> 00:16:49.840 position:63% line:0%
we are actually seeing is this is okay. So, we are&nbsp;
extracting TD, which has class title, but that is&nbsp;&nbsp;

00:16:49.840 --> 00:16:56.080 position:63% line:0%
only for the first element, but what we need is&nbsp;
we need all the links, we need all the 30 links&nbsp;&nbsp;

00:16:56.080 --> 00:17:02.640 position:63% line:0%
from this particular page for us to to do that, we&nbsp;
are trying to put this entire thing in a for loop&nbsp;&nbsp;

00:17:02.640 --> 00:17:07.520 position:63% line:0%
and then we are using this function enumerate&nbsp;
just for one simple purpose because in the final&nbsp;&nbsp;

00:17:07.520 --> 00:17:16.320 position:63% line:0%
email that we want, we want numbers 123456 until&nbsp;
30. So, for that purpose, we are trying to use&nbsp;&nbsp;

00:17:16.320 --> 00:17:23.280 position:63% line:0%
enumerate which will give us the actual number the&nbsp;
index value and also the value of this output. So&nbsp;&nbsp;

00:17:23.280 --> 00:17:29.360 position:63% line:0%
we are using a for loop and we are using a&nbsp;
numerate to say okay, I want all the values&nbsp;&nbsp;

00:17:30.000 --> 00:17:35.840 position:63% line:0%
that is output of this thing, which will give&nbsp;
us all the text all the scraped output and&nbsp;&nbsp;

00:17:35.840 --> 00:17:40.400 position:63% line:0%
then we are saying enumerated so that we have&nbsp;
the index value and we also have the actual&nbsp;&nbsp;

00:17:40.400 --> 00:17:46.480 position:63% line:0%
tag that is extracted from this page. And once&nbsp;
we do that, we are entering into the for loop&nbsp;&nbsp;

00:17:46.480 --> 00:17:52.640 position:63% line:0%
trying to build the email content actual content.&nbsp;
So as we just discussed, we are trying to&nbsp;&nbsp;

00:17:52.640 --> 00:18:00.960 position:63% line:0%
create the table row number with this value I and&nbsp;
as you can see, Python is a zero index language.&nbsp;&nbsp;

00:18:00.960 --> 00:18:05.920 position:63% line:0%
So what we are trying to do is we are trying&nbsp;
to say okay, I plus one which will give us&nbsp;&nbsp;

00:18:05.920 --> 00:18:11.600 position:63% line:0%
one for the first row and then two three&nbsp;
until 30 so on and then we are going to&nbsp;&nbsp;

00:18:11.600 --> 00:18:15.840 position:63% line:0%
we are trying to actually have a nice looking&nbsp;
format just like this, which will separate the&nbsp;&nbsp;

00:18:16.960 --> 00:18:22.640 position:63% line:0%
index number from the actual title and then we are&nbsp;
trying to convert everything. What we are trying&nbsp;&nbsp;

00:18:22.640 --> 00:18:28.640 position:63% line:0%
to do is we are trying to convert everything that&nbsp;
we just extracted using dot txt into a text. So we&nbsp;&nbsp;

00:18:28.640 --> 00:18:33.120 position:63% line:0%
are trying to say okay, you have given me the&nbsp;
tag, but I don't want the entire day, I just&nbsp;&nbsp;

00:18:33.120 --> 00:18:39.280 position:63% line:0%
want that text inside the tag. So the value inside&nbsp;
the tag. So we are using tag dot txt to do that.&nbsp;&nbsp;

00:18:40.160 --> 00:18:45.680 position:63% line:0%
And then now we need a line break. So we are going&nbsp;
to use br which is an HTML tag for the line break.&nbsp;&nbsp;

00:18:45.680 --> 00:18:50.880 position:63% line:0%
And then one more thing is required here, which&nbsp;
is if you can notice in this particular page,&nbsp;&nbsp;

00:18:50.880 --> 00:18:57.280 position:63% line:0%
you have got all the title letters again open our&nbsp;
whip inspector and you have got all the title. But&nbsp;&nbsp;

00:18:57.280 --> 00:19:03.680 position:63% line:0%
at the end of the page, you actually have another&nbsp;
title which is TD class title, we aligned nothing,&nbsp;&nbsp;

00:19:03.680 --> 00:19:10.720 position:63% line:0%
but this value is more. So in order to avoid this&nbsp;
more getting captured in our final output email&nbsp;&nbsp;

00:19:10.720 --> 00:19:17.840 position:63% line:0%
body, we are trying to eliminate this saying&nbsp;
that we want everything one to 30 except when&nbsp;&nbsp;

00:19:17.840 --> 00:19:22.720 position:63% line:0%
there is a value more that is what exactly we&nbsp;
are doing. We are saying we want everything&nbsp;&nbsp;

00:19:23.280 --> 00:19:30.240 position:63% line:0%
except when the tag is not equal to more. We&nbsp;
are saying give me everything when the tag is&nbsp;&nbsp;

00:19:30.240 --> 00:19:36.800 position:63% line:0%
not equal to more. And then we are concatenating&nbsp;
it for every row. So this for loop is executing&nbsp;&nbsp;

00:19:36.800 --> 00:19:42.800 position:63% line:0%
for every row and then every row value is getting&nbsp;
added in the CNT. And at the end of this function,&nbsp;&nbsp;

00:19:42.800 --> 00:19:48.880 position:63% line:0%
we are returning this object Python object that&nbsp;
we created, which was an empty placeholder string,&nbsp;&nbsp;

00:19:48.880 --> 00:19:54.320 position:63% line:0%
as CMT. To recap, this particular&nbsp;
function, this function is to extract&nbsp;&nbsp;

00:19:55.360 --> 00:20:01.200 position:63% line:0%
the front page links or title or the components&nbsp;
that we wanted So we are creating a function&nbsp;&nbsp;

00:20:01.200 --> 00:20:06.320 position:63% line:0%
called extract underscore news, where we are&nbsp;
passing on the URL. And then we are creating a&nbsp;&nbsp;

00:20:06.320 --> 00:20:11.760 position:63% line:0%
nice title, which says agent top stories,&nbsp;
and then we are extracting the content,&nbsp;&nbsp;

00:20:11.760 --> 00:20:18.480 position:63% line:0%
we are using beautifulsoup to extract make a soup&nbsp;
out of it. And then we are using soup dot find all&nbsp;&nbsp;

00:20:18.480 --> 00:20:25.120 position:63% line:0%
to find all the teeny tags with attributes class&nbsp;
title, and then we align nothing. And then we are&nbsp;&nbsp;

00:20:25.120 --> 00:20:31.600 position:63% line:0%
trying to create rows using this thing. And while&nbsp;
we are creating rows, we also noticed that there&nbsp;&nbsp;

00:20:31.600 --> 00:20:37.120 position:63% line:0%
is one final row which has a value more which we&nbsp;
do not want. So we are excluding that. And then&nbsp;&nbsp;

00:20:37.120 --> 00:20:44.400 position:63% line:0%
finally we are returning the entire object, TNT as&nbsp;
the result of this function. In the next section,&nbsp;&nbsp;

00:20:44.400 --> 00:20:48.960 position:63% line:0%
we'll see how to call the function, and&nbsp;
then we'll move on to composing the email.&nbsp;&nbsp;

00:20:50.400 --> 00:20:55.120 position:63% line:0%
In the previous video, we learned how&nbsp;
to build a custom function that we use&nbsp;&nbsp;

00:20:55.120 --> 00:21:00.880 position:63% line:0%
for extracting the news from Hacker News friend&nbsp;
page. In this video, we'll see how to call it&nbsp;&nbsp;

00:21:00.880 --> 00:21:05.920 position:63% line:0%
function, how to finish the email content, and&nbsp;
then how to start with email authentication.&nbsp;&nbsp;

00:21:05.920 --> 00:21:11.200 position:63% line:0%
So to start with, we can see the function that we&nbsp;
tried to build in the previous section is called&nbsp;&nbsp;

00:21:11.200 --> 00:21:17.440 position:63% line:0%
extract underscore news. That takes one argument&nbsp;
which is a URL to invoke the function or to call&nbsp;&nbsp;

00:21:17.440 --> 00:21:21.760 position:63% line:0%
the function, we are going to say extract&nbsp;
underscore news. And then we are going to&nbsp;&nbsp;

00:21:21.760 --> 00:21:27.440 position:63% line:0%
pass on the URL of that Hacker News friend&nbsp;
page as a string, once we do this thing,&nbsp;&nbsp;

00:21:28.480 --> 00:21:33.680 position:63% line:0%
this function gets executed and then whatever&nbsp;
is returned in C and D will get assigned to this&nbsp;&nbsp;

00:21:33.680 --> 00:21:39.760 position:63% line:0%
particular CNT. And as we saw in the previous&nbsp;
section, this C and T is a local object whose&nbsp;&nbsp;

00:21:39.760 --> 00:21:45.360 position:63% line:0%
scope is within this function. And this C and&nbsp;
T is part of a global object, which has scope&nbsp;&nbsp;

00:21:45.360 --> 00:21:52.560 position:63% line:0%
in the entire code. Once we have this end, what we&nbsp;
are going to do is we are going to append this end&nbsp;&nbsp;

00:21:52.560 --> 00:21:59.040 position:63% line:0%
to the content placeholder that we created. So we&nbsp;
are saying just content plus equal to which is as&nbsp;&nbsp;

00:21:59.040 --> 00:22:05.200 position:63% line:0%
equal and as content is equal to content plus. So&nbsp;
instead of this thing, we are going to simply say&nbsp;&nbsp;

00:22:05.200 --> 00:22:12.000 position:63% line:0%
content CNT plus equal to c NT at the end of&nbsp;
the email body, then we are trying to put empty&nbsp;&nbsp;

00:22:12.000 --> 00:22:17.120 position:63% line:0%
lines with dashes to denote that the email is&nbsp;
finished. And then finally, we are going to&nbsp;&nbsp;

00:22:17.120 --> 00:22:21.920 position:63% line:0%
add two more lines and then say this is the&nbsp;
end of the message. This is just for us to&nbsp;&nbsp;

00:22:21.920 --> 00:22:27.600 position:63% line:0%
make the email more professional, more useful in&nbsp;
understanding where the email starts with this&nbsp;&nbsp;

00:22:27.600 --> 00:22:33.280 position:63% line:0%
thing and where the email actually ends. Once we&nbsp;
have this finished, what we are going to now do&nbsp;&nbsp;

00:22:33.280 --> 00:22:39.120 position:63% line:0%
is we are going to start with the email composing&nbsp;
state. And then the first step of email composing&nbsp;&nbsp;

00:22:39.120 --> 00:22:45.760 position:63% line:0%
is to create the parameters that is required for&nbsp;
email authentication, as we saw in the project&nbsp;&nbsp;

00:22:46.400 --> 00:22:51.200 position:63% line:0%
architecture section, so once the email&nbsp;
composition, the email body is ready, we&nbsp;&nbsp;

00:22:51.200 --> 00:22:57.120 position:63% line:0%
are going to start with the email authentication.&nbsp;
For email authentication, there are five important&nbsp;&nbsp;

00:22:57.120 --> 00:23:02.800 position:63% line:0%
parameters that we have to define first, what&nbsp;
is the email server, the SMTP server that you&nbsp;&nbsp;

00:23:02.800 --> 00:23:08.320 position:63% line:0%
are going to use? Second, what is the port&nbsp;
number? Third, what is the from address email&nbsp;&nbsp;

00:23:08.320 --> 00:23:14.080 position:63% line:0%
address where you want to send the email? What&nbsp;
is the address where you want to send the email,&nbsp;&nbsp;

00:23:14.080 --> 00:23:18.880 position:63% line:0%
and then finally, the password of the address from&nbsp;
address from where you want to send that email.&nbsp;&nbsp;

00:23:20.240 --> 00:23:25.040 position:63% line:0%
One thing that you have to keep in mind is this&nbsp;
to address could be actually a list where you&nbsp;&nbsp;

00:23:25.040 --> 00:23:30.880 position:63% line:0%
want to send this email to multiple recipients.&nbsp;
So in this particular project, we will see how to&nbsp;&nbsp;

00:23:30.880 --> 00:23:36.560 position:63% line:0%
send this email to yourself so that you can keep&nbsp;
yourself updated with Hacker News Headlines every&nbsp;&nbsp;

00:23:36.560 --> 00:23:43.360 position:63% line:0%
day. But actually, you can even send this email&nbsp;
to multiple person provided that you give a list&nbsp;&nbsp;

00:23:43.360 --> 00:23:49.120 position:63% line:0%
of email ids list. When I mean list, it's actually&nbsp;
a Python list. So to start with, we are going to&nbsp;&nbsp;

00:23:49.120 --> 00:23:57.040 position:63% line:0%
use a Gmail account for this particular step. So&nbsp;
we are going to stay SMTP gmail.com, which is the&nbsp;&nbsp;

00:23:57.040 --> 00:24:04.720 position:63% line:0%
SMTP email server for Gmail. And for Gmail, the&nbsp;
port number is 587. And then the next thing is&nbsp;&nbsp;

00:24:04.720 --> 00:24:12.560 position:63% line:0%
the from email ID, which should be in character&nbsp;
as a string. So for the sake of this particular&nbsp;&nbsp;

00:24:12.560 --> 00:24:18.560 position:63% line:0%
project, I'm going to use my gmail account from&nbsp;
where I want to send my email. And then also,&nbsp;&nbsp;

00:24:18.560 --> 00:24:25.840 position:63% line:0%
this is the same email ID for which I want to send&nbsp;
this email to remember, the to address could be&nbsp;&nbsp;

00:24:25.840 --> 00:24:31.920 position:63% line:0%
a list of email ids, where we have multiple email&nbsp;
ids so that this one email could be sent to a lot&nbsp;&nbsp;

00:24:31.920 --> 00:24:38.320 position:63% line:0%
of people. And then finally we have the password&nbsp;
that we are going to use for this email account.&nbsp;&nbsp;

00:24:38.320 --> 00:24:45.920 position:63% line:0%
So you enter the password that is required to log&nbsp;
into this account. And then this will complete the&nbsp;&nbsp;

00:24:45.920 --> 00:24:52.080 position:63% line:0%
parameters that we wanted. Once we have this in&nbsp;
place. The next thing is we are going to create&nbsp;&nbsp;

00:24:52.080 --> 00:24:57.680 position:63% line:0%
the message body. So the message body that we want&nbsp;
is a mime multipart. So we are creating an empty&nbsp;&nbsp;

00:24:58.560 --> 00:25:04.320 position:63% line:0%
object with using function mind multipad. And&nbsp;
then we have to add the subsequent components&nbsp;&nbsp;

00:25:04.320 --> 00:25:09.280 position:63% line:0%
of an email, an email is supposed to have an&nbsp;
important thing, which is called an email subject.&nbsp;&nbsp;

00:25:09.280 --> 00:25:15.360 position:63% line:0%
So to create an email subject, there are multiple&nbsp;
things that we can actually do. The first nyovest&nbsp;&nbsp;

00:25:15.360 --> 00:25:21.040 position:63% line:0%
thing that we can actually do is we can have a&nbsp;
title, that doesn't change. But the disadvantage&nbsp;&nbsp;

00:25:21.040 --> 00:25:26.560 position:63% line:0%
with that is, in an email client, like Gmail,&nbsp;
or outlook, if you have the same title, every&nbsp;&nbsp;

00:25:26.560 --> 00:25:32.720 position:63% line:0%
email that comes next day gets folded in the same&nbsp;
conversation, instead of having a different email,&nbsp;&nbsp;

00:25:32.720 --> 00:25:38.720 position:63% line:0%
the same email will be there, and then subsequent&nbsp;
emails will be added as a conversation. So to&nbsp;&nbsp;

00:25:38.720 --> 00:25:45.200 position:63% line:0%
avoid that, and also for us to understand when did&nbsp;
we see that particular email, what we are going&nbsp;&nbsp;

00:25:45.200 --> 00:25:50.880 position:63% line:0%
to do is, we are going to create a dynamic email&nbsp;
subject and the way we are going to do that is, as&nbsp;&nbsp;

00:25:50.880 --> 00:25:57.200 position:63% line:0%
you can remember from the previous videos, we had&nbsp;
created a new object Python object that called now&nbsp;&nbsp;

00:25:57.920 --> 00:26:03.920 position:63% line:0%
from the date time package, which will return the&nbsp;
system date the current date. So what we are doing&nbsp;&nbsp;

00:26:03.920 --> 00:26:10.320 position:63% line:0%
here is we are saying okay, this is my emails,&nbsp;
which says top news stories, hm automated email,&nbsp;&nbsp;

00:26:10.320 --> 00:26:14.880 position:63% line:0%
that's well and good. Next what we are trying to&nbsp;
do is we are trying to actually create the date&nbsp;&nbsp;

00:26:14.880 --> 00:26:22.400 position:63% line:0%
object, str now dot they will give you the day.&nbsp;
The next one is str node month. The next one is&nbsp;&nbsp;

00:26:22.400 --> 00:26:27.360 position:63% line:0%
str node here. So what we are trying to do is we&nbsp;
are actually trying to create an email subject&nbsp;&nbsp;

00:26:27.360 --> 00:26:34.160 position:63% line:0%
line that has the date, component, date, day, and&nbsp;
then your year. So once we have this thing, we are&nbsp;&nbsp;

00:26:34.160 --> 00:26:40.880 position:63% line:0%
going to assign it in this mime multipart that we&nbsp;
created as subject. The next is the from address&nbsp;&nbsp;

00:26:40.880 --> 00:26:47.200 position:63% line:0%
from the next store address as to and once we&nbsp;
are done with this thing, we are going to attach&nbsp;&nbsp;

00:26:47.200 --> 00:26:54.000 position:63% line:0%
the email body the email body that we created&nbsp;
as message MSG dot attach. As you can notice,&nbsp;&nbsp;

00:26:54.000 --> 00:27:01.760 position:63% line:0%
here, we are trying to make this an HTML email. If&nbsp;
you remember, we had used Be bold as HTML tags to&nbsp;&nbsp;

00:27:01.760 --> 00:27:09.280 position:63% line:0%
make our email look slightly more better than a&nbsp;
normal text email. And that is why we are using&nbsp;&nbsp;

00:27:09.280 --> 00:27:15.840 position:63% line:0%
mime text should be content HTML, and then we are&nbsp;
attaching that content to the email. So with this,&nbsp;&nbsp;

00:27:15.840 --> 00:27:20.480 position:63% line:0%
our email body is currently ready. Now we are&nbsp;
moving on to the authentication section we are we&nbsp;&nbsp;

00:27:20.480 --> 00:27:26.480 position:63% line:0%
are printing the message that initializing server.&nbsp;
Once we have the server components in place,&nbsp;&nbsp;

00:27:26.480 --> 00:27:32.560 position:63% line:0%
the next step that we are going to do is we're&nbsp;
going to call SMTP function from the SMTP lib&nbsp;&nbsp;

00:27:33.360 --> 00:27:37.760 position:63% line:0%
package. And then we are saying okay, this is my&nbsp;
server, this is my port, I'm going to send it to&nbsp;&nbsp;

00:27:37.760 --> 00:27:43.920 position:63% line:0%
server and then this function set underscore&nbsp;
debug level. One is to say whether we want&nbsp;&nbsp;

00:27:43.920 --> 00:27:49.680 position:63% line:0%
to see debug messages if the server has issue&nbsp;
in connecting if the server has any problem.&nbsp;&nbsp;

00:27:50.320 --> 00:27:55.120 position:63% line:0%
If the authentication is not successful, do you&nbsp;
want to see the error messages or not. So if you&nbsp;&nbsp;

00:27:55.120 --> 00:27:59.520 position:63% line:0%
do not want to see the error messages, you can set&nbsp;
zero. If you want to see the error messages, you&nbsp;&nbsp;

00:27:59.520 --> 00:28:05.280 position:63% line:0%
can set one which will help you in debugging. Once&nbsp;
we have that thing, we are going to initiate this&nbsp;&nbsp;

00:28:05.280 --> 00:28:12.240 position:63% line:0%
over with Hello. And then we are going to start a&nbsp;
TLS connection which is a secured connection. And&nbsp;&nbsp;

00:28:12.240 --> 00:28:18.320 position:63% line:0%
then once that is done, we are going to log in&nbsp;
from ID using the password that we have given.&nbsp;&nbsp;

00:28:19.280 --> 00:28:24.400 position:63% line:0%
Once the login is successful, then finally we&nbsp;
are going to send the email that we have composed&nbsp;&nbsp;

00:28:24.400 --> 00:28:31.760 position:63% line:0%
from this ID to this ID where the message that&nbsp;
we have created is sent as a string using the&nbsp;&nbsp;

00:28:31.760 --> 00:28:37.760 position:63% line:0%
function as underscore string. Once the message&nbsp;
is sent successfully, we are going to print a user&nbsp;&nbsp;

00:28:37.760 --> 00:28:44.080 position:63% line:0%
message email sent. And then finally, we are going&nbsp;
to quit from the server that we just initialized.&nbsp;&nbsp;

00:28:44.080 --> 00:28:49.840 position:63% line:0%
So we are going to initialize the server using the&nbsp;
server and port detail that we just created. We&nbsp;&nbsp;

00:28:49.840 --> 00:28:55.280 position:63% line:0%
are going to set the debug level one to understand&nbsp;
the error messages, we are going to initiate the&nbsp;&nbsp;

00:28:55.280 --> 00:29:01.120 position:63% line:0%
transaction with the server starting with ello&nbsp;
and then starting with TLS server and then we&nbsp;&nbsp;

00:29:01.120 --> 00:29:06.560 position:63% line:0%
are going to log into the from and the ID email&nbsp;
id and then using the password. And then finally&nbsp;&nbsp;

00:29:06.560 --> 00:29:12.240 position:63% line:0%
we are going to send the email from this ID to&nbsp;
this ID or set of IDs that we have created here.&nbsp;&nbsp;

00:29:12.880 --> 00:29:18.960 position:63% line:0%
And then finally, we are going to send it as a&nbsp;
message using this as underscore string function.&nbsp;&nbsp;

00:29:18.960 --> 00:29:23.040 position:63% line:0%
And then finally we are printing a user message&nbsp;
and then we are going to quit from the server.&nbsp;&nbsp;

00:29:23.840 --> 00:29:30.800 position:63% line:0%
In the next video we'll see how the email actually&nbsp;
looks and then how do we execute the script. In&nbsp;&nbsp;

00:29:30.800 --> 00:29:36.400 position:63% line:0%
the previous section, we completed the actual code&nbsp;
that was required for this particular project.&nbsp;&nbsp;

00:29:36.960 --> 00:29:41.840 position:63% line:0%
But before we move on to executing the code, there&nbsp;
is one change that you have to do if you are going&nbsp;&nbsp;

00:29:41.840 --> 00:29:47.360 position:63% line:0%
to use your Gmail account. If you are going to&nbsp;
use your custom SMTP like your company email id,&nbsp;&nbsp;

00:29:47.360 --> 00:29:52.800 position:63% line:0%
or you're going to have your own email server you&nbsp;
probably would not need to know this thing. But if&nbsp;&nbsp;

00:29:52.800 --> 00:29:57.440 position:63% line:0%
you are going to use your Gmail account to send&nbsp;
an automated email, this is one mandatory step&nbsp;&nbsp;

00:29:57.440 --> 00:30:02.640 position:63% line:0%
that you have to do otherwise, your email would&nbsp;
draw authentication error. So what is that thing.&nbsp;&nbsp;

00:30:03.280 --> 00:30:08.080 position:63% line:0%
So what you have to do is you have to go to&nbsp;
your email account. So what you have to do is&nbsp;&nbsp;

00:30:08.080 --> 00:30:14.400 position:63% line:0%
you have to go to my account.google.com slash&nbsp;
security. So this is what you have to open,&nbsp;&nbsp;

00:30:14.400 --> 00:30:20.880 position:63% line:0%
you have to go to my account.google.com slash&nbsp;
security and then you could do Security tab.&nbsp;&nbsp;

00:30:20.880 --> 00:30:26.000 position:63% line:0%
Once you get into the Security tab, you will&nbsp;
see something called less secure access,&nbsp;&nbsp;

00:30:26.640 --> 00:30:31.600 position:63% line:0%
you'll see less secure app access onto your&nbsp;
scrawled on the top page looks like this.&nbsp;&nbsp;

00:30:31.600 --> 00:30:37.520 position:63% line:0%
So once you go at the end, you will see&nbsp;
less secure app access to click this button.&nbsp;&nbsp;

00:30:39.360 --> 00:30:46.000 position:63% line:0%
Right now I have it on but for you It should be&nbsp;
ideally off. So what you have to do is you have&nbsp;&nbsp;

00:30:46.000 --> 00:30:50.720 position:63% line:0%
to turn it on. So read this message carefully&nbsp;
wants to Google is trying to tell you that you&nbsp;&nbsp;

00:30:50.720 --> 00:30:58.400 position:63% line:0%
are trying to enable your email sign in for less&nbsp;
secure technology. And this project that we are&nbsp;&nbsp;

00:30:58.400 --> 00:31:04.320 position:63% line:0%
doing it is calling it as less secure technology&nbsp;
because it doesn't use two factor authentication,&nbsp;&nbsp;

00:31:04.320 --> 00:31:07.040 position:63% line:0%
unlike your mobile phone or&nbsp;
mobile app or something else.&nbsp;&nbsp;

00:31:07.760 --> 00:31:11.360 position:63% line:0%
So Google is trying to let you&nbsp;
know that you are trying to access&nbsp;&nbsp;

00:31:12.240 --> 00:31:19.280 position:63% line:0%
or give access to your Gmail login for less secure&nbsp;
app. And this is how exactly the message is for&nbsp;&nbsp;

00:31:19.280 --> 00:31:24.800 position:63% line:0%
all the email automation project that you will do.&nbsp;
So that is completely fine. But make sure if you&nbsp;&nbsp;

00:31:24.800 --> 00:31:29.280 position:63% line:0%
have two factor authentication, this is not going&nbsp;
to work properly, you have to find another way,&nbsp;&nbsp;

00:31:29.280 --> 00:31:34.400 position:63% line:0%
which you can find on Google forums. But for&nbsp;
normal login, if you have a normal login,&nbsp;&nbsp;

00:31:35.200 --> 00:31:41.360 position:63% line:0%
this is what you have to do, you have to&nbsp;
go to my account.google.com slash security,&nbsp;&nbsp;

00:31:41.360 --> 00:31:46.160 position:63% line:0%
you go click this button. And then by default,&nbsp;
it will be like this for you, which is off.&nbsp;&nbsp;

00:31:48.960 --> 00:31:55.840 position:63% line:0%
And then you have to go here and then turn it&nbsp;
on. Once you turn it on, you'll see this message.&nbsp;&nbsp;

00:31:57.520 --> 00:32:01.440 position:63% line:0%
And then you will have an ELO&nbsp;
color. Let me refresh the page,&nbsp;&nbsp;

00:32:02.640 --> 00:32:10.400 position:63% line:0%
it will take slightly some time for Google to&nbsp;
refresh your on to off logged on to probably&nbsp;&nbsp;

00:32:10.400 --> 00:32:15.840 position:63% line:0%
have to wait executing this until that. So now&nbsp;
you can actually see that this is refreshed.&nbsp;&nbsp;

00:32:15.840 --> 00:32:21.600 position:63% line:0%
And then it is showing with an exclamatory&nbsp;
Mark, which is lately a warning sign to say&nbsp;&nbsp;

00:32:21.600 --> 00:32:29.200 position:63% line:0%
that you have enabled your Gmail login or less&nbsp;
secure apps. Once you are done with this step.&nbsp;&nbsp;

00:32:29.200 --> 00:32:36.480 position:63% line:0%
Now you can go ahead and then execute your&nbsp;
code. And then let us open go to the Python&nbsp;&nbsp;

00:32:36.480 --> 00:32:41.920 position:63% line:0%
Community Edition that we were using Let us&nbsp;
open the terminal. So please note, you can&nbsp;&nbsp;

00:32:41.920 --> 00:32:47.040 position:63% line:0%
even go to your system terminal and then do this&nbsp;
thing. Or even you can use your Python terminal.&nbsp;&nbsp;

00:32:47.040 --> 00:32:51.440 position:63% line:0%
For the first time we'll use your Python terminal&nbsp;
to see what are the error messages that we are&nbsp;&nbsp;

00:32:51.440 --> 00:32:55.840 position:63% line:0%
getting if you are getting some error messages.&nbsp;
Or if you are not going to get any error messages,&nbsp;&nbsp;

00:32:57.120 --> 00:33:02.080 position:63% line:0%
then we can probably you know automate this&nbsp;
entire thing using Windows Task Scheduler,&nbsp;&nbsp;

00:33:02.080 --> 00:33:08.560 position:63% line:0%
or a bash script, that would be just simply run&nbsp;
on your terminal or shell. So to start with,&nbsp;&nbsp;

00:33:08.560 --> 00:33:11.760 position:63% line:0%
what we have to do is we let us see what&nbsp;
are all the files that we have, these are&nbsp;&nbsp;

00:33:11.760 --> 00:33:16.800 position:63% line:0%
the files that we have in this thing. And this&nbsp;
is the particular file that we are of interest,&nbsp;&nbsp;

00:33:16.800 --> 00:33:22.000 position:63% line:0%
we will say Python three, and then we are&nbsp;
pasting the file name and then executing it.&nbsp;&nbsp;

00:33:22.000 --> 00:33:26.480 position:63% line:0%
As you can see, these are the error messages&nbsp;
or user messages that we were printing.&nbsp;&nbsp;

00:33:26.480 --> 00:33:34.400 position:63% line:0%
And now because we had enabled debug level one,&nbsp;
this message has been sent. And you can see that&nbsp;&nbsp;

00:33:34.400 --> 00:33:40.480 position:63% line:0%
it is showing that this is first extracting Hacker&nbsp;
News stories composing email initiating server,&nbsp;&nbsp;

00:33:40.480 --> 00:33:46.160 position:63% line:0%
all the IP address related details and starting&nbsp;
the TLS server. And then it is saying though,&nbsp;&nbsp;

00:33:46.160 --> 00:33:52.000 position:63% line:0%
okay, SMTP has started. And then from this email,&nbsp;
you're sending it to this email. And then this is&nbsp;&nbsp;

00:33:52.000 --> 00:33:57.760 position:63% line:0%
your email body starting with automated email.&nbsp;
And then finally you're finishing the email,&nbsp;&nbsp;

00:33:57.760 --> 00:34:02.400 position:63% line:0%
and then you're receiving a message that email&nbsp;
sent and then the email connection is closed,&nbsp;&nbsp;

00:34:03.120 --> 00:34:08.320 position:63% line:0%
we'll see how to do the same thing using your&nbsp;
terminal. To open the terminal that you have&nbsp;&nbsp;

00:34:08.320 --> 00:34:13.440 position:63% line:0%
taught with the terminal that you have like&nbsp;
in my case, I'm going to open my Mac terminal.&nbsp;&nbsp;

00:34:13.440 --> 00:34:17.280 position:63% line:0%
And then I'm going to first navigate to&nbsp;
the place where I have got the quotes.&nbsp;&nbsp;

00:34:18.560 --> 00:34:22.880 position:63% line:0%
Once you navigate to the folder where you&nbsp;
have got the quotes, now check what are the&nbsp;&nbsp;

00:34:22.880 --> 00:34:26.320 position:63% line:0%
files you have got. So these are the files&nbsp;
that we have got. So copy the file name.&nbsp;&nbsp;

00:34:27.520 --> 00:34:34.480 position:63% line:0%
Now open Python three, and then filename. You are&nbsp;
executing first extracting the news composing the&nbsp;&nbsp;

00:34:34.480 --> 00:34:43.120 position:63% line:0%
email. And it is the same set of messages that&nbsp;
we have seen. So in this video, we learned how to&nbsp;&nbsp;

00:34:43.120 --> 00:34:49.120 position:63% line:0%
enable the Google setting that will allow us to&nbsp;
send automated emails through Gmail. And then we&nbsp;&nbsp;

00:34:49.120 --> 00:34:55.200 position:63% line:0%
also saw how to execute our script, both in the&nbsp;
Python and also in our terminal. So the way we&nbsp;&nbsp;

00:34:55.200 --> 00:35:01.920 position:63% line:0%
execute is using this code, Python three which&nbsp;
is to exit Python three or invoke Python three&nbsp;&nbsp;

00:35:01.920 --> 00:35:07.040 position:63% line:0%
console and then the file name. In the next video,&nbsp;
we'll actually see how the email looks like.&nbsp;&nbsp;

00:35:08.800 --> 00:35:14.560 position:63% line:0%
In this video, we'll see how the email that we&nbsp;
sent using the previous automated script actually&nbsp;&nbsp;

00:35:14.560 --> 00:35:20.640 position:63% line:0%
looks like. Let us go to our email. As you can&nbsp;
see, Google has sent me a critical security alert,&nbsp;&nbsp;

00:35:20.640 --> 00:35:26.880 position:63% line:0%
which is just to notify that I had tried to&nbsp;
enable My Account Login for less secure apps.&nbsp;&nbsp;

00:35:26.880 --> 00:35:32.240 position:63% line:0%
And you know, that is completely fine for us to&nbsp;
see and then ignore. And then the next thing is,&nbsp;&nbsp;

00:35:32.240 --> 00:35:37.120 position:63% line:0%
we can see the email that we sent. As you can&nbsp;
see, you have received two emails, because the&nbsp;&nbsp;

00:35:37.120 --> 00:35:42.160 position:63% line:0%
first email was sent using the terminal inside pi&nbsp;
charm. The second email was sent using the shell,&nbsp;&nbsp;

00:35:42.160 --> 00:35:46.000 position:63% line:0%
the actual terminal that is in your voice,&nbsp;
which is your command prompt or terminal.&nbsp;&nbsp;

00:35:46.640 --> 00:35:52.000 position:63% line:0%
So let us open the email with a slightly zoom&nbsp;
out to see how the email actually looks like.&nbsp;&nbsp;

00:35:52.000 --> 00:35:57.680 position:63% line:0%
As you can see, this is the subject of the email&nbsp;
where this is static, what we created. And then&nbsp;&nbsp;

00:35:57.680 --> 00:36:02.720 position:63% line:0%
this is the date that is the current system&nbsp;
date. And then you can see a bold email title,&nbsp;&nbsp;

00:36:03.520 --> 00:36:09.440 position:63% line:0%
not the subject, actually mail title. And you can&nbsp;
also see that email was sent from to this email.&nbsp;&nbsp;

00:36:10.800 --> 00:36:16.000 position:63% line:0%
And you can actually see another important thing&nbsp;
that this email has fallen initiate your inbox&nbsp;&nbsp;

00:36:16.000 --> 00:36:22.000 position:63% line:0%
and not inside your spam box. So what happens is,&nbsp;
if you do not have all the email companies that&nbsp;&nbsp;

00:36:22.000 --> 00:36:27.520 position:63% line:0%
mime components that we set up, your email might&nbsp;
end up in your spam not in your inbox. So make&nbsp;&nbsp;

00:36:27.520 --> 00:36:33.040 position:63% line:0%
sure that you have got all the email components&nbsp;
that we described in the code setup, right? Now&nbsp;&nbsp;

00:36:33.040 --> 00:36:38.960 position:63% line:0%
you can see that you have a title, then you have&nbsp;
all the formatting that we did, then you have the&nbsp;&nbsp;

00:36:38.960 --> 00:36:45.840 position:63% line:0%
number that we used using the enumerate index i&nbsp;
and then we have this formatting the separator,&nbsp;&nbsp;

00:36:45.840 --> 00:36:51.280 position:63% line:0%
and then we have the title. And then finally,&nbsp;
we have the domain name with the link. In fact,&nbsp;&nbsp;

00:36:51.280 --> 00:36:56.240 position:63% line:0%
as you can see, we have 30. And then finally, we&nbsp;
have this thing, and then we finally say end of&nbsp;&nbsp;

00:36:56.240 --> 00:37:03.040 position:63% line:0%
message. Let us open the next email also, to see&nbsp;
Okay, the first one is this. The second one is&nbsp;&nbsp;

00:37:03.040 --> 00:37:08.320 position:63% line:0%
this. And then we have all the 30 items. And then&nbsp;
finally, we are seeing it is in definisi latest&nbsp;&nbsp;

00:37:08.320 --> 00:37:14.080 position:63% line:0%
ones, go to the Hacker News site, and then verify&nbsp;
what is it. As you can see, bullshitters is the&nbsp;&nbsp;

00:37:14.080 --> 00:37:22.320 position:63% line:0%
first we'll show this is the first out to setup&nbsp;
setting up an ad block, putting up an ad block.&nbsp;&nbsp;

00:37:22.320 --> 00:37:27.040 position:63% line:0%
There's no third probably it has changed by the&nbsp;
time we send an email. Now how do I hide from a&nbsp;&nbsp;

00:37:27.040 --> 00:37:33.440 position:63% line:0%
surveillance? How do I hide from a surveillance,&nbsp;
this makes sure that the email that we sent&nbsp;&nbsp;

00:37:33.440 --> 00:37:41.120 position:63% line:0%
is the actual Hacker News for this time during&nbsp;
the file for 2019. At this time, 25 for 2019.&nbsp;&nbsp;

00:37:42.320 --> 00:37:49.840 position:63% line:0%
So in this video, we saw how the actual email&nbsp;
that we sent using the previous script looks like&nbsp;&nbsp;

00:37:49.840 --> 00:37:57.520 position:63% line:0%
and in this section, we have learned how to build&nbsp;
an automated Hacker News headline e mailer, which&nbsp;&nbsp;

00:37:57.520 --> 00:38:03.760 position:63% line:0%
now further you can extend to probably a Windows&nbsp;
Task Scheduler to send it every day morning,&nbsp;&nbsp;

00:38:03.760 --> 00:38:10.320 position:63% line:0%
or using a bash script scheduler or a cron&nbsp;
job to automatically send this email even&nbsp;&nbsp;

00:38:10.320 --> 00:38:16.080 position:63% line:0%
without executing. So in the video, start of the&nbsp;
video, the previous section end we learned how&nbsp;&nbsp;

00:38:16.080 --> 00:38:22.480 position:63% line:0%
to execute the script. But once you automate&nbsp;
it using a task scheduler or a bash script,&nbsp;&nbsp;

00:38:22.480 --> 00:38:27.920 position:63% line:0%
or a cron job, then probably you would not have to&nbsp;
even open or run the script every day, the script&nbsp;&nbsp;

00:38:27.920 --> 00:38:33.120 position:63% line:0%
would be automatically executed. There is only one&nbsp;
important thing that you have to keep in your mind&nbsp;&nbsp;

00:38:33.120 --> 00:38:40.000 position:63% line:0%
before you know we close this section is that this&nbsp;
email script will contain your email password.&nbsp;&nbsp;

00:38:40.640 --> 00:38:45.760 position:63% line:0%
So make sure before you upload it on GitHub or&nbsp;
before you share it with your friends the same&nbsp;&nbsp;

00:38:45.760 --> 00:38:52.000 position:63% line:0%
script that you remove your password so that&nbsp;
no one else knows your password. So in this&nbsp;&nbsp;

00:38:52.000 --> 00:38:56.240 position:63% line:0%
entire project, what we learned&nbsp;
is, how to scrape a website,&nbsp;&nbsp;

00:38:56.240 --> 00:39:02.080 position:63% line:0%
how to extract the components that we want, how to&nbsp;
build an email and how to automatically send that&nbsp;&nbsp;

00:39:02.080 --> 00:39:07.520 position:63% line:0%
email from our gmail account. Hope you enjoyed&nbsp;
this section. Let us see in the next section.&nbsp;&nbsp;

00:39:09.200 --> 00:39:16.480 position:63% line:0%
In this section, too, we'll learn how to&nbsp;
build a TED talk video downloader, we'll see&nbsp;&nbsp;

00:39:16.480 --> 00:39:25.040 position:63% line:0%
how to install requests package and understand&nbsp;
how to use request package for HTTP requests.&nbsp;&nbsp;

00:39:25.040 --> 00:39:32.080 position:63% line:0%
With that, we'll build a basic script to download&nbsp;
the video of a given a TED talk. And then we'll&nbsp;&nbsp;

00:39:32.080 --> 00:39:40.320 position:63% line:0%
store the video in our local machine. Then we'll&nbsp;
generalize the code to download any TED Talk video&nbsp;&nbsp;

00:39:40.320 --> 00:39:45.520 position:63% line:0%
given the URL, and we'll ultimately&nbsp;
package the script as a C light tool.&nbsp;&nbsp;

00:39:48.080 --> 00:39:52.320 position:63% line:0%
In this video, we'll see all the packages&nbsp;
that we'll be using in this project.&nbsp;&nbsp;

00:39:53.040 --> 00:40:00.000 position:63% line:0%
The first and foremost package that we are going&nbsp;
to use in this project is requests request is a&nbsp;&nbsp;

00:40:00.000 --> 00:40:07.920 position:63% line:0%
package that will help us get the web content. And&nbsp;
the request. The name comes from HTTP requests,&nbsp;&nbsp;

00:40:07.920 --> 00:40:15.280 position:63% line:0%
which is how the communication between a&nbsp;
server and client happens in a HTTP protocol,&nbsp;&nbsp;

00:40:15.280 --> 00:40:22.400 position:63% line:0%
the client sends a request to the server, and&nbsp;
then the server response back since the response&nbsp;&nbsp;

00:40:22.400 --> 00:40:30.560 position:63% line:0%
as a result, typical HTTP request contains the&nbsp;
actual request. And then the header lines, like&nbsp;&nbsp;

00:40:30.560 --> 00:40:37.200 position:63% line:0%
authentication, and then an optional empty message&nbsp;
body. So sometimes you can have the information&nbsp;&nbsp;

00:40:37.200 --> 00:40:43.200 position:63% line:0%
that is required to be passed on in that message&nbsp;
body, the package that we are going to use for&nbsp;&nbsp;

00:40:43.200 --> 00:40:52.080 position:63% line:0%
that is requests in Python. So let us see how to&nbsp;
install that required package inside our computer.&nbsp;&nbsp;

00:40:52.080 --> 00:40:58.240 position:63% line:0%
So open your terminal. And then as you might have&nbsp;
seen before, because we are using Python three,&nbsp;&nbsp;

00:40:58.240 --> 00:41:06.720 position:63% line:0%
we should use PIP three install request. This&nbsp;
will install request package from pi pi. So now&nbsp;&nbsp;

00:41:06.720 --> 00:41:12.400 position:63% line:0%
as you can see, a course package is successfully&nbsp;
installed. To verify that we can open our Python&nbsp;&nbsp;

00:41:12.400 --> 00:41:19.040 position:63% line:0%
three console, and then import request and then&nbsp;
see that it has been successfully installed.&nbsp;&nbsp;

00:41:19.040 --> 00:41:25.440 position:63% line:0%
Thank you for listening, we'll see the next video&nbsp;
about another package, which is Beautiful Soup.&nbsp;&nbsp;

00:41:26.800 --> 00:41:32.880 position:63% line:0%
In this video, we'll see about Beautiful Soup.&nbsp;
Beautiful Soup is another important package that&nbsp;&nbsp;

00:41:32.880 --> 00:41:40.000 position:63% line:0%
we'll be using in this project. Beautiful Soup&nbsp;
is used to extract data out of HTML and XML,&nbsp;&nbsp;

00:41:40.000 --> 00:41:45.920 position:63% line:0%
primarily Beautiful Soup is used for web scraping.&nbsp;
So the request package that we saw in the last&nbsp;&nbsp;

00:41:45.920 --> 00:41:51.760 position:63% line:0%
video will give us a content from the webpage. But&nbsp;
as you might have guessed, the content is an HTML&nbsp;&nbsp;

00:41:51.760 --> 00:41:58.080 position:63% line:0%
or XML format, in which websites are designed. So&nbsp;
Beautiful Soup is the package that will give us&nbsp;&nbsp;

00:41:58.080 --> 00:42:05.680 position:63% line:0%
the formatted content, the extract of whatever we&nbsp;
want from the HTML or XML file that we requested&nbsp;&nbsp;

00:42:05.680 --> 00:42:12.640 position:63% line:0%
from the request package as a get request. Let us&nbsp;
see how to install Beautiful Soup package inside&nbsp;&nbsp;

00:42:12.640 --> 00:42:19.600 position:63% line:0%
our Python environment. Beautiful so goes by the&nbsp;
name Beautiful Soup for so open your terminal&nbsp;&nbsp;

00:42:21.040 --> 00:42:28.480 position:63% line:0%
type PIP three, install and Beautiful Soup for&nbsp;
everything in small case, once you click enter&nbsp;&nbsp;

00:42:28.480 --> 00:42:33.600 position:63% line:0%
Beautiful Soup will be collected from pi pi and&nbsp;
then it is going to get successfully installed&nbsp;&nbsp;

00:42:33.600 --> 00:42:38.000 position:63% line:0%
in your local machine. To verify whether&nbsp;
beautifulsoup is installed. Let us open&nbsp;&nbsp;

00:42:38.000 --> 00:42:46.000 position:63% line:0%
up our Python environment which is Python three,&nbsp;
and then import bs four. As you might have seen,&nbsp;&nbsp;

00:42:46.000 --> 00:42:50.560 position:63% line:0%
the package that we installed was beautiful&nbsp;
soup, but when we are going to call it we are&nbsp;&nbsp;

00:42:50.560 --> 00:42:57.200 position:63% line:0%
going to use beautiful bs for us Beautiful Soup.&nbsp;
And especially the function that we are going to&nbsp;&nbsp;

00:42:57.200 --> 00:43:04.480 position:63% line:0%
use the object that we are going to use from&nbsp;
Beautiful Soup is cumbias for input beautiful.&nbsp;&nbsp;

00:43:07.040 --> 00:43:14.000 position:63% line:0%
This is the object that we are going to use from&nbsp;
the package Beautiful Soup. So as you can see,&nbsp;&nbsp;

00:43:14.000 --> 00:43:18.480 position:63% line:0%
and you install it, you have to call it&nbsp;
beautifulsoup for when you import it you&nbsp;&nbsp;

00:43:18.480 --> 00:43:24.560 position:63% line:0%
have to call bs for and then from that this is a&nbsp;
specific object that we are going to use inside&nbsp;&nbsp;

00:43:24.560 --> 00:43:30.080 position:63% line:0%
our code. Let us get into the next video where&nbsp;
we'll see how to build the basic code. Thank you.&nbsp;&nbsp;

00:43:31.760 --> 00:43:38.000 position:63% line:0%
In this video, we'll see how to build the first&nbsp;
version of the TED Talk video download it, as&nbsp;&nbsp;

00:43:38.000 --> 00:43:42.480 position:63% line:0%
we have seen in the previous videos, we have&nbsp;
successfully installed request package and we have&nbsp;&nbsp;

00:43:42.480 --> 00:43:48.320 position:63% line:0%
successfully also install Beautiful Soup package.&nbsp;
So let us start with the code. Let us import the&nbsp;&nbsp;

00:43:48.320 --> 00:43:52.880 position:63% line:0%
required packages first in the header section.&nbsp;
And then let us move on to the code. The first&nbsp;&nbsp;

00:43:52.880 --> 00:43:57.920 position:63% line:0%
package that we are going to use this request. So&nbsp;
let us import requests. And the second package is&nbsp;&nbsp;

00:43:57.920 --> 00:44:03.760 position:63% line:0%
beautiful. So as we saw in the Beautiful Soup&nbsp;
package video, we are going to import Beautiful&nbsp;&nbsp;

00:44:03.760 --> 00:44:09.760 position:63% line:0%
Soup the object from the package bs four. And&nbsp;
once we do that, the next package that we will be&nbsp;&nbsp;

00:44:09.760 --> 00:44:16.000 position:63% line:0%
requiring is our E which is for regular expression&nbsp;
manipulation. So regular expression, as you might&nbsp;&nbsp;

00:44:16.000 --> 00:44:21.600 position:63% line:0%
have known is just to do pattern matching. And&nbsp;
then finally, the package that we're going to use&nbsp;&nbsp;

00:44:21.600 --> 00:44:29.760 position:63% line:0%
is Sis, which is for argument parsing, which is to&nbsp;
generalize the code for using multiple URLs as a&nbsp;&nbsp;

00:44:29.760 --> 00:44:35.680 position:63% line:0%
combined package. So let us start with the code.&nbsp;
So as we have imported the required packages in&nbsp;&nbsp;

00:44:35.680 --> 00:44:40.800 position:63% line:0%
our header section, we'll move on to the further&nbsp;
section. We'll see this exception handling&nbsp;&nbsp;

00:44:40.800 --> 00:44:48.800 position:63% line:0%
in the next video. Meanwhile, we'll use a URL that&nbsp;
is hard coded. So here there is a URL of a TED&nbsp;&nbsp;

00:44:48.800 --> 00:44:56.880 position:63% line:0%
talk. And that is defined in the object URL. So&nbsp;
the first step is to use request package to send&nbsp;&nbsp;

00:44:56.880 --> 00:45:05.440 position:63% line:0%
a get request to get the content of the URL. And&nbsp;
stored in the object. So, because this is going&nbsp;&nbsp;

00:45:05.440 --> 00:45:11.280 position:63% line:0%
to be a long process, it is also good to Minter&nbsp;
message to the user who is using this package,&nbsp;&nbsp;

00:45:12.240 --> 00:45:17.120 position:63% line:0%
the project that we are developing to&nbsp;
indicate that the download is about to start,&nbsp;&nbsp;

00:45:17.680 --> 00:45:24.000 position:63% line:0%
once the request packages successfully get all&nbsp;
the content from the URL of this TED Talk, the&nbsp;&nbsp;

00:45:24.000 --> 00:45:29.680 position:63% line:0%
next thing that we are going to do is we are going&nbsp;
to use beautifulsoup. To create a soup out of the&nbsp;&nbsp;

00:45:29.680 --> 00:45:38.240 position:63% line:0%
content that we have got. As you can see here,&nbsp;
the response of the get request is stored in our&nbsp;&nbsp;

00:45:38.240 --> 00:45:43.040 position:63% line:0%
which is the Python object. But here, when we are&nbsp;
going to use it with beautifulsoup, we are going&nbsp;&nbsp;

00:45:43.040 --> 00:45:50.160 position:63% line:0%
to save our content, it is because the response&nbsp;
contains a lot of things like the status code, the&nbsp;&nbsp;

00:45:50.160 --> 00:45:55.920 position:63% line:0%
result of the request. So in this entire response&nbsp;
body, the only thing that we are interested&nbsp;&nbsp;

00:45:55.920 --> 00:46:02.960 position:63% line:0%
is our dot content, which is the actual content&nbsp;
of the website URL that we extracted. And once&nbsp;&nbsp;

00:46:02.960 --> 00:46:10.320 position:63% line:0%
we are going to use beautifulsoup. To assign it&nbsp;
to the soup object, the next step is to identify&nbsp;&nbsp;

00:46:10.320 --> 00:46:16.960 position:63% line:0%
the exact location where we have got the mp4.&nbsp;
To understand that let us actually see the&nbsp;&nbsp;

00:46:16.960 --> 00:46:25.280 position:63% line:0%
source code of the doc page. When you open an&nbsp;
Tiktok, just like this, when you press Ctrl u,&nbsp;&nbsp;

00:46:25.280 --> 00:46:32.960 position:63% line:0%
you will get the actual source of the project.&nbsp;
The page in this page, we have to see where&nbsp;&nbsp;

00:46:32.960 --> 00:46:41.600 position:63% line:0%
mp4 is present. So we'll say Control F mp4. As you&nbsp;
can see, this is the place where you have mp4 and&nbsp;&nbsp;

00:46:41.600 --> 00:46:46.480 position:63% line:0%
we are interested to extract this particular&nbsp;
URL. But before that, we have to see where&nbsp;&nbsp;

00:46:46.480 --> 00:46:53.600 position:63% line:0%
the exact location, this mp4 is present in this&nbsp;
entire page. So we'll just scroll to the first.&nbsp;&nbsp;

00:46:54.800 --> 00:47:00.720 position:63% line:0%
And we'll see that this entire content is present&nbsp;
inside a script that starts with top page in it.&nbsp;&nbsp;

00:47:00.720 --> 00:47:06.800 position:63% line:0%
And that's exactly what we are going to use&nbsp;
our beautifulsoup code to find within this&nbsp;&nbsp;

00:47:06.800 --> 00:47:13.200 position:63% line:0%
entire page. So entire content is present in soup.&nbsp;
And then we are going to say inside soup find&nbsp;&nbsp;

00:47:13.200 --> 00:47:18.480 position:63% line:0%
everywhere where you have script. And inside that&nbsp;
script using rejects regular expression we are&nbsp;&nbsp;

00:47:18.480 --> 00:47:24.400 position:63% line:0%
going to find for this particular word, and then&nbsp;
we are going to store the result inside result.&nbsp;&nbsp;

00:47:24.400 --> 00:47:31.040 position:63% line:0%
And as you can see from this entire script, this&nbsp;
script contains a lot of text. And the only part&nbsp;&nbsp;

00:47:31.040 --> 00:47:36.960 position:63% line:0%
that we are interested in is a proper mp4 file.&nbsp;
So we are building a regular expression pattern to&nbsp;&nbsp;

00:47:36.960 --> 00:47:44.160 position:63% line:0%
say that it should start with the URL should start&nbsp;
with HTTPS, and then it will contain also mp4. And&nbsp;&nbsp;

00:47:44.160 --> 00:47:50.880 position:63% line:0%
then we are going to assign the result in result&nbsp;
underscore mp4. At this point, you might have got&nbsp;&nbsp;

00:47:50.880 --> 00:47:56.400 position:63% line:0%
a lot of results. So what we are going to do is&nbsp;
we are going to split everything based on one&nbsp;&nbsp;

00:47:56.400 --> 00:48:03.360 position:63% line:0%
separator and then we are going to take the first&nbsp;
output after the split as the proper mp4 URL,&nbsp;&nbsp;

00:48:03.360 --> 00:48:09.520 position:63% line:0%
because as you can see, with the mp4, you&nbsp;
actually see medium quality, light quality,&nbsp;&nbsp;

00:48:09.520 --> 00:48:15.120 position:63% line:0%
high quality, so not bothering about the quality&nbsp;
of the videos, we are going to just take the first&nbsp;&nbsp;

00:48:15.920 --> 00:48:21.840 position:63% line:0%
URL after the split. And then finally we are going&nbsp;
to print a message that we are going to download&nbsp;&nbsp;

00:48:21.840 --> 00:48:27.920 position:63% line:0%
video from the URL. And then we have to have a&nbsp;
file name. So to get the file name dynamically,&nbsp;&nbsp;

00:48:27.920 --> 00:48:34.480 position:63% line:0%
we are going to use the URL title or the file&nbsp;
name which is also present in here. And then&nbsp;&nbsp;

00:48:34.480 --> 00:48:40.960 position:63% line:0%
the final step, we are again going to use GET&nbsp;
request to extract the content of the URL,&nbsp;&nbsp;

00:48:41.520 --> 00:48:49.280 position:63% line:0%
which is currently the mp4 file. And then we&nbsp;
are going to use that content to write using&nbsp;&nbsp;

00:48:49.280 --> 00:48:54.240 position:63% line:0%
F dot write and then we are going to save in&nbsp;
the output file. So as you might have seen,&nbsp;&nbsp;

00:48:54.240 --> 00:49:00.000 position:63% line:0%
this is the mp4 file which should end with dot&nbsp;
mp4, which we extracted from here this part&nbsp;&nbsp;

00:49:00.720 --> 00:49:06.000 position:63% line:0%
and then we are going to use F dot write&nbsp;
to write the content of the mp4 file in&nbsp;&nbsp;

00:49:06.000 --> 00:49:10.560 position:63% line:0%
the output file that we wanted, which is an mp4&nbsp;
file and then we are going to print a message&nbsp;&nbsp;

00:49:10.560 --> 00:49:16.320 position:63% line:0%
that the download process is finished. So in this&nbsp;
video, we learned how to build the entire code,&nbsp;&nbsp;

00:49:16.320 --> 00:49:23.840 position:63% line:0%
a generic first version of the code that will&nbsp;
help us in downloading the mp4 video of a TED&nbsp;&nbsp;

00:49:23.840 --> 00:49:33.360 position:63% line:0%
x Ted video from ted.com using requests and Bs&nbsp;
for Thank you for listening. In the next video,&nbsp;&nbsp;

00:49:33.360 --> 00:49:37.840 position:63% line:0%
we'll see how to generalize this code&nbsp;
so that it can be packaged as a CI tool&nbsp;&nbsp;

00:49:38.400 --> 00:49:45.200 position:63% line:0%
that anyone can pass a URL instead of hard coding&nbsp;
it and then download the video. In this video,&nbsp;&nbsp;

00:49:45.200 --> 00:49:52.400 position:63% line:0%
we'll see how to generalize the code that we&nbsp;
built using the last video for a better CLA&nbsp;&nbsp;

00:49:52.400 --> 00:49:59.440 position:63% line:0%
tool. So what do we mean by UCLA to a CLA tool is&nbsp;
nothing but you can have a package the code that&nbsp;&nbsp;

00:49:59.440 --> 00:50:07.600 position:63% line:0%
we develop Have as one line in your terminal,&nbsp;
and then you can get the output of that without&nbsp;&nbsp;

00:50:07.600 --> 00:50:12.160 position:63% line:0%
having the need of entering, you know, your PI&nbsp;
charm or without having the need of editing the&nbsp;&nbsp;

00:50:12.160 --> 00:50:17.920 position:63% line:0%
code. So as you might have seen in the last video,&nbsp;
we actually hard coded the URL, we gave the URL as&nbsp;&nbsp;

00:50:17.920 --> 00:50:22.480 position:63% line:0%
part of the code. But that is not going to help&nbsp;
us in long term because not every time you want&nbsp;&nbsp;

00:50:22.480 --> 00:50:28.000 position:63% line:0%
to open a text editor, enter the URL, and then&nbsp;
recompile the entire or execute the entire Python&nbsp;&nbsp;

00:50:28.000 --> 00:50:33.360 position:63% line:0%
code. So for that purpose, what we are going to&nbsp;
do is we are going to generalize this code. And as&nbsp;&nbsp;

00:50:33.360 --> 00:50:38.720 position:63% line:0%
we saw in the last video, that is exactly why we&nbsp;
are going to use this particular module of Python,&nbsp;&nbsp;

00:50:38.720 --> 00:50:45.840 position:63% line:0%
which is just so first, we need to check whether&nbsp;
someone is giving a particular URL as part of the&nbsp;&nbsp;

00:50:46.720 --> 00:50:52.400 position:63% line:0%
execution command. So for that, we are going to&nbsp;
include this exception handling module in the&nbsp;&nbsp;

00:50:52.400 --> 00:50:57.120 position:63% line:0%
quote, exception is nothing but unexpected error.&nbsp;
So that's why we are calling it Exception Handling&nbsp;&nbsp;

00:50:57.120 --> 00:51:03.440 position:63% line:0%
how to handle the exception. So in this section,&nbsp;
what we are doing is we are checking sis dot arg v&nbsp;&nbsp;

00:51:03.440 --> 00:51:09.840 position:63% line:0%
arg stands for argument that is passed with the&nbsp;
code execution. So we are seeing if the length&nbsp;&nbsp;

00:51:09.840 --> 00:51:16.960 position:63% line:0%
of sis.rb is more than one then we take the first&nbsp;
argument that is passed with the code execution&nbsp;&nbsp;

00:51:16.960 --> 00:51:23.600 position:63% line:0%
is we are going to pass this message sis dot&nbsp;
exists. Exit message that says error, please enter&nbsp;&nbsp;

00:51:23.600 --> 00:51:30.080 position:63% line:0%
the TED talk you are to demonstrate the output of&nbsp;
this let us go to terminal, let us take the code&nbsp;&nbsp;

00:51:30.080 --> 00:51:36.320 position:63% line:0%
that we saved using the previous section. And&nbsp;
then we'll use Python three, and then type this&nbsp;&nbsp;

00:51:36.320 --> 00:51:39.840 position:63% line:0%
and see what is the error that you are getting&nbsp;
the error that you are getting this error, please&nbsp;&nbsp;

00:51:39.840 --> 00:51:46.080 position:63% line:0%
enter the TED Talk URL. So that is exactly what is&nbsp;
happening here. So we have written this exception&nbsp;&nbsp;

00:51:46.080 --> 00:51:53.600 position:63% line:0%
handling module that will tell us error, please&nbsp;
enter the TED Talk URL, which will show up when&nbsp;&nbsp;

00:51:53.600 --> 00:51:59.440 position:63% line:0%
someone is just executing the name executing&nbsp;
the file name without passing any argument,&nbsp;&nbsp;

00:51:59.440 --> 00:52:04.800 position:63% line:0%
which is what we are checking here. So to check&nbsp;
how the code executes properly, let us actually&nbsp;&nbsp;

00:52:04.800 --> 00:52:12.320 position:63% line:0%
take a proper URL of a talk and then we'll&nbsp;
see how to download this entire video as this&nbsp;&nbsp;

00:52:12.320 --> 00:52:19.360 position:63% line:0%
is becoming a CLA tool. Now let us save this code.&nbsp;
Let us copy this video URL that we just used hard&nbsp;&nbsp;

00:52:19.360 --> 00:52:25.360 position:63% line:0%
coded in the previous video. So now we'll go&nbsp;
to terminal we'll do the same Python three&nbsp;&nbsp;

00:52:27.120 --> 00:52:34.160 position:63% line:0%
a talk downloader, and then we'll paste the video&nbsp;
URL, the actual data URL, and let us Press Enter.&nbsp;&nbsp;

00:52:34.160 --> 00:52:39.360 position:63% line:0%
And as you can see, these are the messages that&nbsp;
we have given in the previous section download&nbsp;&nbsp;

00:52:39.360 --> 00:52:44.400 position:63% line:0%
about the start and end download has started,&nbsp;
we extracted the URL name and then storing in&nbsp;&nbsp;

00:52:44.400 --> 00:52:49.280 position:63% line:0%
this particular name, and then it says download&nbsp;
process finished. At the start of this video,&nbsp;&nbsp;

00:52:49.280 --> 00:52:54.480 position:63% line:0%
you might have seen that we had only four files&nbsp;
in this particular video or in this particular&nbsp;&nbsp;

00:52:54.480 --> 00:53:01.840 position:63% line:0%
folder. But now, as we do LS you can actually&nbsp;
see we have one extra file which is an mp4 file,&nbsp;&nbsp;

00:53:01.840 --> 00:53:06.800 position:63% line:0%
which is what we have downloaded. Let us go&nbsp;
into our finder and see we had all these four&nbsp;&nbsp;

00:53:06.800 --> 00:53:12.800 position:63% line:0%
files. And now as part of this thing, we have&nbsp;
this file also which is actually a tic toc.&nbsp;&nbsp;

00:53:13.360 --> 00:53:19.840 position:63% line:0%
So what we have seen is, we actually built a&nbsp;
first draft code first version of the code that&nbsp;&nbsp;

00:53:19.840 --> 00:53:25.920 position:63% line:0%
did not have argument parsing where we hard&nbsp;
coded the URL. In this video, we learned how to&nbsp;&nbsp;

00:53:25.920 --> 00:53:33.120 position:63% line:0%
generalize this video generalize this code, which&nbsp;
will include URL as part of an argument and that&nbsp;&nbsp;

00:53:33.120 --> 00:53:39.360 position:63% line:0%
URL will be used to download the video and we also&nbsp;
saw how to handle the exception when someone is&nbsp;&nbsp;

00:53:39.360 --> 00:53:45.120 position:63% line:0%
not giving the URL as part of the execution&nbsp;
in the terminal. Thank you for listening.&nbsp;&nbsp;

00:53:47.520 --> 00:53:53.840 position:63% line:0%
In this section, we'll learn how to build a&nbsp;
table extracted from the PDF file format. pdf&nbsp;&nbsp;

00:53:53.840 --> 00:53:59.760 position:63% line:0%
is one of the most prevalent file formats that&nbsp;
we deal with in our daily life. Anyone who works&nbsp;&nbsp;

00:53:59.760 --> 00:54:06.960 position:63% line:0%
in data science would know that extracting table&nbsp;
from PDFs is one of the most boring manual tasks&nbsp;&nbsp;

00:54:06.960 --> 00:54:12.960 position:63% line:0%
than one have to deal with. In this section.&nbsp;
We'll start with basics of PDF file format,&nbsp;&nbsp;

00:54:12.960 --> 00:54:18.080 position:63% line:0%
then we'll learn how to install the required&nbsp;
Python modules for extracting the PDF.&nbsp;&nbsp;

00:54:18.080 --> 00:54:24.240 position:63% line:0%
Then we'll actually do the coding part to&nbsp;
extract table from PDF. Then finally, we'll learn&nbsp;&nbsp;

00:54:24.240 --> 00:54:29.920 position:63% line:0%
a bit about panda's data frame and then using&nbsp;
panda's data frame to write the table that we just&nbsp;&nbsp;

00:54:29.920 --> 00:54:37.840 position:63% line:0%
extracted into a CSV file. Thank you. In the next&nbsp;
video, we'll start with basics of PDF file format.&nbsp;&nbsp;

00:54:39.360 --> 00:54:46.720 position:63% line:0%
In this video, we'll learn the basics of PDF file&nbsp;
format. pdf stands for portable document format,&nbsp;&nbsp;

00:54:46.720 --> 00:54:53.200 position:63% line:0%
which is a file format developed by Adobe in&nbsp;
the 1990s. This file format was developed to&nbsp;&nbsp;

00:54:53.200 --> 00:54:59.680 position:63% line:0%
present documents that include text, graphics and&nbsp;
images, independent of the software and hardware&nbsp;&nbsp;

00:54:59.680 --> 00:55:06.560 position:63% line:0%
and operating systems as seen, let us say whether&nbsp;
it is Apple Mac or Microsoft Windows, a document&nbsp;&nbsp;

00:55:06.560 --> 00:55:12.960 position:63% line:0%
should look the same in both the operating systems&nbsp;
and both the hardware, hence, PDF was developed.&nbsp;&nbsp;

00:55:13.760 --> 00:55:22.480 position:63% line:0%
The first version 1.0 of PDF was introduced in&nbsp;
1993. pdf is based on the PostScript language,&nbsp;&nbsp;

00:55:23.200 --> 00:55:30.480 position:63% line:0%
each PDF file encapsulates a complete description&nbsp;
of a fixed layout flat document. The way&nbsp;&nbsp;

00:55:30.480 --> 00:55:36.320 position:63% line:0%
that text and graphics are embedded on the PDF&nbsp;
are based on the layout not with any structured&nbsp;&nbsp;

00:55:36.320 --> 00:55:44.640 position:63% line:0%
format. The general structure of a PDF file is&nbsp;
composed of four main components header body cross&nbsp;&nbsp;

00:55:44.640 --> 00:55:51.760 position:63% line:0%
reference table trailer, the header contains just&nbsp;
one line that identifies the version of the PDF,&nbsp;&nbsp;

00:55:51.760 --> 00:55:59.920 position:63% line:0%
for example, percentage PDF 1.5. This indicates&nbsp;
that this PDF belongs to the version 1.5.&nbsp;&nbsp;

00:56:00.560 --> 00:56:05.920 position:63% line:0%
The trailer contains pointers to the cross&nbsp;
reference table and two key objects contained&nbsp;&nbsp;

00:56:05.920 --> 00:56:13.680 position:63% line:0%
in the trailer dictionary. It ends with percentage&nbsp;
percentage Evo F. To identify end of file, e o f&nbsp;&nbsp;

00:56:14.560 --> 00:56:21.440 position:63% line:0%
stands for end of file. The cross reference table&nbsp;
contains pointers to all the objects included&nbsp;&nbsp;

00:56:21.440 --> 00:56:27.360 position:63% line:0%
in the PDF. It identifies how many objects&nbsp;
are in the table, where the objects begin,&nbsp;&nbsp;

00:56:27.360 --> 00:56:35.120 position:63% line:0%
and its length in bytes. The body contains all&nbsp;
the object information, for example, object&nbsp;&nbsp;

00:56:35.120 --> 00:56:44.240 position:63% line:0%
informations like fonts, images, words, bookmarks,&nbsp;
form fields, and so on. So these objects&nbsp;&nbsp;

00:56:44.240 --> 00:56:51.200 position:63% line:0%
are mapped using the cross reference table and&nbsp;
thus this forms the structure of the PDF. So far&nbsp;&nbsp;

00:56:51.200 --> 00:56:57.280 position:63% line:0%
in this video, we learned the basics of a PDF file&nbsp;
format and the general structure of a PDF file.&nbsp;&nbsp;

00:56:57.280 --> 00:57:02.800 position:63% line:0%
In the next video, we'll learn how to install&nbsp;
the required Python packages for this project.&nbsp;&nbsp;

00:57:04.400 --> 00:57:10.240 position:63% line:0%
In this video, we'll learn how to install the&nbsp;
required Python packages for this project. So&nbsp;&nbsp;

00:57:10.240 --> 00:57:16.080 position:63% line:0%
we need three Python packages for this particular&nbsp;
project. The first one is Jupiter, the second one&nbsp;&nbsp;

00:57:16.080 --> 00:57:21.040 position:63% line:0%
is Camelot. And then the third one is shebang,&nbsp;
which we are going to use for data visualization.&nbsp;&nbsp;

00:57:21.040 --> 00:57:26.560 position:63% line:0%
So to install Jupiter notebook, we have to&nbsp;
open our terminal and then use the Jupyter&nbsp;&nbsp;

00:57:26.560 --> 00:57:31.280 position:63% line:0%
Notebook installation command. Before that,&nbsp;
let us see a bit about Jupyter Notebook.&nbsp;&nbsp;

00:57:31.280 --> 00:57:36.720 position:63% line:0%
Jupyter Notebook is an open source web application&nbsp;
that allows you to create and share documents&nbsp;&nbsp;

00:57:36.720 --> 00:57:42.560 position:63% line:0%
that contain live code visualization and narrative&nbsp;
text. So Jupyter Notebook is one of the most&nbsp;&nbsp;

00:57:42.560 --> 00:57:49.280 position:63% line:0%
preferred IDs are notebooks used in data science&nbsp;
community. And the reason is Jupyter Notebook lets&nbsp;&nbsp;

00:57:49.280 --> 00:57:54.640 position:63% line:0%
you write code and also the narrative text in&nbsp;
the form of markdown in the same file format.&nbsp;&nbsp;

00:57:55.360 --> 00:58:02.560 position:63% line:0%
Also Jupyter Notebook lead says upload Jupyter&nbsp;
Notebooks rendered file which is a markdown on&nbsp;&nbsp;

00:58:02.560 --> 00:58:08.800 position:63% line:0%
web. So if you are going to maintain a web blog,&nbsp;
which is markdown based, so you can export Jupyter&nbsp;&nbsp;

00:58:08.800 --> 00:58:13.920 position:63% line:0%
Notebooks markdown file and then upload it on web.&nbsp;
Alternatively, if you want a Python file, not a&nbsp;&nbsp;

00:58:13.920 --> 00:58:19.120 position:63% line:0%
Jupyter Notebook, just a Python file to share&nbsp;
it with your peers or automation. Then Jupyter&nbsp;&nbsp;

00:58:19.120 --> 00:58:25.360 position:63% line:0%
Notebook also lets you download the file that you&nbsp;
have written the notebook file into.pi format,&nbsp;&nbsp;

00:58:25.360 --> 00:58:30.720 position:63% line:0%
so let us go ahead and then install Jupiter&nbsp;
notebook. Open your shell or terminal&nbsp;&nbsp;

00:58:32.560 --> 00:58:36.160 position:63% line:0%
where you would be doing this&nbsp;
installation if you're using Mac,&nbsp;&nbsp;

00:58:36.160 --> 00:58:41.120 position:63% line:0%
open your terminal and if you are using Windows,&nbsp;
open your command prompt. So once you open your&nbsp;&nbsp;

00:58:41.120 --> 00:58:45.920 position:63% line:0%
command prompt, as we have seen in the previous&nbsp;
videos, if you have Python three then you have to&nbsp;&nbsp;

00:58:45.920 --> 00:58:51.120 position:63% line:0%
type PIP three for installation of any Python&nbsp;
package and then type install and Jupiter.&nbsp;&nbsp;

00:58:52.000 --> 00:58:57.200 position:63% line:0%
Once you type enter, This command will install&nbsp;
Jupyter Notebook on our machine. So it seems&nbsp;&nbsp;

00:58:57.200 --> 00:59:01.840 position:63% line:0%
that Jupyter Notebook has been installed. So let&nbsp;
us validate whether Jupyter Notebook has been&nbsp;&nbsp;

00:59:01.840 --> 00:59:08.080 position:63% line:0%
successfully installed. So let us type Jupyter&nbsp;
Notebook Enter to invoke the Jupyter Notebook.&nbsp;&nbsp;

00:59:08.080 --> 00:59:12.880 position:63% line:0%
As you can see, Jupyter Notebook has been&nbsp;
successfully installed. Now for us to shut&nbsp;&nbsp;

00:59:12.880 --> 00:59:21.200 position:63% line:0%
down this notebook. Let us go to the terminal and&nbsp;
then type Ctrl C. So type Ctrl C in your keyboard&nbsp;&nbsp;

00:59:21.200 --> 00:59:26.160 position:63% line:0%
to shut down this Jupyter Notebook and it asks&nbsp;
you whether you want to shut down press why that&nbsp;&nbsp;

00:59:26.160 --> 00:59:31.440 position:63% line:0%
the Jupyter Notebook has been successfully shut&nbsp;
down so you can see the shutdown configuration.&nbsp;&nbsp;

00:59:31.440 --> 00:59:38.720 position:63% line:0%
So the next package that we would like to install&nbsp;
is Camelot. Camelot is the Python package that we&nbsp;&nbsp;

00:59:38.720 --> 00:59:45.440 position:63% line:0%
will be using to extract tables from PDF. Camelot&nbsp;
is an open source package that is available on&nbsp;&nbsp;

00:59:45.440 --> 00:59:50.960 position:63% line:0%
pi pi. So the same way that we install Jupiter&nbsp;
notebook we can use PIP to install Camelot,&nbsp;&nbsp;

00:59:51.520 --> 00:59:58.560 position:63% line:0%
Camelot is the package that we have preferred&nbsp;
in this project to extract table from PDFs.&nbsp;&nbsp;

00:59:58.560 --> 01:00:05.840 position:63% line:0%
So let us go ahead and Then install Camelot&nbsp;
package. So now once again type PIP three install&nbsp;&nbsp;

01:00:06.400 --> 01:00:11.760 position:63% line:0%
Camelot but the thing with the Camelot packages&nbsp;
instead of just typing Camelot you need to install&nbsp;&nbsp;

01:00:11.760 --> 01:00:17.440 position:63% line:0%
Camelot pi The reason is there is already a Python&nbsp;
package in the name of Camelot which is not this&nbsp;&nbsp;

01:00:17.440 --> 01:00:23.840 position:63% line:0%
package. So, these package developers decided to&nbsp;
put it in the name Camelot hyphen p y. So, the&nbsp;&nbsp;

01:00:23.840 --> 01:00:30.000 position:63% line:0%
package that we should be installing is Camelot&nbsp;
dash p y even though the package name is Camelot,&nbsp;&nbsp;

01:00:30.000 --> 01:00:35.440 position:63% line:0%
we have installed it like this. So, let us type&nbsp;
into that the package gets installed on our local&nbsp;&nbsp;

01:00:35.440 --> 01:00:40.480 position:63% line:0%
machine. So, we see that the package has been&nbsp;
installed. So, let us verify whether Camelot has&nbsp;&nbsp;

01:00:40.480 --> 01:00:47.120 position:63% line:0%
been installed successfully. So, let us open our&nbsp;
Python Client repple. Once we have Python Client,&nbsp;&nbsp;

01:00:47.120 --> 01:00:53.840 position:63% line:0%
let us try to import Camelot. So, Camelot has&nbsp;
been successfully imported without any error,&nbsp;&nbsp;

01:00:53.840 --> 01:00:58.800 position:63% line:0%
which means Camelot has been successfully&nbsp;
installed. So, let us exit the Python console.&nbsp;&nbsp;

01:00:59.680 --> 01:01:05.280 position:63% line:0%
And then the next package that we are interested&nbsp;
in is C one c one is the package that we are going&nbsp;&nbsp;

01:01:05.280 --> 01:01:11.040 position:63% line:0%
to use for data visualization. So, as part of this&nbsp;
project, once we extract the table from the PDF,&nbsp;&nbsp;

01:01:11.040 --> 01:01:15.920 position:63% line:0%
we are going to visualize it so that the data&nbsp;
science workflow is completed. So seaborne is&nbsp;&nbsp;

01:01:15.920 --> 01:01:22.320 position:63% line:0%
the package that we will be installing. So, let&nbsp;
us install c one, let us go ahead and open our&nbsp;&nbsp;

01:01:22.320 --> 01:01:29.520 position:63% line:0%
terminal. Let's clear the screen and then type&nbsp;
PIP three, install c mon. Once you type enter,&nbsp;&nbsp;

01:01:29.520 --> 01:01:34.800 position:63% line:0%
c one is going to get installed. So C one&nbsp;
ultimately requires matplotlib as a dependency.&nbsp;&nbsp;

01:01:34.800 --> 01:01:39.840 position:63% line:0%
So if you have got matplotlib already on your&nbsp;
machine, so C one wouldn't install it again.&nbsp;&nbsp;

01:01:39.840 --> 01:01:45.120 position:63% line:0%
But if you have not got it, no problem not plot&nbsp;
lib would also get installed on your machine.&nbsp;&nbsp;

01:01:45.120 --> 01:01:50.800 position:63% line:0%
So let us clear the terminal and then verify&nbsp;
whether seaborne has been successfully installed.&nbsp;&nbsp;

01:01:50.800 --> 01:01:58.400 position:63% line:0%
So open Python three, input c one. As you can see&nbsp;
c one has been successfully imported, which means&nbsp;&nbsp;

01:01:58.400 --> 01:02:04.720 position:63% line:0%
c one installation is successful. So in this&nbsp;
video, we have seen that we installed the required&nbsp;&nbsp;

01:02:04.720 --> 01:02:11.440 position:63% line:0%
Python packages, we install three packages,&nbsp;
which are Jupiter or Jupiter notebook, Camelot&nbsp;&nbsp;

01:02:11.440 --> 01:02:17.440 position:63% line:0%
for extracting table from PDF and then C one for&nbsp;
data visualization. So in the next video, we'll&nbsp;&nbsp;

01:02:17.440 --> 01:02:25.040 position:63% line:0%
start with the coding of how to extract table from&nbsp;
the PDF. Thank you for listening. In this video,&nbsp;&nbsp;

01:02:25.040 --> 01:02:30.960 position:63% line:0%
we'll learn how to extract table from a PDF&nbsp;
file. Before we start with the coding part,&nbsp;&nbsp;

01:02:30.960 --> 01:02:36.000 position:63% line:0%
let us try to understand what other Python&nbsp;
modules are available for the same purpose.&nbsp;&nbsp;

01:02:36.000 --> 01:02:42.400 position:63% line:0%
The first one is tabular. tabular is one of the&nbsp;
most widely used PDF extraction library. tabular&nbsp;&nbsp;

01:02:42.400 --> 01:02:46.960 position:63% line:0%
is actually based on a Java library in the same&nbsp;
name tabular. So, this one that we are talking&nbsp;&nbsp;

01:02:46.960 --> 01:02:53.840 position:63% line:0%
about is a Python binding for the Java library.&nbsp;
The next one is PDF lumber, then PDF tables&nbsp;&nbsp;

01:02:53.840 --> 01:02:59.600 position:63% line:0%
and PDF table extract. So, all these libraries&nbsp;
are available as an alternate for the library&nbsp;&nbsp;

01:02:59.600 --> 01:03:04.880 position:63% line:0%
that we have picked for this particular project.&nbsp;
So even though all these libraries are available,&nbsp;&nbsp;

01:03:04.880 --> 01:03:10.560 position:63% line:0%
we have selected Camelot to go ahead&nbsp;
with so the reason we selected Camelot is&nbsp;&nbsp;

01:03:10.560 --> 01:03:17.120 position:63% line:0%
because of the following reasons. The first&nbsp;
main reason is you are in control. So unlike&nbsp;&nbsp;

01:03:17.120 --> 01:03:22.320 position:63% line:0%
other libraries and tools, which gives you a nice&nbsp;
output or failed miserably, so there is no in&nbsp;&nbsp;

01:03:22.320 --> 01:03:28.240 position:63% line:0%
between. So either it gives you a nice output or&nbsp;
it fails miserably. Camelot gives you the power to&nbsp;&nbsp;

01:03:28.240 --> 01:03:33.840 position:63% line:0%
tweak the table extraction with hyper parameters,&nbsp;
which means if you do not get any output,&nbsp;&nbsp;

01:03:33.840 --> 01:03:39.680 position:63% line:0%
then you can tweak your hyper parameters to get at&nbsp;
least some output show that not everything in the&nbsp;&nbsp;

01:03:39.680 --> 01:03:45.120 position:63% line:0%
PDF table extraction becomes manual. The reason&nbsp;
is because since everything in the real world&nbsp;&nbsp;

01:03:45.680 --> 01:03:51.520 position:63% line:0%
is actually fuzzy, including PDF table extraction&nbsp;
is also fuzzy. You need to have control over&nbsp;&nbsp;

01:03:51.520 --> 01:03:57.760 position:63% line:0%
the hyper parameters to tweak how you want to&nbsp;
extract the table from the PDF. The second one is&nbsp;&nbsp;

01:03:57.760 --> 01:04:04.000 position:63% line:0%
bad tables can be discarded based on the metrics&nbsp;
like accuracy and whitespace. So Camelot gives&nbsp;&nbsp;

01:04:04.000 --> 01:04:08.960 position:63% line:0%
you these metrics accuracy and whitespace so&nbsp;
that you don't have to manually look at each&nbsp;&nbsp;

01:04:08.960 --> 01:04:15.280 position:63% line:0%
table to select the good table and discard the&nbsp;
bad table. The next reason is, the table output&nbsp;&nbsp;

01:04:15.280 --> 01:04:20.560 position:63% line:0%
that you get out of Camelot is a panda's data&nbsp;
frame. panda's data frame is one of the most&nbsp;&nbsp;

01:04:20.560 --> 01:04:26.160 position:63% line:0%
widely used Python module for data analysis&nbsp;
and data science, which means the output of&nbsp;&nbsp;

01:04:26.160 --> 01:04:33.600 position:63% line:0%
the Camelot library could be seamlessly integrated&nbsp;
into any ETL workflow or a data analysis workflow,&nbsp;&nbsp;

01:04:33.600 --> 01:04:40.480 position:63% line:0%
which exhaustingly uses Camelot or Python. The&nbsp;
last reason is because Camelot lets you export the&nbsp;&nbsp;

01:04:40.480 --> 01:04:48.160 position:63% line:0%
extracted PDF table into multiple file formats,&nbsp;
including JSON, XML and HTML. Let us say that the&nbsp;&nbsp;

01:04:48.160 --> 01:04:52.880 position:63% line:0%
table that you extracted from the PDF file&nbsp;
format you wanted it to be published online,&nbsp;&nbsp;

01:04:52.880 --> 01:04:58.480 position:63% line:0%
which means you ultimately want HTML file&nbsp;
format. So instead of sitting and hard coding,&nbsp;&nbsp;

01:04:58.480 --> 01:05:05.360 position:63% line:0%
HTML file format A table HTML table Camelot lets&nbsp;
you export the PDF table that you just extracted&nbsp;&nbsp;

01:05:05.360 --> 01:05:13.600 position:63% line:0%
into a HTML file. So this way, Camelot helps you&nbsp;
with being in control, discarding bad tables.&nbsp;&nbsp;

01:05:13.600 --> 01:05:19.040 position:63% line:0%
And then using a panda's data frame, which is&nbsp;
easily seamlessly integrated with an existing&nbsp;&nbsp;

01:05:19.040 --> 01:05:24.480 position:63% line:0%
data analysis workflow. And then finally exporting&nbsp;
the file format into a different file format.&nbsp;&nbsp;

01:05:24.480 --> 01:05:30.320 position:63% line:0%
So this is the reason why we pick Camelot ahead of&nbsp;
the other packages that we just mentioned. So let&nbsp;&nbsp;

01:05:30.320 --> 01:05:38.000 position:63% line:0%
us move ahead and then learn how Camelot is going&nbsp;
to help us in extracting tables from PDF. The PDF&nbsp;&nbsp;

01:05:38.000 --> 01:05:44.720 position:63% line:0%
from which we would like to extract data is this&nbsp;
PDF. This has been downloaded from un website,&nbsp;&nbsp;

01:05:44.720 --> 01:05:50.800 position:63% line:0%
which is economic and Human Development indicators&nbsp;
for India. So this is a fact sheet with multiple&nbsp;&nbsp;

01:05:50.800 --> 01:05:55.760 position:63% line:0%
tables. As you can see, you have one table here,&nbsp;
you have another table here, so multiple tables&nbsp;&nbsp;

01:05:55.760 --> 01:06:01.360 position:63% line:0%
with multiple columns. So for this particular&nbsp;
purpose, we are interested in extracting the&nbsp;&nbsp;

01:06:01.360 --> 01:06:09.520 position:63% line:0%
values row 2021 and 22 of this table, which is&nbsp;
literacy rate. So let us go ahead and see how we,&nbsp;&nbsp;

01:06:09.520 --> 01:06:14.480 position:63% line:0%
we are going to extract this particular table and&nbsp;
then do a little bit of data visualization with&nbsp;&nbsp;

01:06:14.480 --> 01:06:19.520 position:63% line:0%
this, before we move on to the actual coding,&nbsp;
because this is the first time we are going to&nbsp;&nbsp;

01:06:19.520 --> 01:06:26.080 position:63% line:0%
use Jupyter Notebook in our course. So let us see&nbsp;
a bit of overview about Jupyter Notebook. So open&nbsp;&nbsp;

01:06:26.080 --> 01:06:33.760 position:63% line:0%
your terminal, which is Windows command prompt&nbsp;
or Mac terminal, and type Jupiter notebook. Once&nbsp;&nbsp;

01:06:33.760 --> 01:06:38.480 position:63% line:0%
you take Jupyter Notebook, it would internally&nbsp;
evoke a server and then your Jupyter Notebook,&nbsp;&nbsp;

01:06:39.120 --> 01:06:43.760 position:63% line:0%
which this interface would open. And then&nbsp;
for you to create a new Jupyter Notebook,&nbsp;&nbsp;

01:06:44.320 --> 01:06:50.480 position:63% line:0%
click here new and then type Python three, click&nbsp;
this Python three. So once you enter here, this is&nbsp;&nbsp;

01:06:50.480 --> 01:06:54.400 position:63% line:0%
how the structure of a Jupyter Notebook would&nbsp;
look like. So this is the title which you can&nbsp;&nbsp;

01:06:54.400 --> 01:07:01.040 position:63% line:0%
add to say, Okay, my first Jupyter Notebook. So&nbsp;
once we have renamed it, this is how the Jupyter&nbsp;&nbsp;

01:07:01.040 --> 01:07:06.480 position:63% line:0%
Notebook would look like. So this in the Jupyter&nbsp;
Notebook would be called as a cell. This cell can&nbsp;&nbsp;

01:07:06.480 --> 01:07:11.920 position:63% line:0%
have primarily two values. So it can have a code&nbsp;
value where you can write your Python code. Or it&nbsp;&nbsp;

01:07:11.920 --> 01:07:16.880 position:63% line:0%
can have a markdown where you write your narrative&nbsp;
text or documentation. So let's start with the&nbsp;&nbsp;

01:07:16.880 --> 01:07:24.880 position:63% line:0%
documentation and say, This is my first Jupyter&nbsp;
Notebook. And then let's say this is a heading.&nbsp;&nbsp;

01:07:24.880 --> 01:07:29.600 position:63% line:0%
So once you are done with this thing, this is how&nbsp;
it looks like. So now let us go ahead and write a&nbsp;&nbsp;

01:07:29.600 --> 01:07:36.000 position:63% line:0%
small Python code. As you all know, Python can be&nbsp;
also used as a calculator, which means you can do&nbsp;&nbsp;

01:07:36.000 --> 01:07:41.200 position:63% line:0%
basic arithmetic operation. So let us go ahead and&nbsp;
do a little bit of arithmetic operation which says&nbsp;&nbsp;

01:07:41.200 --> 01:07:47.600 position:63% line:0%
three into three. Once you are done with this&nbsp;
code, you can press Shift Enter, like this,&nbsp;&nbsp;

01:07:47.600 --> 01:07:52.320 position:63% line:0%
and then the output will be displayed. Or maybe&nbsp;
if you do not want to use the keyboard shortcut,&nbsp;&nbsp;

01:07:52.320 --> 01:07:58.400 position:63% line:0%
you can say okay, four minus three, which is&nbsp;
probably one and then we'll go ahead and click&nbsp;&nbsp;

01:07:58.400 --> 01:08:05.200 position:63% line:0%
Run button here, which will show us output one. So&nbsp;
this way, you know that you can have documentation&nbsp;&nbsp;

01:08:05.200 --> 01:08:10.400 position:63% line:0%
or narrative text and then code in the same&nbsp;
file. And then this is the advantage of Jupyter&nbsp;&nbsp;

01:08:10.400 --> 01:08:15.120 position:63% line:0%
Notebook. And one of the reasons why we prefer&nbsp;
Jupyter Notebook for this particular project.&nbsp;&nbsp;

01:08:15.120 --> 01:08:20.080 position:63% line:0%
Now, let us go ahead and start executing&nbsp;
the actual code that we would like to write&nbsp;&nbsp;

01:08:20.080 --> 01:08:26.720 position:63% line:0%
for extracting table from the UN report that we&nbsp;
just saw. So to start with, we should name the&nbsp;&nbsp;

01:08:26.720 --> 01:08:31.040 position:63% line:0%
Jupyter Notebook, which is a good practice.&nbsp;
So in this case, we can name it extracting&nbsp;&nbsp;

01:08:32.400 --> 01:08:36.960 position:63% line:0%
table from PDF. So whatever you would like to name&nbsp;
you can name it so I've named it extracting table&nbsp;&nbsp;

01:08:36.960 --> 01:08:43.040 position:63% line:0%
from PDF. The first Excel let us start with&nbsp;
importing the Camelot package. In this case,&nbsp;&nbsp;

01:08:43.040 --> 01:08:48.800 position:63% line:0%
I'm importing the Camelot package with an alias&nbsp;
which is cm which will help us easily call that&nbsp;&nbsp;

01:08:48.800 --> 01:08:54.320 position:63% line:0%
evoke that package. So let us go here and say&nbsp;
Shift Enter. On the Jupyter Notebook successfully&nbsp;&nbsp;

01:08:54.320 --> 01:08:58.960 position:63% line:0%
installed, you get this thing probably let's say&nbsp;
if you have made a mistake instead of Camelot,&nbsp;&nbsp;

01:08:58.960 --> 01:09:05.040 position:63% line:0%
we have said cam as cm. Now, you will get an error&nbsp;
that this module is not found, because there is&nbsp;&nbsp;

01:09:05.040 --> 01:09:11.600 position:63% line:0%
no such package cam in this particular Python&nbsp;
environment. So once we successfully invoke or&nbsp;&nbsp;

01:09:11.600 --> 01:09:17.600 position:63% line:0%
call that package, we will not get any error, but&nbsp;
the package has been imported. So next step is for&nbsp;&nbsp;

01:09:17.600 --> 01:09:23.520 position:63% line:0%
us to see what are all the files available in the&nbsp;
environment. So we see these are the files that we&nbsp;&nbsp;

01:09:23.520 --> 01:09:30.240 position:63% line:0%
have in that environment. So we have the PDF file&nbsp;
that is available in the current folder. We have&nbsp;&nbsp;

01:09:30.240 --> 01:09:38.240 position:63% line:0%
the CSV and XLS, which I just executed before the&nbsp;
project and I have it in place. And then we have&nbsp;&nbsp;

01:09:38.240 --> 01:09:44.320 position:63% line:0%
a bunch of other files. So now let us go ahead and&nbsp;
then import the file. There are two ways that you&nbsp;&nbsp;

01:09:44.320 --> 01:09:50.240 position:63% line:0%
can read PDF one, you can read it directly from&nbsp;
web like from where we have downloaded the PDF,&nbsp;&nbsp;

01:09:50.240 --> 01:09:56.480 position:63% line:0%
or you can read it from your local machine. So&nbsp;
the first argument is you read you give the Python&nbsp;&nbsp;

01:09:57.040 --> 01:10:03.920 position:63% line:0%
the PDF file name the second argument In this&nbsp;
flavor, which is there are two ways Camelot&nbsp;&nbsp;

01:10:03.920 --> 01:10:09.600 position:63% line:0%
can parse your PDF file one is called stream.&nbsp;
The other one is called a dice mod. These have&nbsp;&nbsp;

01:10:09.600 --> 01:10:15.840 position:63% line:0%
different variety of ways to how to parse a PDF&nbsp;
file. And in this particular case, we will prefer&nbsp;&nbsp;

01:10:16.720 --> 01:10:21.760 position:63% line:0%
lattes. And then we are explicitly telling&nbsp;
Camelot that we have two pages one is page one,&nbsp;&nbsp;

01:10:21.760 --> 01:10:27.040 position:63% line:0%
the second one is page two. So we are going&nbsp;
to use the function named read underscore PDF&nbsp;&nbsp;

01:10:27.040 --> 01:10:33.280 position:63% line:0%
from Camelot and then we are going to read the&nbsp;
PDF file. So let us execute this shift enter. Once&nbsp;&nbsp;

01:10:33.280 --> 01:10:39.120 position:63% line:0%
we execute this thing, we are writing it in the&nbsp;
Python object input underscore PDF. So we can see&nbsp;&nbsp;

01:10:39.120 --> 01:10:45.280 position:63% line:0%
that this has been successfully executed without&nbsp;
any error. So now, let us see what is inside that&nbsp;&nbsp;

01:10:45.280 --> 01:10:50.960 position:63% line:0%
input underscore PDF. So this gives you a&nbsp;
table list object with four values inside it,&nbsp;&nbsp;

01:10:50.960 --> 01:10:56.720 position:63% line:0%
which means there are four tables that has been&nbsp;
extracted from this function from this video.&nbsp;&nbsp;

01:10:56.720 --> 01:11:02.800 position:63% line:0%
And this has been put inside this into input&nbsp;
underscore PDF as a table file. So for us&nbsp;&nbsp;

01:11:02.800 --> 01:11:07.760 position:63% line:0%
to know what are the individual properties&nbsp;
individual dimensions of this particular PDF&nbsp;&nbsp;

01:11:08.560 --> 01:11:15.920 position:63% line:0%
extraction process, we will see four n in input&nbsp;
underscore PDF, so we are iterating in through&nbsp;&nbsp;

01:11:15.920 --> 01:11:20.880 position:63% line:0%
input underscore PDF to see what is inside it.&nbsp;
So let us go ahead and execute this thing. So&nbsp;&nbsp;

01:11:20.880 --> 01:11:27.600 position:63% line:0%
this shows that we have four PDF table extracted&nbsp;
files, which is first one is the table is with&nbsp;&nbsp;

01:11:27.600 --> 01:11:32.720 position:63% line:0%
the dimension four by three, which means four&nbsp;
rows, three columns, second known as 15 by three,&nbsp;&nbsp;

01:11:32.720 --> 01:11:38.800 position:63% line:0%
the third one is 14 by four, and then the fourth&nbsp;
one is 13 by three, so our area of interest is&nbsp;&nbsp;

01:11:38.800 --> 01:11:44.720 position:63% line:0%
the last part of the first page, as you saw in the&nbsp;
previous PDF display. So we are going to say okay,&nbsp;&nbsp;

01:11:44.720 --> 01:11:50.880 position:63% line:0%
I want this third one. Since Python is a zero&nbsp;
indexed language, we will say two input underscore&nbsp;&nbsp;

01:11:50.880 --> 01:11:56.240 position:63% line:0%
PDF of two. And then we are saying Do you mean&nbsp;
it as a data frame. So once we write this thing,&nbsp;&nbsp;

01:11:56.240 --> 01:12:02.000 position:63% line:0%
this is what we get. As you can see, this is our&nbsp;
area of interest, which is the literacy rate,&nbsp;&nbsp;

01:12:02.000 --> 01:12:08.240 position:63% line:0%
and which is the index value 1112, and 13. So&nbsp;
what we are going to do now is we are going to say&nbsp;&nbsp;

01:12:08.240 --> 01:12:13.520 position:63% line:0%
okay, I want input underscore PDF of two,&nbsp;
and then from that I want the data frame.&nbsp;&nbsp;

01:12:13.520 --> 01:12:19.280 position:63% line:0%
And in that give me the location leaven to 14&nbsp;
and then give me three columns, which is 123.&nbsp;&nbsp;

01:12:20.800 --> 01:12:27.920 position:63% line:0%
So I want 123 11 1213. That is what we are&nbsp;
specifying here. Once we execute this thing,&nbsp;&nbsp;

01:12:27.920 --> 01:12:33.440 position:63% line:0%
we can see how the different looks like. So this&nbsp;
is how the extractor table looks like. So let us&nbsp;&nbsp;

01:12:33.440 --> 01:12:39.200 position:63% line:0%
do a little bit of table formatting. Before we&nbsp;
do table formatting. We have understood that&nbsp;&nbsp;

01:12:39.760 --> 01:12:45.520 position:63% line:0%
this data frame that Camelot gives us as&nbsp;
part of a panda's data frame. So let us&nbsp;&nbsp;

01:12:45.520 --> 01:12:51.360 position:63% line:0%
have a little bit of understanding of pandas.&nbsp;
pandas is the data manipulation package that&nbsp;&nbsp;

01:12:51.360 --> 01:12:58.160 position:63% line:0%
is widely used the most widely used for Python,&nbsp;
and pandas helps you read a CSV, write a CSV,&nbsp;&nbsp;

01:12:58.160 --> 01:13:03.840 position:63% line:0%
read an Excel write in Excel, do a little bit of&nbsp;
reformatting in case if you want to, you know,&nbsp;&nbsp;

01:13:03.840 --> 01:13:09.920 position:63% line:0%
do a little bit of data analysis, pandas will&nbsp;
help you do data preparation data pre processing.&nbsp;&nbsp;

01:13:09.920 --> 01:13:13.760 position:63% line:0%
So like that, what we are going to do is we&nbsp;
are going to use a panda's function which is&nbsp;&nbsp;

01:13:13.760 --> 01:13:20.080 position:63% line:0%
reset index to drop this index value 1112 and&nbsp;
three, and then come up with our own index value,&nbsp;&nbsp;

01:13:20.080 --> 01:13:28.320 position:63% line:0%
which is by default 0123. So let us go ahead and&nbsp;
say, okay, for this data frame, dot t does reset&nbsp;&nbsp;

01:13:28.320 --> 01:13:33.600 position:63% line:0%
underscore index drop is equal to true and then&nbsp;
we'll assign it to the data frame here. So let&nbsp;&nbsp;

01:13:33.600 --> 01:13:39.120 position:63% line:0%
us go ahead and execute this thing. And then let's&nbsp;
see how the output looks like. Now as you can see,&nbsp;&nbsp;

01:13:39.120 --> 01:13:45.440 position:63% line:0%
from 11 1213, it has become 012. Now as&nbsp;
you can see, there are three columns,&nbsp;&nbsp;

01:13:45.440 --> 01:13:50.480 position:63% line:0%
but the column names are 123, which is not&nbsp;
very intuitive if you want to write a table.&nbsp;&nbsp;

01:13:50.480 --> 01:13:55.840 position:63% line:0%
So what we'll do is we'll manually put the table&nbsp;
name. So from the table, you can you can see that&nbsp;&nbsp;

01:13:55.840 --> 01:14:01.360 position:63% line:0%
this is 2001 This is 2011. And these are the KPIs&nbsp;
that we are interested in. So what we'll do is&nbsp;&nbsp;

01:14:01.360 --> 01:14:08.160 position:63% line:0%
we'll say Okay, the first column is Kp, second&nbsp;
is 2,001/3 is 2011. Let us execute this thing.&nbsp;&nbsp;

01:14:08.160 --> 01:14:13.360 position:63% line:0%
And then let us see how the output looks like.&nbsp;
So from one to three, now it has become kPa&nbsp;&nbsp;

01:14:13.360 --> 01:14:19.360 position:63% line:0%
to those n one and two those 11 then the next&nbsp;
step is for us to do any kind of data analysis&nbsp;&nbsp;

01:14:19.360 --> 01:14:24.800 position:63% line:0%
with this thing, we need to convert this one which&nbsp;
is actually a string into a number format. And the&nbsp;&nbsp;

01:14:24.800 --> 01:14:29.520 position:63% line:0%
number format that we are going to use is float&nbsp;
because this is a decimal point. So from string,&nbsp;&nbsp;

01:14:29.520 --> 01:14:36.800 position:63% line:0%
we are going to save for 2001 and 2011. convert&nbsp;
everything to float. So once we do this thing,&nbsp;&nbsp;

01:14:37.920 --> 01:14:41.920 position:63% line:0%
we are reassigning it to the same old data&nbsp;
frame, and then the output even though it&nbsp;&nbsp;

01:14:41.920 --> 01:14:47.200 position:63% line:0%
looks same internally from string, it has become&nbsp;
a character. The next step is for us to write&nbsp;&nbsp;

01:14:48.240 --> 01:14:53.600 position:63% line:0%
the output as a CSV file. So because this&nbsp;
file name is already available, we'll say&nbsp;&nbsp;

01:14:54.320 --> 01:15:01.920 position:63% line:0%
Pac output dot CSV. So once we have written the&nbsp;
CSV, we can go ahead and See using ls command&nbsp;&nbsp;

01:15:01.920 --> 01:15:08.160 position:63% line:0%
to see how the current working directory looks&nbsp;
like. So as you can see, we have packed underscore&nbsp;&nbsp;

01:15:08.160 --> 01:15:14.960 position:63% line:0%
output dot CSV, which is what we just wrote using&nbsp;
pandas function, which is to underscore CSV.&nbsp;&nbsp;

01:15:14.960 --> 01:15:19.840 position:63% line:0%
Once we are done with this thing, I would like to&nbsp;
add another information that pandas is not just&nbsp;&nbsp;

01:15:19.840 --> 01:15:25.680 position:63% line:0%
letting you write it as a CSV, but it can help you&nbsp;
write it as an Excel file. So let us go ahead and&nbsp;&nbsp;

01:15:25.680 --> 01:15:31.120 position:63% line:0%
then use this function to underscore Excel on this&nbsp;
panda's data frame to write it as an excellent,&nbsp;&nbsp;

01:15:31.840 --> 01:15:41.040 position:63% line:0%
let's say, packed output Excel with the extension&nbsp;
dot x LS x. And then once we execute this thing,&nbsp;&nbsp;

01:15:41.040 --> 01:15:46.320 position:63% line:0%
let us see how the current directory looks like.&nbsp;
So in the previous setup, you had only packed&nbsp;&nbsp;

01:15:46.320 --> 01:15:53.120 position:63% line:0%
underscore output dot CSV. But now you can also&nbsp;
see that at underscore output underscore Excel&nbsp;&nbsp;

01:15:53.120 --> 01:16:01.920 position:63% line:0%
dot XLS x. So this is how the Excel file looks&nbsp;
like. So as we write it, so now what we can do is&nbsp;&nbsp;

01:16:01.920 --> 01:16:07.680 position:63% line:0%
we would like to import this in our current&nbsp;
working directory in this current Python session,&nbsp;&nbsp;

01:16:07.680 --> 01:16:13.760 position:63% line:0%
so that we can do some data analysis. So our&nbsp;
objective in this project is to read table&nbsp;&nbsp;

01:16:13.760 --> 01:16:17.520 position:63% line:0%
and then write that output table as a&nbsp;
CSV, which we have already achieved.&nbsp;&nbsp;

01:16:18.320 --> 01:16:24.640 position:63% line:0%
But as a bonus, I would like to also show you&nbsp;
why we would be requiring such a data frame in&nbsp;&nbsp;

01:16:24.640 --> 01:16:30.640 position:63% line:0%
the first place, because we want to do some data&nbsp;
analysis, some data visualization from the PDF&nbsp;&nbsp;

01:16:30.640 --> 01:16:37.440 position:63% line:0%
file, which we cannot do it directly. So we are&nbsp;
extracting the table from the PDF as a CSV as a&nbsp;&nbsp;

01:16:37.440 --> 01:16:42.480 position:63% line:0%
data frame, which is then we are converting it as&nbsp;
a CSV. And then we are doing some data analysis&nbsp;&nbsp;

01:16:42.480 --> 01:16:47.600 position:63% line:0%
with this. In this case, we'll build a bar graph&nbsp;
with this. So let us go ahead and call our panda's&nbsp;&nbsp;

01:16:47.600 --> 01:16:54.000 position:63% line:0%
data frame, which is required for us to read&nbsp;
the CSV. So as we call the panda's data frame,&nbsp;&nbsp;

01:16:54.000 --> 01:17:00.640 position:63% line:0%
we'll say PD dot read underscore CSV. And what&nbsp;
is the name of the file that we wrote. It is&nbsp;&nbsp;

01:17:00.640 --> 01:17:04.800 position:63% line:0%
packed underscore output dot CSV. So&nbsp;
we'll replace this name with this name.&nbsp;&nbsp;

01:17:05.440 --> 01:17:09.840 position:63% line:0%
And then we'll say read underscore CSV. And&nbsp;
then we are assigning it to a Python object&nbsp;&nbsp;

01:17:09.840 --> 01:17:15.040 position:63% line:0%
which is the DF two and then we'll display how&nbsp;
it looks like. So once we execute this thing.&nbsp;&nbsp;

01:17:15.040 --> 01:17:22.080 position:63% line:0%
We can see this is how it looks like with an index&nbsp;
value because we just read it, then we'll call a&nbsp;&nbsp;

01:17:22.080 --> 01:17:27.680 position:63% line:0%
data visualization library c one c one is one of&nbsp;
the most widely used data visualization library.&nbsp;&nbsp;

01:17:28.320 --> 01:17:33.200 position:63% line:0%
Seaborn is actually built on matplotlib for&nbsp;
better visualizations. So we'll go ahead and&nbsp;&nbsp;

01:17:33.200 --> 01:17:40.640 position:63% line:0%
call Seabourn with an area's SNS once we are done&nbsp;
with that, executed, Seabourn is now imported.&nbsp;&nbsp;

01:17:40.640 --> 01:17:46.720 position:63% line:0%
So, for us to build a data visualization, we&nbsp;
have to change the format the shape of how the&nbsp;&nbsp;

01:17:46.720 --> 01:17:51.840 position:63% line:0%
data frame looks like to a different shape. So,&nbsp;
we are going to use the pandas function melt,&nbsp;&nbsp;

01:17:51.840 --> 01:17:58.160 position:63% line:0%
which will convert this data frame from the wide&nbsp;
format to a long format. So, this is called to be&nbsp;&nbsp;

01:17:58.160 --> 01:18:03.920 position:63% line:0%
a wide format. Now, we are going to convert it to&nbsp;
a long format. Now, let us execute this thing once&nbsp;&nbsp;

01:18:03.920 --> 01:18:09.840 position:63% line:0%
we execute df underscore melt is available now,&nbsp;
let us see how df underscore meant is available.&nbsp;&nbsp;

01:18:09.840 --> 01:18:17.600 position:63% line:0%
So as you can see, this is a wide format. Now,&nbsp;
this is a long format frame where 2001 and 2011&nbsp;&nbsp;

01:18:17.600 --> 01:18:23.040 position:63% line:0%
from being the column name that has become the row&nbsp;
value and the value that we have given us here and&nbsp;&nbsp;

01:18:23.040 --> 01:18:29.200 position:63% line:0%
percentage. Now the DF underscore melted is&nbsp;
available, let us go ahead and then make a bar&nbsp;&nbsp;

01:18:29.200 --> 01:18:36.320 position:63% line:0%
plot. So we are going to use acns dot bar plot for&nbsp;
making a bar plot the x axis should contain the Kp&nbsp;&nbsp;

01:18:36.320 --> 01:18:42.160 position:63% line:0%
value, the y axis should contain the percentage&nbsp;
and the Q which is the grouping variable,&nbsp;&nbsp;

01:18:42.160 --> 01:18:49.760 position:63% line:0%
which is 2011 and 2001. For us to compare how&nbsp;
it has been different for 2011 and in 2001.&nbsp;&nbsp;

01:18:50.320 --> 01:18:55.200 position:63% line:0%
Let us execute this thing. As you&nbsp;
can see, now it has generated a plot&nbsp;&nbsp;

01:18:55.200 --> 01:19:02.240 position:63% line:0%
with two bars, the blue color represent to version&nbsp;
one, the orange color represents 2011. And then&nbsp;&nbsp;

01:19:02.240 --> 01:19:08.320 position:63% line:0%
with three KPIs that we just built, literacy&nbsp;
rate male literacy rate or female literacy rate.&nbsp;&nbsp;

01:19:08.320 --> 01:19:14.960 position:63% line:0%
So this is how the overall literacy rate and as&nbsp;
you can see the gap between 2001 and 2011 female&nbsp;&nbsp;

01:19:14.960 --> 01:19:21.120 position:63% line:0%
literacy rate is huge, which means there has&nbsp;
been a tremendous growth between 2001 and 2011&nbsp;&nbsp;

01:19:21.120 --> 01:19:27.600 position:63% line:0%
in the rate of female literacy rate. So this is&nbsp;
what we have understood from this project that&nbsp;&nbsp;

01:19:27.600 --> 01:19:34.880 position:63% line:0%
we had a raw PDF file which was unreadable&nbsp;
as it is not a structured information. What&nbsp;&nbsp;

01:19:34.880 --> 01:19:41.040 position:63% line:0%
we have done is we have used Camelot to read the&nbsp;
PDF, which is to be technical, we parse the PDF,&nbsp;&nbsp;

01:19:41.040 --> 01:19:47.280 position:63% line:0%
we extracted tables, specifically we extracted&nbsp;
four tables. We went to the table of our interest,&nbsp;&nbsp;

01:19:47.280 --> 01:19:53.840 position:63% line:0%
which is index 1112 and three, and then we did a&nbsp;
little bit of data pre processing using pandas.&nbsp;&nbsp;

01:19:53.840 --> 01:19:57.760 position:63% line:0%
Once we did the data pre processing,&nbsp;
we went ahead and then we wrote&nbsp;&nbsp;

01:19:58.560 --> 01:20:03.840 position:63% line:0%
the data frame. into a CSV file. And we also&nbsp;
experimented with writing it as an Excel file.&nbsp;&nbsp;

01:20:04.400 --> 01:20:11.280 position:63% line:0%
Once we were done with this Excel file, we finally&nbsp;
went and did a little bit of data pre processing,&nbsp;&nbsp;

01:20:11.280 --> 01:20:15.840 position:63% line:0%
which is reshaping the data from a wide&nbsp;
format to long format. And then finally,&nbsp;&nbsp;

01:20:15.840 --> 01:20:22.240 position:63% line:0%
we explored the data as a data visualization to&nbsp;
understand some valuable insight from the PDF that&nbsp;&nbsp;

01:20:22.240 --> 01:20:28.720 position:63% line:0%
we have returned show for. In this video tutorial,&nbsp;
we learned how to build a table extracted from&nbsp;&nbsp;

01:20:28.720 --> 01:20:34.320 position:63% line:0%
PDF. So we started with understanding the PDF&nbsp;
file formats. Then we went ahead and installed&nbsp;&nbsp;

01:20:34.320 --> 01:20:40.960 position:63% line:0%
Camelot and Jupyter Notebook Python packages.&nbsp;
Then we understood how to extract PDF table.&nbsp;&nbsp;

01:20:40.960 --> 01:20:47.360 position:63% line:0%
And then we saw basics of panda's data frame&nbsp;
to write and read CSV. And then we went ahead&nbsp;&nbsp;

01:20:47.360 --> 01:20:52.960 position:63% line:0%
with seaborne to do some visualization. So at&nbsp;
the end of this project, we have a successful&nbsp;&nbsp;

01:20:52.960 --> 01:20:58.480 position:63% line:0%
visualization, we have the output table as&nbsp;
CSV and Excel. And then we also learned how&nbsp;&nbsp;

01:20:58.480 --> 01:21:04.160 position:63% line:0%
to extract table from any PDF. So thank you for&nbsp;
listening. I'll see you in the next section.&nbsp;&nbsp;

01:21:05.680 --> 01:21:10.720 position:63% line:0%
In this section, we'll learn how to&nbsp;
build an automated bulk resume parser.&nbsp;&nbsp;

01:21:10.720 --> 01:21:16.320 position:63% line:0%
Going through resumes, and extracting relevant&nbsp;
information from those resumes is one of the most&nbsp;&nbsp;

01:21:16.320 --> 01:21:22.800 position:63% line:0%
essential tasks a manager has to go through before&nbsp;
hiring new resources. In this section, we'll learn&nbsp;&nbsp;

01:21:22.800 --> 01:21:28.320 position:63% line:0%
how to build an automated bulk resume a parser&nbsp;
that can go through multiple resumes and extract&nbsp;&nbsp;

01:21:28.320 --> 01:21:32.880 position:63% line:0%
relevant information from them, and convert&nbsp;
them into a structured tabular format. with&nbsp;&nbsp;

01:21:32.880 --> 01:21:38.880 position:63% line:0%
the click of a button. We'll start the section&nbsp;
by understanding different formats of resumes,&nbsp;&nbsp;

01:21:38.880 --> 01:21:45.040 position:63% line:0%
and marking relevant information that we would&nbsp;
like to extract a brief overview of packages and&nbsp;&nbsp;

01:21:45.040 --> 01:21:50.320 position:63% line:0%
the installation of those packages. Then we'll&nbsp;
see the basics of regular expression in Python,&nbsp;&nbsp;

01:21:50.320 --> 01:21:55.840 position:63% line:0%
and also the basic overview of spacey&nbsp;
functions. And then we'll move on to&nbsp;&nbsp;

01:21:55.840 --> 01:22:00.880 position:63% line:0%
build the code to extract relevant information.&nbsp;
And then finally, we'll complete the script.&nbsp;&nbsp;

01:22:00.880 --> 01:22:05.840 position:63% line:0%
To make it one click command level tool.&nbsp;
Let us go ahead and then see the sections.&nbsp;&nbsp;

01:22:07.600 --> 01:22:13.600 position:63% line:0%
In this video, we'll learn the different formats&nbsp;
of resumes. And then we'll mark essential&nbsp;&nbsp;

01:22:13.600 --> 01:22:19.440 position:63% line:0%
information that we would like to extract in this&nbsp;
project. So as you can see, on my screen, I've got&nbsp;&nbsp;

01:22:19.440 --> 01:22:27.520 position:63% line:0%
two different types of resumes. The first one is&nbsp;
a single column, which has content one by one. And&nbsp;&nbsp;

01:22:27.520 --> 01:22:33.360 position:63% line:0%
then the second one is a double column, which&nbsp;
means in one page, they have got two columns,&nbsp;&nbsp;

01:22:33.360 --> 01:22:40.560 position:63% line:0%
and then the experiences and other details are&nbsp;
scattered across the columns. So as you can see,&nbsp;&nbsp;

01:22:40.560 --> 01:22:46.800 position:63% line:0%
a resume can have me multiple types. So&nbsp;
it is up to the creator of the resume,&nbsp;&nbsp;

01:22:47.440 --> 01:22:53.360 position:63% line:0%
essentially the one who is seeking for a job to&nbsp;
have the format that he or she likes. But it is&nbsp;&nbsp;

01:22:53.360 --> 01:22:59.920 position:63% line:0%
essential for the recruiting manager to completely&nbsp;
go through the resume to extract essential parts&nbsp;&nbsp;

01:22:59.920 --> 01:23:04.960 position:63% line:0%
of it. So what do we mean by essential parts?&nbsp;
The first one is I would say that the name,&nbsp;&nbsp;

01:23:05.680 --> 01:23:10.880 position:63% line:0%
the name, to whom this resume belongs&nbsp;
is the most essential part because&nbsp;&nbsp;

01:23:10.880 --> 01:23:15.840 position:63% line:0%
if you ever want to shortlist this resume, you&nbsp;
need to understand who is that person. And then&nbsp;&nbsp;

01:23:15.840 --> 01:23:21.520 position:63% line:0%
the second thing is, if you ever want to shortlist&nbsp;
a resume, you just do not want to know their name,&nbsp;&nbsp;

01:23:21.520 --> 01:23:27.280 position:63% line:0%
but also you need to be able to contact them. And&nbsp;
then the two key information to contact a person,&nbsp;&nbsp;

01:23:27.840 --> 01:23:33.360 position:63% line:0%
one their email ID, and then the second one their&nbsp;
phone number. So as you can see in this resume,&nbsp;&nbsp;

01:23:33.360 --> 01:23:37.840 position:63% line:0%
the name is first of all mentioned in the top&nbsp;
left, but in this regime as the name is in the&nbsp;&nbsp;

01:23:37.840 --> 01:23:43.520 position:63% line:0%
center position. And in this resume, the email&nbsp;
id is in the top right, but in this resume,&nbsp;&nbsp;

01:23:43.520 --> 01:23:49.040 position:63% line:0%
it is all centrally aligned. So as you can see,&nbsp;
we have totally listed down three elements. The&nbsp;&nbsp;

01:23:49.040 --> 01:23:53.600 position:63% line:0%
first one is name, the second one is email&nbsp;
id. And then the third one is a phone number.&nbsp;&nbsp;

01:23:53.600 --> 01:23:57.360 position:63% line:0%
These are the three information significant&nbsp;
information that we would like to extract&nbsp;&nbsp;

01:23:57.360 --> 01:24:02.560 position:63% line:0%
from this resume. But more than this, what&nbsp;
we want to do is we want to have a criteria&nbsp;&nbsp;

01:24:03.280 --> 01:24:07.760 position:63% line:0%
for which we want to extract this resume,&nbsp;
which means for example, let us say you are&nbsp;&nbsp;

01:24:07.760 --> 01:24:13.040 position:63% line:0%
recruiting for a position called data scientist.&nbsp;
And for a position called data scientists you&nbsp;&nbsp;

01:24:13.040 --> 01:24:18.640 position:63% line:0%
need to have relevant resume is who have the&nbsp;
essential skills of a data scientist and that is&nbsp;&nbsp;

01:24:18.640 --> 01:24:23.840 position:63% line:0%
the most important information that we would like&nbsp;
to see in the resume extraction project. So for&nbsp;&nbsp;

01:24:23.840 --> 01:24:29.920 position:63% line:0%
that purpose, we are going to extract skills from&nbsp;
this resume, especially to say technical skills.&nbsp;&nbsp;

01:24:29.920 --> 01:24:35.520 position:63% line:0%
So the things that we are going to extract is most&nbsp;
importantly the technical skills from the resume,&nbsp;&nbsp;

01:24:35.520 --> 01:24:42.800 position:63% line:0%
then the name, phone number, email id irrespective&nbsp;
of how or where these informations are present&nbsp;&nbsp;

01:24:42.800 --> 01:24:47.200 position:63% line:0%
in a particular resume. We are going to extract&nbsp;
this information using this particular project.&nbsp;&nbsp;

01:24:47.920 --> 01:24:53.360 position:63% line:0%
Before we move on, we have to also understand&nbsp;
one more thing. That resume itself is a file&nbsp;&nbsp;

01:24:53.360 --> 01:24:58.240 position:63% line:0%
and then the file could have multiple formats.&nbsp;
For example, a resume could be a simple image of&nbsp;&nbsp;

01:24:58.240 --> 01:25:05.200 position:63% line:0%
JPEG or PNG The resume a could be a doc exe, which&nbsp;
is Microsoft Word, or the resume could be of PDF.&nbsp;&nbsp;

01:25:05.200 --> 01:25:10.320 position:63% line:0%
In this particular project, we are going&nbsp;
to only deal with the resumes of PDF type.&nbsp;&nbsp;

01:25:10.320 --> 01:25:17.200 position:63% line:0%
Because once we have written a script for PDF file&nbsp;
format, it is not very tough for you to convert&nbsp;&nbsp;

01:25:17.200 --> 01:25:23.360 position:63% line:0%
every other format into a PDF format. Let's say&nbsp;
you can convert a JPEG to a PDF format, you can&nbsp;&nbsp;

01:25:23.360 --> 01:25:30.320 position:63% line:0%
convert a docx to a PDF format. So, that is one of&nbsp;
the reasons why we have picked PDF format as one&nbsp;&nbsp;

01:25:31.280 --> 01:25:37.120 position:63% line:0%
condition where we will build this project upon so&nbsp;
PDF is the file format that we are going to use.&nbsp;&nbsp;

01:25:37.120 --> 01:25:41.200 position:63% line:0%
And also that we are going to use resumes&nbsp;
of different types it could be single or&nbsp;&nbsp;

01:25:41.200 --> 01:25:44.480 position:63% line:0%
double column. And then the information&nbsp;
is that we are going to extract a skill&nbsp;&nbsp;

01:25:45.280 --> 01:25:51.680 position:63% line:0%
name, email id and phone number. In the next&nbsp;
video, we'll see the architecture of this project,&nbsp;&nbsp;

01:25:51.680 --> 01:25:55.200 position:63% line:0%
and then the required Python modules&nbsp;
and how to install those Python modules.&nbsp;&nbsp;

01:25:56.720 --> 01:26:02.160 position:63% line:0%
In this video, we'll see the architectural&nbsp;
overview of this project. So in this project&nbsp;&nbsp;

01:26:02.160 --> 01:26:08.320 position:63% line:0%
will take three PDF files shall resume is in&nbsp;
three PDF files. And we will store it in our local&nbsp;&nbsp;

01:26:08.320 --> 01:26:15.440 position:63% line:0%
folder. So what we are going to do is we are going&nbsp;
to take one PDF file from this folder, and then&nbsp;&nbsp;

01:26:16.000 --> 01:26:20.560 position:63% line:0%
we'll convert this PDF into text. And then&nbsp;
we'll do natural language processing and&nbsp;&nbsp;

01:26:20.560 --> 01:26:25.680 position:63% line:0%
pattern matching to extract relevant information&nbsp;
that are required the relevant information that&nbsp;&nbsp;

01:26:25.680 --> 01:26:31.840 position:63% line:0%
we saw in the previous video, which are&nbsp;
name, email id, phone number, and skills.&nbsp;&nbsp;

01:26:31.840 --> 01:26:36.160 position:63% line:0%
And then we'll use these relevant information&nbsp;
to populate a structured tabular format.&nbsp;&nbsp;

01:26:36.800 --> 01:26:43.120 position:63% line:0%
And then finally, we'll write the output in a CSV&nbsp;
format. Meanwhile, while we are doing PDF to text,&nbsp;&nbsp;

01:26:43.120 --> 01:26:50.320 position:63% line:0%
we also would save those PDF files as text files&nbsp;
for future reference. We'll iterate this process&nbsp;&nbsp;

01:26:51.040 --> 01:26:54.880 position:63% line:0%
until all the files in the current&nbsp;
directory which is the folder&nbsp;&nbsp;

01:26:55.520 --> 01:27:03.040 position:63% line:0%
are completed. Sure to repeat, we are going to&nbsp;
take PDF files, convert them into PDF to text,&nbsp;&nbsp;

01:27:03.040 --> 01:27:07.920 position:63% line:0%
then do natural language processing and pattern&nbsp;
matching. And then we are going to populate them&nbsp;&nbsp;

01:27:07.920 --> 01:27:13.760 position:63% line:0%
in a structured tabular format. And then we are&nbsp;
going to write it in a CSV. So for this purpose,&nbsp;&nbsp;

01:27:13.760 --> 01:27:20.160 position:63% line:0%
these are the packages that we are going to use.&nbsp;
The first one is PDF minor for PDF to text, then&nbsp;&nbsp;

01:27:20.160 --> 01:27:27.520 position:63% line:0%
spacey for natural language processing, then our&nbsp;
E rejects package that is for pattern matching,&nbsp;&nbsp;

01:27:28.320 --> 01:27:37.520 position:63% line:0%
and pandas per output CSV saving. Meanwhile, we&nbsp;
also would use another package called ODS. This&nbsp;&nbsp;

01:27:37.520 --> 01:27:43.040 position:63% line:0%
is for operating system manipulation, which&nbsp;
is highly required for us to iterate through&nbsp;&nbsp;

01:27:43.040 --> 01:27:48.080 position:63% line:0%
multiple files and in the current working&nbsp;
directory, and also to save the output files&nbsp;&nbsp;

01:27:48.080 --> 01:27:56.080 position:63% line:0%
in the required folder. So the packages that&nbsp;
we will be using are PDF minor, spacey, r, e,&nbsp;&nbsp;

01:27:56.080 --> 01:28:04.240 position:63% line:0%
OAS, and pandas. So of all these five packages,&nbsp;
packages, ie underwears come by default installed&nbsp;&nbsp;

01:28:04.240 --> 01:28:13.520 position:63% line:0%
on your Python operating system. So of all these&nbsp;
five packages, packages, Ari and OAS are already&nbsp;&nbsp;

01:28:13.520 --> 01:28:19.440 position:63% line:0%
installed by default in your Python environment.&nbsp;
So it is required for us to install PDF minor,&nbsp;&nbsp;

01:28:19.440 --> 01:28:26.880 position:63% line:0%
spacey, and pandas. As we just saw, of the five&nbsp;
required Python packages. Two packages come by&nbsp;&nbsp;

01:28:26.880 --> 01:28:34.400 position:63% line:0%
default with your Python installation. Those&nbsp;
are our UI, and OAS. So we'll go ahead and see&nbsp;&nbsp;

01:28:34.400 --> 01:28:41.520 position:63% line:0%
how to install the rest of the packages which&nbsp;
is PDF minor, spacey, and pandas to start with&nbsp;&nbsp;

01:28:41.520 --> 01:28:48.400 position:63% line:0%
PDF minor is a package that we are going to use to&nbsp;
convert a PDF into text. And the package that we&nbsp;&nbsp;

01:28:48.400 --> 01:28:55.200 position:63% line:0%
are going to use is called PDF minor dot six&nbsp;
for that reason is because PDF minor is the&nbsp;&nbsp;

01:28:55.200 --> 01:29:02.320 position:63% line:0%
actual package name whose development stopped&nbsp;
before python 2.7. So there was a requirement&nbsp;&nbsp;

01:29:02.320 --> 01:29:08.640 position:63% line:0%
to support the latest version of Python. And that&nbsp;
is where this fork as you can see, this is a fork&nbsp;&nbsp;

01:29:08.640 --> 01:29:14.880 position:63% line:0%
of PDF minor. And this is called PDF minor dot&nbsp;
six. So anytime you're going to deal with PDF,&nbsp;&nbsp;

01:29:14.880 --> 01:29:20.000 position:63% line:0%
and then you want the PDF to be converted into a&nbsp;
text format, and then you have got Python version&nbsp;&nbsp;

01:29:20.000 --> 01:29:26.560 position:63% line:0%
which is latest, mostly three, then you have&nbsp;
to install PDF miner dot six, not PDF miner.&nbsp;&nbsp;

01:29:27.120 --> 01:29:34.320 position:63% line:0%
So as we have always seen how to install a Python&nbsp;
package in this project also will use a terminal&nbsp;&nbsp;

01:29:34.320 --> 01:29:39.440 position:63% line:0%
or shell or Command Prompt. And then we'll use&nbsp;
PIP to install the required Python package.&nbsp;&nbsp;

01:29:39.440 --> 01:29:44.320 position:63% line:0%
So let us open our terminal or in case if&nbsp;
you have got windows mission command prompt&nbsp;&nbsp;

01:29:44.320 --> 01:29:53.360 position:63% line:0%
and type PIP three, install PDF minor dot six. So&nbsp;
as I've got already this package on my machine,&nbsp;&nbsp;

01:29:53.360 --> 01:29:58.160 position:63% line:0%
this is successfully shown that it has been&nbsp;
satisfied. Now let us open our Python terminal&nbsp;&nbsp;

01:29:58.720 --> 01:30:04.480 position:63% line:0%
to see if PDF Minor has been successfully&nbsp;
installed. So let us try import PDF minor.&nbsp;&nbsp;

01:30:05.200 --> 01:30:10.240 position:63% line:0%
You can notice this difference that when we&nbsp;
install the package, it is called PDF minor dot&nbsp;&nbsp;

01:30:10.240 --> 01:30:15.760 position:63% line:0%
six. But when we import it it is as same as PDF&nbsp;
minor. So the only reason they have got this dot&nbsp;&nbsp;

01:30:15.760 --> 01:30:21.200 position:63% line:0%
six is to differentiate between the older version&nbsp;
of PDF minor and the newer version of PDF minor.&nbsp;&nbsp;

01:30:21.200 --> 01:30:28.080 position:63% line:0%
So let us type PDF, import PDF minor and then&nbsp;
press enter and then you can see that it has been&nbsp;&nbsp;

01:30:28.080 --> 01:30:33.040 position:63% line:0%
successfully imported without any error, which&nbsp;
means PDF minor has been successfully imported.&nbsp;&nbsp;

01:30:33.680 --> 01:30:37.120 position:63% line:0%
The next Python package that&nbsp;
we would like to install is&nbsp;&nbsp;

01:30:37.120 --> 01:30:42.720 position:63% line:0%
spacey. spacey is the library that we are going&nbsp;
to use for natural language processing. In fact,&nbsp;&nbsp;

01:30:42.720 --> 01:30:48.240 position:63% line:0%
spacey is one of the most popular natural&nbsp;
language processing libraries in Python and it is&nbsp;&nbsp;

01:30:48.240 --> 01:30:53.680 position:63% line:0%
widely used in the industry for natural language&nbsp;
processing. There are a lot of features of spacey&nbsp;&nbsp;

01:30:53.680 --> 01:30:58.720 position:63% line:0%
for example, the tokenization is very good, it has&nbsp;
got a good named entity recognition, it has got a&nbsp;&nbsp;

01:30:58.720 --> 01:31:04.080 position:63% line:0%
very good language support like 49 languages are&nbsp;
supported. It also comes with pre trained models,&nbsp;&nbsp;

01:31:04.080 --> 01:31:10.080 position:63% line:0%
which helps us do a lot of natural language&nbsp;
processing without training our own model. So&nbsp;&nbsp;

01:31:10.080 --> 01:31:17.360 position:63% line:0%
let us go ahead and install spacey. So to install&nbsp;
spacey, we can see that again we will use PIP and&nbsp;&nbsp;

01:31:17.360 --> 01:31:23.360 position:63% line:0%
then we'll do install spacey. And if you remember&nbsp;
one of the things that I've told from our previous&nbsp;&nbsp;

01:31:23.360 --> 01:31:28.480 position:63% line:0%
sections, we use PIP three because our Python&nbsp;
version is Python three in case if you have got&nbsp;&nbsp;

01:31:29.040 --> 01:31:36.720 position:63% line:0%
Python you have to use the so PIP three install&nbsp;
spacey. So as you can see requirement is already&nbsp;&nbsp;

01:31:36.720 --> 01:31:41.120 position:63% line:0%
satisfied because I've got this package already.&nbsp;
So it has been successfully installed. Let us&nbsp;&nbsp;

01:31:41.120 --> 01:31:48.640 position:63% line:0%
clear our terminal and then open Python three to&nbsp;
see if spacey has been successfully installed.&nbsp;&nbsp;

01:31:48.640 --> 01:31:55.520 position:63% line:0%
So Python three import spacey. spacey has been&nbsp;
successfully imported, let us exit. But there&nbsp;&nbsp;

01:31:55.520 --> 01:32:00.880 position:63% line:0%
is one more thing that we have to do with respect&nbsp;
to spacey, which is download the language model.&nbsp;&nbsp;

01:32:00.880 --> 01:32:05.920 position:63% line:0%
So a natural language processing can work better&nbsp;
only if the language model is available, which&nbsp;&nbsp;

01:32:05.920 --> 01:32:11.360 position:63% line:0%
usually has got all these words and then the&nbsp;
part of speech the named entity recognition&nbsp;&nbsp;

01:32:11.360 --> 01:32:18.960 position:63% line:0%
all this stuff. So for us to download the default&nbsp;
language model English language model for spacey,&nbsp;&nbsp;

01:32:18.960 --> 01:32:24.400 position:63% line:0%
we have to use this command, which we'll&nbsp;
put in our terminal. And because we have&nbsp;&nbsp;

01:32:24.400 --> 01:32:31.600 position:63% line:0%
got Python three, we'll do Python three spacey&nbsp;
download. So, once this is successfully done,&nbsp;&nbsp;

01:32:31.600 --> 01:32:36.080 position:63% line:0%
our language model is successfully installed.&nbsp;
So we can see that the language model has been&nbsp;&nbsp;

01:32:36.080 --> 01:32:40.720 position:63% line:0%
installed. And then it is also telling us that&nbsp;
the way we have loaded our language models,&nbsp;&nbsp;

01:32:41.280 --> 01:32:48.880 position:63% line:0%
spacey dot load the language model. So let us just&nbsp;
check that once. Let us open our Python terminal&nbsp;&nbsp;

01:32:50.000 --> 01:32:57.600 position:63% line:0%
and then say import spacey and then copy&nbsp;
this and then say okay, my NLP is equal to&nbsp;&nbsp;

01:32:58.960 --> 01:33:03.600 position:63% line:0%
Yeah, the language model has been successfully&nbsp;
loaded, which means we have got successfully&nbsp;&nbsp;

01:33:03.600 --> 01:33:08.880 position:63% line:0%
installed spacey and that language model that is&nbsp;
required for us to do English natural language&nbsp;&nbsp;

01:33:08.880 --> 01:33:12.960 position:63% line:0%
processing. And then the final library&nbsp;
that we are going to install is pandas.&nbsp;&nbsp;

01:33:13.680 --> 01:33:20.720 position:63% line:0%
pandas is the library, the go to library for any&nbsp;
tabular data manipulation, and pandas is one of&nbsp;&nbsp;

01:33:20.720 --> 01:33:26.160 position:63% line:0%
the most widely used library in data science for&nbsp;
data manipulation. So it is much easier for us&nbsp;&nbsp;

01:33:26.160 --> 01:33:31.840 position:63% line:0%
to install pandas. As the name suggests, we'll&nbsp;
do let's clear our terminal to three installed&nbsp;&nbsp;

01:33:31.840 --> 01:33:37.440 position:63% line:0%
pandas. We can see that the requirement has&nbsp;
been satisfied. Let us open our Python terminal&nbsp;&nbsp;

01:33:38.160 --> 01:33:45.600 position:63% line:0%
unsay input pandas. pandas has been successfully&nbsp;
imported without any error, which means we have&nbsp;&nbsp;

01:33:45.600 --> 01:33:50.080 position:63% line:0%
successfully installed the packages that&nbsp;
are required for us, which is PDF minor,&nbsp;&nbsp;

01:33:50.080 --> 01:33:57.360 position:63% line:0%
and then spacey, and then pandas. But we also&nbsp;
saw that there are other two libraries that comes&nbsp;&nbsp;

01:33:57.360 --> 01:34:02.800 position:63% line:0%
by default in the current Python installation&nbsp;
that we have got. So let us just verify&nbsp;&nbsp;

01:34:02.800 --> 01:34:08.720 position:63% line:0%
whether those packages are available. So the&nbsp;
first package that we saw was our E, which&nbsp;&nbsp;

01:34:08.720 --> 01:34:14.720 position:63% line:0%
is for regular Express manipulation. So we'll do&nbsp;
import IE. Yep, that's been successfully imported.&nbsp;&nbsp;

01:34:14.720 --> 01:34:19.200 position:63% line:0%
And then the next package that we saw was&nbsp;
was for operating system manipulation,&nbsp;&nbsp;

01:34:19.200 --> 01:34:26.960 position:63% line:0%
to you know, find files, pass through folders.&nbsp;
So we'll do input was, and as we can see,&nbsp;&nbsp;

01:34:26.960 --> 01:34:30.720 position:63% line:0%
these two libraries are successfully&nbsp;
imported, which means we are all set&nbsp;&nbsp;

01:34:30.720 --> 01:34:34.720 position:63% line:0%
with all the libraries that are required&nbsp;
for us to proceed with this project.&nbsp;&nbsp;

01:34:34.720 --> 01:34:42.160 position:63% line:0%
And then we'll see how to code. In the next&nbsp;
section. We'll see basics of regular expression&nbsp;&nbsp;

01:34:42.160 --> 01:34:46.800 position:63% line:0%
and natural language processing overview&nbsp;
and then we'll move on to coding. Thank you.&nbsp;&nbsp;

01:34:48.400 --> 01:34:52.400 position:63% line:0%
In this video, we'll learn basics of&nbsp;
regular expression. Regular Expression&nbsp;&nbsp;

01:34:52.400 --> 01:34:59.600 position:63% line:0%
could be also called as regex or red X or&nbsp;
reg x. So whatever you would like to call it&nbsp;&nbsp;

01:34:59.600 --> 01:35:04.400 position:63% line:0%
is a sequence of characters that define a search&nbsp;
pattern. That search pattern is usually the&nbsp;&nbsp;

01:35:04.400 --> 01:35:09.200 position:63% line:0%
combination of characters and meta characters.&nbsp;
So the meta characters are like this cap,&nbsp;&nbsp;

01:35:10.000 --> 01:35:16.640 position:63% line:0%
dollar dot pipe or curly braces. So these meta&nbsp;
characters define the syntax around characters&nbsp;&nbsp;

01:35:16.640 --> 01:35:21.520 position:63% line:0%
to create the search pattern, which is what we&nbsp;
call as regular expression. regular expression&nbsp;&nbsp;

01:35:22.080 --> 01:35:29.520 position:63% line:0%
is one of the toughest programming concepts&nbsp;
that is not very familiar. So there are a lot&nbsp;&nbsp;

01:35:29.520 --> 01:35:35.200 position:63% line:0%
of names around regular expressions on internet,&nbsp;
you can just refer to it to see how tough it is.&nbsp;&nbsp;

01:35:35.200 --> 01:35:39.120 position:63% line:0%
So just to understand regular expression,&nbsp;
we'll go through a little bit basics,&nbsp;&nbsp;

01:35:39.120 --> 01:35:44.240 position:63% line:0%
but regular expression is so old that&nbsp;
anytime you Google for regular expression,&nbsp;&nbsp;

01:35:44.240 --> 01:35:49.360 position:63% line:0%
you would find the answer for which you're&nbsp;
searching for. So, the basics of expression is&nbsp;&nbsp;

01:35:50.320 --> 01:35:55.840 position:63% line:0%
primarily to understand the meta characters,&nbsp;
the meta character pipe, the pipe operator&nbsp;&nbsp;

01:35:56.400 --> 01:36:04.000 position:63% line:0%
defines a Boolean or so, if you want to compare&nbsp;
between two words, whether it is gi AY or GY,&nbsp;&nbsp;

01:36:05.040 --> 01:36:10.400 position:63% line:0%
then you would use a pipe operator in your&nbsp;
regular expression. So, then parenthesis, let&nbsp;&nbsp;

01:36:10.400 --> 01:36:16.640 position:63% line:0%
us assume that you do not want to use individual&nbsp;
different words, but you want to just use or for&nbsp;&nbsp;

01:36:16.640 --> 01:36:24.640 position:63% line:0%
one particular character, then you would use gr,&nbsp;
open parenthesis a pipe e close parenthesis, which&nbsp;&nbsp;

01:36:24.640 --> 01:36:30.320 position:63% line:0%
is to say I want gr and then it could be either&nbsp;
A or D and then I want to wipe So, this is how&nbsp;&nbsp;

01:36:30.320 --> 01:36:36.480 position:63% line:0%
my pattern should look like. And this is what we&nbsp;
call a grouping regular expression metacharacters&nbsp;&nbsp;

01:36:36.480 --> 01:36:42.640 position:63% line:0%
also has something called quantification,&nbsp;
which is to say, how many or how the number&nbsp;&nbsp;

01:36:42.640 --> 01:36:47.520 position:63% line:0%
of elements or tokens should be present in the&nbsp;
pattern that I would like to see. For example,&nbsp;&nbsp;

01:36:47.520 --> 01:36:53.680 position:63% line:0%
the question mark indicates zero or one&nbsp;
occurrence of the preceding element, which means&nbsp;&nbsp;

01:36:54.240 --> 01:37:00.240 position:63% line:0%
let us say you have got color CEO elbow you&nbsp;
question mark and our which means it could&nbsp;&nbsp;

01:37:01.120 --> 01:37:08.560 position:63% line:0%
match both CEO elbow our our CFO elbow, you our&nbsp;
while question mark is about one Li one occurrence&nbsp;&nbsp;

01:37:08.560 --> 01:37:15.600 position:63% line:0%
as strict which is star is about multiple&nbsp;
occurrences. Which means if you say a B star C,&nbsp;&nbsp;

01:37:16.160 --> 01:37:23.760 position:63% line:0%
it could be either a, b, c, or it could&nbsp;
be either ABC, or it could be either ABC&nbsp;&nbsp;

01:37:24.480 --> 01:37:30.320 position:63% line:0%
or so on. So it doesn't strictly count only one&nbsp;
occurrence of the preceding character. But it&nbsp;&nbsp;

01:37:30.320 --> 01:37:34.720 position:63% line:0%
actually has n number of preceding characters&nbsp;
that you could have. But the condition is that&nbsp;&nbsp;

01:37:34.720 --> 01:37:42.640 position:63% line:0%
you have to have a and b and c. So this is the&nbsp;
basic concept of regular expression. But you could&nbsp;&nbsp;

01:37:42.640 --> 01:37:47.440 position:63% line:0%
actually refer more online to understand more of&nbsp;
regular expression. But for us to proceed with&nbsp;&nbsp;

01:37:47.440 --> 01:37:52.720 position:63% line:0%
this project, I think this is good enough for us&nbsp;
to see how to build a basic regular expression,&nbsp;&nbsp;

01:37:52.720 --> 01:37:58.080 position:63% line:0%
or at least to understand the regular expression&nbsp;
that we might get from internet. So now, from&nbsp;&nbsp;

01:37:58.080 --> 01:38:03.040 position:63% line:0%
the basics of regular expression. As such, we'll&nbsp;
move forward to see how these regular expressions&nbsp;&nbsp;

01:38:03.040 --> 01:38:08.160 position:63% line:0%
could be used in Python for us to do pattern&nbsp;
matching. And as we saw in the previous video,&nbsp;&nbsp;

01:38:08.160 --> 01:38:15.280 position:63% line:0%
the package that we are going to use for regular&nbsp;
expression in Python is R E. So Ari has these&nbsp;&nbsp;

01:38:15.280 --> 01:38:22.640 position:63% line:0%
major functions match search, find all split,&nbsp;
sub and compile. So all of these you will see&nbsp;&nbsp;

01:38:22.640 --> 01:38:28.160 position:63% line:0%
compile is something that would be mostly used to&nbsp;
create a regular expression, and then compile it,&nbsp;&nbsp;

01:38:28.160 --> 01:38:37.360 position:63% line:0%
and then use that compiled regular expression to&nbsp;
find and search for everything else. And match is&nbsp;&nbsp;

01:38:37.360 --> 01:38:42.720 position:63% line:0%
when you would use if you want to match the first&nbsp;
word and search, you don't care about whether it&nbsp;&nbsp;

01:38:42.720 --> 01:38:47.760 position:63% line:0%
is first or second word, but you will want to&nbsp;
find it anywhere it isn't. And find all again it&nbsp;&nbsp;

01:38:47.760 --> 01:38:53.360 position:63% line:0%
has its own purpose. So let us open our terminal&nbsp;
and then see a little bit of regular expression,&nbsp;&nbsp;

01:38:53.360 --> 01:38:58.640 position:63% line:0%
how we would like to do it. So you can open either&nbsp;
your terminal or your Python console on pi charm&nbsp;&nbsp;

01:38:58.640 --> 01:39:03.520 position:63% line:0%
or Jupyter Notebook. But for simplicity,&nbsp;
I'm just invoking Python from my terminal,&nbsp;&nbsp;

01:39:04.240 --> 01:39:10.800 position:63% line:0%
then say import IE. And let us create a&nbsp;
sample text. Okay, my text is going to say&nbsp;&nbsp;

01:39:10.800 --> 01:39:17.200 position:63% line:0%
best Python course this is my text. And now&nbsp;
I would like to see where the word based&nbsp;&nbsp;

01:39:18.160 --> 01:39:26.000 position:63% line:0%
if the word based occurs in my text, so first&nbsp;
I'm going to say re dot match of paste, which&nbsp;&nbsp;

01:39:26.000 --> 01:39:31.760 position:63% line:0%
is my search pattern here, in this case, regular&nbsp;
expression. Comma, I'm going to save my text&nbsp;&nbsp;

01:39:32.720 --> 01:39:39.200 position:63% line:0%
and then enter. So as you can see, it has replied&nbsp;
with a real object, understand zero to four which&nbsp;&nbsp;

01:39:39.200 --> 01:39:45.440 position:63% line:0%
means I've got the word best. And the match&nbsp;
is best. But let's say we want to test it&nbsp;&nbsp;

01:39:45.440 --> 01:39:53.280 position:63% line:0%
with two different words either best or let's say&nbsp;
good match but we are going to use pipe operator&nbsp;&nbsp;

01:39:53.280 --> 01:40:00.640 position:63% line:0%
to say good so it says the matches best&nbsp;
because the text is saying We have got&nbsp;&nbsp;

01:40:00.640 --> 01:40:07.200 position:63% line:0%
best Python course, let us create a second text,&nbsp;
which is text to. And in this case, we'll say good&nbsp;&nbsp;

01:40:07.200 --> 01:40:13.280 position:63% line:0%
Python course. And then we'll use the same regular&nbsp;
expression that we used before which is best pipe&nbsp;&nbsp;

01:40:13.280 --> 01:40:19.680 position:63% line:0%
good, which means either best or good and&nbsp;
then say text to in this case, it says that&nbsp;&nbsp;

01:40:19.680 --> 01:40:25.920 position:63% line:0%
it has matched with good, and then it is the same&nbsp;
space. Now what we'll do is instead of using match&nbsp;&nbsp;

01:40:26.880 --> 01:40:34.000 position:63% line:0%
in this will use good best Python course&nbsp;
aspects too. And then instead of using match,&nbsp;&nbsp;

01:40:34.000 --> 01:40:42.480 position:63% line:0%
we'll use search to see what output it gives&nbsp;
us. As you can see, it has matched good,&nbsp;&nbsp;

01:40:43.280 --> 01:40:50.080 position:63% line:0%
because we have got either based or good and then&nbsp;
index two and the position is good based Python&nbsp;&nbsp;

01:40:50.080 --> 01:40:57.360 position:63% line:0%
course, let us assume now we want to see both both&nbsp;
of these in the given text. So now we'll say T dot&nbsp;&nbsp;

01:40:58.720 --> 01:41:04.000 position:63% line:0%
find all which will result us both&nbsp;
good and best. So, in this case,&nbsp;&nbsp;

01:41:04.000 --> 01:41:08.000 position:63% line:0%
we wanted to see whether both these words are&nbsp;
present and then because both these words are&nbsp;&nbsp;

01:41:08.000 --> 01:41:13.120 position:63% line:0%
present, it is returning us both good&nbsp;
and best that it is present in the text.&nbsp;&nbsp;

01:41:13.120 --> 01:41:16.880 position:63% line:0%
And in case if the pattern that we have given&nbsp;
the regular expression that we have given us,&nbsp;&nbsp;

01:41:16.880 --> 01:41:20.480 position:63% line:0%
let's say something like this, and then it&nbsp;
is not available and then we will not get&nbsp;&nbsp;

01:41:20.480 --> 01:41:24.960 position:63% line:0%
any result which is we have got an empty&nbsp;
list. So these are the main functions&nbsp;&nbsp;

01:41:24.960 --> 01:41:30.720 position:63% line:0%
that we are going to use in this particular&nbsp;
project. So this is a very brief introduction&nbsp;&nbsp;

01:41:31.280 --> 01:41:37.600 position:63% line:0%
of regular expression, and also how to use regular&nbsp;
expression in Python for pattern matching. In&nbsp;&nbsp;

01:41:37.600 --> 01:41:43.040 position:63% line:0%
the next video, we will see very basics of&nbsp;
natural language processing using spacey.&nbsp;&nbsp;

01:41:44.640 --> 01:41:50.320 position:63% line:0%
In this video, we will learn basics of natural&nbsp;
language processing using spacey. So let us open&nbsp;&nbsp;

01:41:50.320 --> 01:41:55.920 position:63% line:0%
our Jupyter Notebook and create a new Jupyter&nbsp;
Notebook. So you can do this by going to File&nbsp;&nbsp;

01:41:56.480 --> 01:42:01.520 position:63% line:0%
and then new notebook and select Python three&nbsp;
once you have this new notebook. Let us now&nbsp;&nbsp;

01:42:01.520 --> 01:42:07.520 position:63% line:0%
see a little bit about spacey. So as we saw in&nbsp;
the previous video, spacey is one of the most&nbsp;&nbsp;

01:42:07.520 --> 01:42:14.000 position:63% line:0%
popular used natural language processing library.&nbsp;
So we'll import the library using import spacey.&nbsp;&nbsp;

01:42:16.320 --> 01:42:20.720 position:63% line:0%
Once that is done, the very first step,&nbsp;
the next step that we are supposed to do is&nbsp;&nbsp;

01:42:21.280 --> 01:42:26.000 position:63% line:0%
load our language model. So if you&nbsp;
remember after installing spacey library,&nbsp;&nbsp;

01:42:26.000 --> 01:42:32.160 position:63% line:0%
we downloaded the English language model.&nbsp;
So if you remember, after installing spacey&nbsp;&nbsp;

01:42:32.160 --> 01:42:36.800 position:63% line:0%
Python library, we actually downloaded the&nbsp;
English language model because a language&nbsp;&nbsp;

01:42:36.800 --> 01:42:43.120 position:63% line:0%
model is essential for a lot of natural language&nbsp;
processing tasks. So, we are going to load the&nbsp;&nbsp;

01:42:43.120 --> 01:42:49.040 position:63% line:0%
language model that we downloaded in the previous&nbsp;
section. So we will use spacey dot load and then&nbsp;&nbsp;

01:42:49.680 --> 01:42:53.680 position:63% line:0%
put the name of the language model that you have&nbsp;
downloaded. For example, let us assume that you&nbsp;&nbsp;

01:42:53.680 --> 01:42:57.840 position:63% line:0%
have downloaded a language model for a different&nbsp;
language like German, so you will have a different&nbsp;&nbsp;

01:42:57.840 --> 01:43:02.560 position:63% line:0%
name instead of E. And so in that case, put the&nbsp;
language model name that you have downloaded.&nbsp;&nbsp;

01:43:02.560 --> 01:43:08.000 position:63% line:0%
And then as I need to NLP. So once this is&nbsp;
successfully executed, now what you can do&nbsp;&nbsp;

01:43:08.000 --> 01:43:13.200 position:63% line:0%
is you can define the text that you have. So&nbsp;
the text that I've got is I've got a couple of&nbsp;&nbsp;

01:43:13.920 --> 01:43:20.320 position:63% line:0%
sentences from Google Wikipedia page for us to&nbsp;
explore this package. So I'm going to use this&nbsp;&nbsp;

01:43:20.320 --> 01:43:26.880 position:63% line:0%
as text and then I'm assigning it to text. So if&nbsp;
you print text you will see okay, this is my text.&nbsp;&nbsp;

01:43:26.880 --> 01:43:31.120 position:63% line:0%
So what are we going to do now is now that the&nbsp;
entire thing is ready. So we have imported the&nbsp;&nbsp;

01:43:31.120 --> 01:43:35.840 position:63% line:0%
package, we have loaded the language model&nbsp;
and then the input text on which we have to&nbsp;&nbsp;

01:43:35.840 --> 01:43:40.960 position:63% line:0%
do natural language processing is ready. So the&nbsp;
first step in natural language processing is&nbsp;&nbsp;

01:43:40.960 --> 01:43:44.560 position:63% line:0%
annotation. So what you're going to do&nbsp;
is you're going to let the language model&nbsp;&nbsp;

01:43:44.560 --> 01:43:50.160 position:63% line:0%
annotate your input text, so that the input&nbsp;
text is created in such a way that it knows&nbsp;&nbsp;

01:43:50.160 --> 01:43:55.280 position:63% line:0%
what is a part of speech tagging in it, it&nbsp;
knows where are the named entity recognition,&nbsp;&nbsp;

01:43:55.280 --> 01:44:01.040 position:63% line:0%
it tokenizers it it creates word vectors it can&nbsp;
do a lot of other things. So the first step is&nbsp;&nbsp;

01:44:01.040 --> 01:44:07.120 position:63% line:0%
use the language model because you loaded the&nbsp;
language model and presented to NLP on the text&nbsp;&nbsp;

01:44:07.120 --> 01:44:12.880 position:63% line:0%
input text that you have got. So the way you do&nbsp;
is NLP off text and then you store the result&nbsp;&nbsp;

01:44:12.880 --> 01:44:18.800 position:63% line:0%
in doc. So once you store the result in dog the&nbsp;
first very first step that any natural language&nbsp;&nbsp;

01:44:18.800 --> 01:44:25.200 position:63% line:0%
processing would require you to do is tokenization&nbsp;
what is tokenization tokenization is nothing but&nbsp;&nbsp;

01:44:25.200 --> 01:44:31.520 position:63% line:0%
splitting the input text based on token so for&nbsp;
example, so in this case what we are going to do&nbsp;&nbsp;

01:44:31.520 --> 01:44:36.880 position:63% line:0%
is we are going to split the entire text word by&nbsp;
word so word is the token for us here. So you can&nbsp;&nbsp;

01:44:36.880 --> 01:44:41.600 position:63% line:0%
do the sentence organization. You can do this even&nbsp;
paragraph tokenization but in this case we are&nbsp;&nbsp;

01:44:41.600 --> 01:44:49.520 position:63% line:0%
going to do word tokenization. So say we have got&nbsp;
doc so let us print how the doc looks like once I&nbsp;&nbsp;

01:44:49.520 --> 01:44:54.400 position:63% line:0%
print doc. I'm not getting anything other than&nbsp;
this thing because this is what it is printing,&nbsp;&nbsp;

01:44:54.400 --> 01:45:00.480 position:63% line:0%
but internally doc has been annotated using the&nbsp;
natural language processing light library and&nbsp;&nbsp;

01:45:00.480 --> 01:45:04.880 position:63% line:0%
language model that we have got. So what are we&nbsp;
going to do is we are going to say for token and&nbsp;&nbsp;

01:45:04.880 --> 01:45:09.680 position:63% line:0%
doc print token so we are going to iterate through&nbsp;
doc and then say okay print each and every token&nbsp;&nbsp;

01:45:09.680 --> 01:45:14.320 position:63% line:0%
by default, which is a word token. So we&nbsp;
what we see is, we see one by one word by&nbsp;&nbsp;

01:45:14.320 --> 01:45:20.640 position:63% line:0%
word. And then okay the word organization has been&nbsp;
successfully then, once the word tokenisation has&nbsp;&nbsp;

01:45:20.640 --> 01:45:25.120 position:63% line:0%
been successfully done, we can do a lot of things.&nbsp;
For example, you can build a workload if you want,&nbsp;&nbsp;

01:45:25.120 --> 01:45:31.280 position:63% line:0%
you can build a unigram or if you want, you can&nbsp;
have a bi gram also combining the words. In case&nbsp;&nbsp;

01:45:31.280 --> 01:45:35.040 position:63% line:0%
let's say you want to visualize the sentence,&nbsp;
instead of doing word tokenization, you can do&nbsp;&nbsp;

01:45:35.040 --> 01:45:39.280 position:63% line:0%
a sentence tokenization. So the opportunities&nbsp;
are a lot so you can do anything you want.&nbsp;&nbsp;

01:45:40.160 --> 01:45:46.080 position:63% line:0%
To move ahead with the spacey library, what we can&nbsp;
further do is as we saw, when you annotate your&nbsp;&nbsp;

01:45:46.080 --> 01:45:50.720 position:63% line:0%
input text using the language model that you have&nbsp;
got you get out of speech also part of speeches&nbsp;&nbsp;

01:45:50.720 --> 01:45:55.520 position:63% line:0%
to say okay, this this word is a noun, this word&nbsp;
is a verb, this word is an adjective. So all these&nbsp;&nbsp;

01:45:55.520 --> 01:45:59.920 position:63% line:0%
things, so what we are going to do now is we are&nbsp;
going to say okay, for token and Doc, the same&nbsp;&nbsp;

01:45:59.920 --> 01:46:06.880 position:63% line:0%
thing that we saw before, what we are saying onely&nbsp;
if that token dot POS underscore, which is to say&nbsp;&nbsp;

01:46:06.880 --> 01:46:12.320 position:63% line:0%
that this is the part of speech, which is noun,&nbsp;
then print the token. So print all the tokens,&nbsp;&nbsp;

01:46:12.320 --> 01:46:16.320 position:63% line:0%
which is known that is what we are going to do&nbsp;
here. So you see that you have got founder Money,&nbsp;&nbsp;

01:46:16.320 --> 01:46:20.560 position:63% line:0%
money, Angel, all these things. It is say instead&nbsp;
of now let's say we want to work. So once you&nbsp;&nbsp;

01:46:20.560 --> 01:46:27.040 position:63% line:0%
exude this, you get was funded. But in case if&nbsp;
you want objective, you put a DJ, and then you get&nbsp;&nbsp;

01:46:27.040 --> 01:46:32.160 position:63% line:0%
all the objectives that you have got. So this&nbsp;
is how you extract a particular part of speech,&nbsp;&nbsp;

01:46:32.160 --> 01:46:36.240 position:63% line:0%
for example, you're doing text summarization,&nbsp;
or you're doing any other text technique,&nbsp;&nbsp;

01:46:36.240 --> 01:46:41.200 position:63% line:0%
you want to extract topic from it. So you're going&nbsp;
to only go for nouns and adjectives. So the same&nbsp;&nbsp;

01:46:41.200 --> 01:46:45.840 position:63% line:0%
way for you to identify a particular part of&nbsp;
speech. So this is what you're going to use,&nbsp;&nbsp;

01:46:45.840 --> 01:46:50.320 position:63% line:0%
iterate through the document. For every token,&nbsp;
you're going to say, give me the product speech.&nbsp;&nbsp;

01:46:51.360 --> 01:46:56.400 position:63% line:0%
So the next important thing or in fact, the most&nbsp;
important thing for this particular project is&nbsp;&nbsp;

01:46:56.400 --> 01:47:01.680 position:63% line:0%
named entity recognition. So what does named&nbsp;
entity recognition, named entity recognition is&nbsp;&nbsp;

01:47:01.680 --> 01:47:08.320 position:63% line:0%
nothing but identifying entity of that particular&nbsp;
word. For example, Google is an organization,&nbsp;&nbsp;

01:47:08.320 --> 01:47:12.800 position:63% line:0%
August 1998 is a date. When you&nbsp;
have money dollars, it is money,&nbsp;&nbsp;

01:47:12.800 --> 01:47:17.920 position:63% line:0%
when you see a person's name, it is a person. So&nbsp;
identifying, you know putting a context around the&nbsp;&nbsp;

01:47:17.920 --> 01:47:23.440 position:63% line:0%
word instead of just simply saying, whether it is&nbsp;
a grammatically noun or verb or adverb adjective.&nbsp;&nbsp;

01:47:23.440 --> 01:47:27.920 position:63% line:0%
So you're trying to say okay, this is what&nbsp;
I have identified this entity. So that is&nbsp;&nbsp;

01:47:27.920 --> 01:47:33.600 position:63% line:0%
what we are calling us named entity recognition.&nbsp;
And this is much, much easier to do and spacey,&nbsp;&nbsp;

01:47:33.600 --> 01:47:37.040 position:63% line:0%
because of the language model that&nbsp;
we have got under spacey has made it&nbsp;&nbsp;

01:47:37.040 --> 01:47:40.560 position:63% line:0%
so easy for us to do it in one single&nbsp;
function. So what we are going to do is,&nbsp;&nbsp;

01:47:41.280 --> 01:47:47.600 position:63% line:0%
we are going to say dot.ns, which will apply the&nbsp;
entity recognition on the dog. So in the previous&nbsp;&nbsp;

01:47:47.600 --> 01:47:52.720 position:63% line:0%
section, you would have seen that we have done it&nbsp;
only on dog because we were iterating through the&nbsp;&nbsp;

01:47:52.720 --> 01:47:57.920 position:63% line:0%
actual words. But in this case, we want to iterate&nbsp;
through the entities. So we are saying dog.ns,&nbsp;&nbsp;

01:47:57.920 --> 01:48:03.840 position:63% line:0%
which is for entities, and then we are iterating&nbsp;
over it with entity. And then we are saying okay,&nbsp;&nbsp;

01:48:03.840 --> 01:48:09.760 position:63% line:0%
print entity dot text, the actual word, and then&nbsp;
print entity dot label underscore, which means&nbsp;&nbsp;

01:48:09.760 --> 01:48:15.760 position:63% line:0%
the label of the entity that has been recognized.&nbsp;
So I'm printing the word, and I'm printing the&nbsp;&nbsp;

01:48:16.720 --> 01:48:22.080 position:63% line:0%
label of the entity, which is organization or data&nbsp;
or whatever it is. So once I print this thing,&nbsp;&nbsp;

01:48:22.080 --> 01:48:28.080 position:63% line:0%
this is what I get. So once I print this thing,&nbsp;
so we have entity dot txt, entity dot label&nbsp;&nbsp;

01:48:28.080 --> 01:48:32.880 position:63% line:0%
underscore, I'm going to print this and once I&nbsp;
print this thing, and this is what I get, so I get&nbsp;&nbsp;

01:48:32.880 --> 01:48:40.720 position:63% line:0%
Google org, or augusztus. August 1998 is a date&nbsp;
and Google is an organization, Jeff Bezos CEO of&nbsp;&nbsp;

01:48:40.720 --> 01:48:46.160 position:63% line:0%
Amazon is a person and then Stanford University&nbsp;
is an organization. So this is the way what we are&nbsp;&nbsp;

01:48:46.160 --> 01:48:51.680 position:63% line:0%
going to do is we are going to take the text and&nbsp;
then identify important entities that are present&nbsp;&nbsp;

01:48:51.680 --> 01:48:57.600 position:63% line:0%
in this text. So this is the basic overview of&nbsp;
natural language processing. Using spacey Of&nbsp;&nbsp;

01:48:57.600 --> 01:49:02.080 position:63% line:0%
course, natural language processing is an emerging&nbsp;
area in research and development. And of course,&nbsp;&nbsp;

01:49:02.080 --> 01:49:08.880 position:63% line:0%
one of the most widely, you know anticipated areas&nbsp;
in machine learning and artificial intelligence.&nbsp;&nbsp;

01:49:08.880 --> 01:49:12.800 position:63% line:0%
So learning natural language processing&nbsp;
with just five cells in Jupyter Notebook is&nbsp;&nbsp;

01:49:12.800 --> 01:49:17.680 position:63% line:0%
completely impossible, but just wanted to give you&nbsp;
a flavor of what we might be doing in this course,&nbsp;&nbsp;

01:49:17.680 --> 01:49:21.840 position:63% line:0%
so that you have some idea of you know how to&nbsp;
proceed further or if you want to extend this&nbsp;&nbsp;

01:49:21.840 --> 01:49:28.000 position:63% line:0%
particular project to include different set of&nbsp;
skills, or different variables that we have not&nbsp;&nbsp;

01:49:28.000 --> 01:49:32.720 position:63% line:0%
captured in this resume parsing project. So you&nbsp;
can use this understanding that we have covered&nbsp;&nbsp;

01:49:32.720 --> 01:49:39.120 position:63% line:0%
in this video to extend this particular project&nbsp;
to you know, wider objective. So in this video,&nbsp;&nbsp;

01:49:39.120 --> 01:49:43.120 position:63% line:0%
we successfully learned the basics of&nbsp;
natural language processing using spacey&nbsp;&nbsp;

01:49:43.120 --> 01:49:46.640 position:63% line:0%
we saw a couple of spacey functions how&nbsp;
to load spacey, how to learn natural&nbsp;&nbsp;

01:49:46.640 --> 01:49:51.440 position:63% line:0%
language processing the library English language&nbsp;
library, and then we also saw a little bit about&nbsp;&nbsp;

01:49:51.440 --> 01:49:56.160 position:63% line:0%
tokenization and named entity recognition. In&nbsp;
the next video we will actually start with the&nbsp;&nbsp;

01:49:56.160 --> 01:50:01.360 position:63% line:0%
coding part of resume parsing project which&nbsp;
we are interested In this particular project&nbsp;&nbsp;

01:50:02.960 --> 01:50:09.120 position:63% line:0%
In this video, we'll learn how to code the actual&nbsp;
project of resume parsing. Before we get into&nbsp;&nbsp;

01:50:09.120 --> 01:50:15.200 position:63% line:0%
coding, there is a little bit of understanding of&nbsp;
folder structure is required. So let us see our&nbsp;&nbsp;

01:50:15.200 --> 01:50:20.400 position:63% line:0%
folders are organized for this particular project,&nbsp;
we need to create two different folders that are&nbsp;&nbsp;

01:50:20.400 --> 01:50:26.640 position:63% line:0%
essential for this particular project. The first&nbsp;
one is resume his resume is is the folder where we&nbsp;&nbsp;

01:50:26.640 --> 01:50:31.520 position:63% line:0%
will have all the input files all the resumes that&nbsp;
we have got in this project. So in this project,&nbsp;&nbsp;

01:50:31.520 --> 01:50:36.000 position:63% line:0%
we have taken three resumes and all those three&nbsp;
resumes will be present inside this folder&nbsp;&nbsp;

01:50:36.000 --> 01:50:42.400 position:63% line:0%
resumes, then the next folder that we would need&nbsp;
is output folder, which will have two subfolders.&nbsp;&nbsp;

01:50:42.400 --> 01:50:50.720 position:63% line:0%
The first one is txt. txt. txt will contain all&nbsp;
the text converted format of those resumes. So&nbsp;&nbsp;

01:50:50.720 --> 01:50:57.280 position:63% line:0%
once the resume a PDF is read, and then converted&nbsp;
into a txt that is stored inside this text folder,&nbsp;&nbsp;

01:50:57.280 --> 01:51:02.080 position:63% line:0%
and then once the entire parsing is done, all&nbsp;
this content is converted into a structured&nbsp;&nbsp;

01:51:02.080 --> 01:51:07.440 position:63% line:0%
tabular format, which is a CSV and then&nbsp;
it is stored inside this folder CSV. So&nbsp;&nbsp;

01:51:07.440 --> 01:51:12.880 position:63% line:0%
first, we need resume is folder where we will&nbsp;
have all the PDFs that we want to be parsed.&nbsp;&nbsp;

01:51:12.880 --> 01:51:18.000 position:63% line:0%
Second, we will have output folder inside&nbsp;
output folder, we will have two subfolders.&nbsp;&nbsp;

01:51:18.000 --> 01:51:25.040 position:63% line:0%
One is txt and then the second one is CSV. Once&nbsp;
you are done with creating these folders, the next&nbsp;&nbsp;

01:51:25.040 --> 01:51:32.880 position:63% line:0%
important file that we need for this particular&nbsp;
project is PDF to txt dot p y. So the file that&nbsp;&nbsp;

01:51:32.880 --> 01:51:40.800 position:63% line:0%
we need is PDF to txt dot p y. And how do we&nbsp;
get this file. This is a file that is present&nbsp;&nbsp;

01:51:40.800 --> 01:51:46.880 position:63% line:0%
inside the PDF miner library. So we need to get&nbsp;
this file from the PDF miner library. So let us&nbsp;&nbsp;

01:51:46.880 --> 01:51:54.480 position:63% line:0%
go ahead and then open the PDF minor PDF minor&nbsp;
dot six to be precise PDF minor dot six GitHub&nbsp;&nbsp;

01:51:54.480 --> 01:52:01.840 position:63% line:0%
repository. And then let us go inside the tool&nbsp;
section. So open PDF, miners GitHub repository,&nbsp;&nbsp;

01:52:02.560 --> 01:52:10.080 position:63% line:0%
and then get into Tools section. So from this tool&nbsp;
section, you can see that you have PDF to text&nbsp;&nbsp;

01:52:10.080 --> 01:52:16.640 position:63% line:0%
dot p y, click this. And then you get&nbsp;
RAW file. Once you click the raw file.&nbsp;&nbsp;

01:52:17.840 --> 01:52:24.240 position:63% line:0%
You have this option when you press Ctrl S, or&nbsp;
if you're using Mac Command S or you can use your&nbsp;&nbsp;

01:52:24.240 --> 01:52:32.640 position:63% line:0%
Firefox to say OK, save pages, which will tell you&nbsp;
okay, how do I have to save the file. So once you&nbsp;&nbsp;

01:52:32.640 --> 01:52:38.480 position:63% line:0%
have this file, saved in your local drive&nbsp;
the folder where you have what this project,&nbsp;&nbsp;

01:52:38.480 --> 01:52:43.520 position:63% line:0%
now we are ready to go further with the&nbsp;
coding. So there are three essential things&nbsp;&nbsp;

01:52:43.520 --> 01:52:50.240 position:63% line:0%
to folders, main folders, output and resumes.&nbsp;
And inside output we want txt and CSV to folders.&nbsp;&nbsp;

01:52:50.240 --> 01:52:56.480 position:63% line:0%
And then we need to get this PDF to text dot p&nbsp;
y from the PDF minor GitHub repository and then&nbsp;&nbsp;

01:52:56.480 --> 01:53:01.280 position:63% line:0%
store it inside the current working directory&nbsp;
the current folder where this project is setup.&nbsp;&nbsp;

01:53:01.280 --> 01:53:08.160 position:63% line:0%
Once this is done, let us go ahead and open our&nbsp;
Jupyter Notebook. So until now, what we saw is&nbsp;&nbsp;

01:53:08.160 --> 01:53:13.600 position:63% line:0%
how the folder structure is organized, and what&nbsp;
is the essential file that we need that we source&nbsp;&nbsp;

01:53:13.600 --> 01:53:20.480 position:63% line:0%
just from PDF miner GitHub repository.&nbsp;
Once this is done, let us go ahead and open&nbsp;&nbsp;

01:53:20.480 --> 01:53:25.760 position:63% line:0%
our Jupyter Notebook. Once you open the Jupyter&nbsp;
Notebook, please create a new notebook by just&nbsp;&nbsp;

01:53:25.760 --> 01:53:32.000 position:63% line:0%
going into file, new notebook Python three. Once&nbsp;
you do this thing, your new notebook will be ready&nbsp;&nbsp;

01:53:32.720 --> 01:53:38.080 position:63% line:0%
in the new notebook as we have a better coding&nbsp;
practice in the every project that we have done.&nbsp;&nbsp;

01:53:39.360 --> 01:53:45.120 position:63% line:0%
Once you create the new notebook by&nbsp;
going to File, New notebook Python three,&nbsp;&nbsp;

01:53:46.080 --> 01:53:52.080 position:63% line:0%
we will have a new notebook. And as a better&nbsp;
coding practice, we will start with importing the&nbsp;&nbsp;

01:53:52.080 --> 01:53:56.840 position:63% line:0%
library that are required and then we'll create&nbsp;
functions that are acquired and then finally&nbsp;&nbsp;

01:53:56.840 --> 01:54:01.920 position:63% line:0%
will invoke those functions and we have got the&nbsp;
entire project set up in the Jupyter Notebook. So&nbsp;&nbsp;

01:54:01.920 --> 01:54:07.440 position:63% line:0%
this is the flow that we are going to follow while&nbsp;
creating the Jupyter Notebook. So the first one is&nbsp;&nbsp;

01:54:07.440 --> 01:54:12.480 position:63% line:0%
we are going to load all the packages that are&nbsp;
required for this project. So if you remember&nbsp;&nbsp;

01:54:12.480 --> 01:54:18.080 position:63% line:0%
from the previous videos that we need five&nbsp;
essential packages. The first one is spacey&nbsp;&nbsp;

01:54:18.080 --> 01:54:28.480 position:63% line:0%
for natural language processing, PDF miner for&nbsp;
PDF to text. re r e for rejects, works well as&nbsp;&nbsp;

01:54:28.480 --> 01:54:36.160 position:63% line:0%
operating system OAS for file manipulation and&nbsp;
then finally pandas for CSV tabular format.&nbsp;&nbsp;

01:54:37.920 --> 01:54:44.080 position:63% line:0%
So pandas for CSV tabular format, once this&nbsp;
is done, let us execute this thing. Next we&nbsp;&nbsp;

01:54:44.080 --> 01:54:51.840 position:63% line:0%
are going to input the file PDF to dot txt dot&nbsp;
p y. So next we are going to import PDF to text&nbsp;&nbsp;

01:54:52.480 --> 01:54:59.680 position:63% line:0%
dot p y. Next we are going to import PDF to&nbsp;
text dot p y that we just downloaded from the&nbsp;&nbsp;

01:54:59.680 --> 01:55:04.480 position:63% line:0%
Google tab repository that we have kept it in our&nbsp;
current working directory is a project folder. So&nbsp;&nbsp;

01:55:04.480 --> 01:55:09.040 position:63% line:0%
what we are going to do is we are going to simply&nbsp;
say import PDF to txt. And then we are going to&nbsp;&nbsp;

01:55:09.040 --> 01:55:14.880 position:63% line:0%
execute this, this is successfully executed,&nbsp;
which means we have got the file in the right&nbsp;&nbsp;

01:55:14.880 --> 01:55:22.000 position:63% line:0%
Drive folder location. So the next task is the&nbsp;
first function that we are going to create is&nbsp;&nbsp;

01:55:22.800 --> 01:55:32.080 position:63% line:0%
for converting PDF to txt, and we'll call&nbsp;
this function convert underscore PDF. So this&nbsp;&nbsp;

01:55:32.080 --> 01:55:38.080 position:63% line:0%
function is going to take one argument. So this&nbsp;
function is going to take one argument, which is&nbsp;&nbsp;

01:55:38.080 --> 01:55:43.120 position:63% line:0%
the file name. So the file name is going to be&nbsp;
given inside this function, and then we'll see&nbsp;&nbsp;

01:55:43.120 --> 01:55:47.760 position:63% line:0%
what is this function is going to do. So the first&nbsp;
thing is once we get the file name that is passed&nbsp;&nbsp;

01:55:47.760 --> 01:55:56.240 position:63% line:0%
into this function, we are going to say okay,&nbsp;
split the file name, and then had dot txt. So,&nbsp;&nbsp;

01:55:56.960 --> 01:56:03.520 position:63% line:0%
imagine you have got a file name, let us&nbsp;
say, okay, observe Majid, which is my name,&nbsp;&nbsp;

01:56:04.080 --> 01:56:08.880 position:63% line:0%
and PDF, this is our typical resume might look&nbsp;
like. So what we are trying to do is we are trying&nbsp;&nbsp;

01:56:08.880 --> 01:56:16.400 position:63% line:0%
to create the output file name. So because when&nbsp;
we are going to convert the PDF into text, we also&nbsp;&nbsp;

01:56:16.400 --> 01:56:22.240 position:63% line:0%
want to save the text in the folder that we just&nbsp;
saw. So what we want to do is we want to create&nbsp;&nbsp;

01:56:22.240 --> 01:56:27.360 position:63% line:0%
an output file name using this input file name.&nbsp;
So when we use always dot path dot split text&nbsp;&nbsp;

01:56:27.360 --> 01:56:33.280 position:63% line:0%
on the input file name, what we get is we get two&nbsp;
items just like this. So we get two items. So what&nbsp;&nbsp;

01:56:33.280 --> 01:56:39.040 position:63% line:0%
we are trying to do is we are going to take the&nbsp;
first one because Python is zero index language,&nbsp;&nbsp;

01:56:39.040 --> 01:56:42.720 position:63% line:0%
we are going to take the first one like&nbsp;
this, and then we are saying okay plus text,&nbsp;&nbsp;

01:56:44.080 --> 01:56:49.280 position:63% line:0%
which uses the new output file name for the&nbsp;
text file, and then we are assigning this name&nbsp;&nbsp;

01:56:49.280 --> 01:56:55.680 position:63% line:0%
to the output file name. So understand that we&nbsp;
got the input file name like this, a PDF file,&nbsp;&nbsp;

01:56:55.680 --> 01:57:00.080 position:63% line:0%
and we are trying to remove that extension&nbsp;
dot PDF. And then we are trying to append this&nbsp;&nbsp;

01:57:00.080 --> 01:57:07.520 position:63% line:0%
new expression that is dot txt. And then this new&nbsp;
extension dot txt is appended to this filename,&nbsp;&nbsp;

01:57:07.520 --> 01:57:14.320 position:63% line:0%
and then this name is getting assigned to this&nbsp;
output underscore file name. Once this is done,&nbsp;&nbsp;

01:57:14.320 --> 01:57:20.080 position:63% line:0%
we also have to define where do we want&nbsp;
to save this file. So as we saw just now,&nbsp;&nbsp;

01:57:20.080 --> 01:57:24.560 position:63% line:0%
in the folder structure that we are going to have&nbsp;
an output folder. And inside that output folder,&nbsp;&nbsp;

01:57:24.560 --> 01:57:30.080 position:63% line:0%
we are going to have all the txt files. So what&nbsp;
we are going to write here is we are saying Okay,&nbsp;&nbsp;

01:57:31.200 --> 01:57:38.160 position:63% line:0%
give me the path, which is output slash txt&nbsp;
slash and then this output file name that we&nbsp;&nbsp;

01:57:38.160 --> 01:57:43.680 position:63% line:0%
just created. So our output file is going to be&nbsp;
saved in this file path where it is output slash&nbsp;&nbsp;

01:57:43.680 --> 01:57:49.920 position:63% line:0%
txt slash, and then the file name output file&nbsp;
name with dot txt extension. So this one,&nbsp;&nbsp;

01:57:49.920 --> 01:57:57.920 position:63% line:0%
we are going to assign it in output underscore&nbsp;
file path. The next thing is the PDF to txt that&nbsp;&nbsp;

01:57:57.920 --> 01:58:03.120 position:63% line:0%
we just imported, it has a main function,&nbsp;
and then it takes a couple of arguments.&nbsp;&nbsp;

01:58:03.120 --> 01:58:07.280 position:63% line:0%
So what we want to do is we want to save this&nbsp;
file in that particular location. So we are&nbsp;&nbsp;

01:58:07.280 --> 01:58:12.560 position:63% line:0%
going to say okay, the arguments that I'm passing&nbsp;
is the file name, which I just received, and then&nbsp;&nbsp;

01:58:13.360 --> 01:58:19.120 position:63% line:0%
the output file name, which is passed down with&nbsp;
this argument, hyphen, hyphen, outfile, and then&nbsp;&nbsp;

01:58:19.120 --> 01:58:25.440 position:63% line:0%
the output file path where it has to be saved. So,&nbsp;
this is the function that helps us converting PDF&nbsp;&nbsp;

01:58:25.440 --> 01:58:33.360 position:63% line:0%
to text and save it in the given location, which&nbsp;
is what we create here. So, the output location is&nbsp;&nbsp;

01:58:33.360 --> 01:58:39.040 position:63% line:0%
created here, output file name is created here. So&nbsp;
the input file, which is the dot PDF file is given&nbsp;&nbsp;

01:58:39.040 --> 01:58:44.560 position:63% line:0%
through this F and then the output file is saved.&nbsp;
Once that is done, we would like to present a&nbsp;&nbsp;

01:58:44.560 --> 01:58:48.800 position:63% line:0%
message to the user saying that the file has been&nbsp;
successfully saved this is just for reference.&nbsp;&nbsp;

01:58:49.440 --> 01:58:54.560 position:63% line:0%
And finally, we are going to return the&nbsp;
output file path and then we are reading&nbsp;&nbsp;

01:58:54.560 --> 01:59:00.880 position:63% line:0%
it as an input file. So what we are doing&nbsp;
is in the same function, we are outputting,&nbsp;&nbsp;

01:59:01.600 --> 01:59:08.960 position:63% line:0%
the read file so that is why we have got open the&nbsp;
file name and then dot read which is a function&nbsp;&nbsp;

01:59:08.960 --> 01:59:14.000 position:63% line:0%
to read any file in Python. So ideally, we&nbsp;
could have done it in two lines to say okay,&nbsp;&nbsp;

01:59:14.000 --> 01:59:19.760 position:63% line:0%
I'm reading the file, and then I'm passing&nbsp;
that read object the file object as returning,&nbsp;&nbsp;

01:59:19.760 --> 01:59:24.880 position:63% line:0%
but in to save space and also for simplicity,&nbsp;
which is one of the core philosophies of Python&nbsp;&nbsp;

01:59:24.880 --> 01:59:30.000 position:63% line:0%
to have simple code, what we are trying to do is&nbsp;
we are trying to do it in same line. So the file&nbsp;&nbsp;

01:59:30.000 --> 01:59:34.640 position:63% line:0%
path which we are reading after opening,&nbsp;
so, this is what we are going to return.&nbsp;&nbsp;

01:59:35.360 --> 01:59:40.320 position:63% line:0%
So, in this function convert underscore PDF, there&nbsp;
are five things that we are doing the first thing&nbsp;&nbsp;

01:59:40.320 --> 01:59:44.640 position:63% line:0%
is we are creating the output file name. Second&nbsp;
thing is we are creating the output file path.&nbsp;&nbsp;

01:59:44.640 --> 01:59:49.200 position:63% line:0%
And then the third thing is we are converting PDF&nbsp;
to txt and saving it in the given location which&nbsp;&nbsp;

01:59:49.200 --> 01:59:54.640 position:63% line:0%
is the output file path. Then we are printing&nbsp;
a user message to say that this is successfully&nbsp;&nbsp;

01:59:54.640 --> 02:00:01.440 position:63% line:0%
done and then finally we are returning the read&nbsp;
file opened and read file with To be just saved&nbsp;&nbsp;

02:00:01.440 --> 02:00:06.560 position:63% line:0%
and then with this, this function is done, let us&nbsp;
execute this function. And this is just for sample&nbsp;&nbsp;

02:00:06.560 --> 02:00:13.600 position:63% line:0%
we don't need I'll delete this cell. Once this is&nbsp;
done, now we are going to use spacey to load the&nbsp;&nbsp;

02:00:13.600 --> 02:00:20.160 position:63% line:0%
language model. So let us load the language model&nbsp;
in this line which we just saw, load the language&nbsp;&nbsp;

02:00:20.160 --> 02:00:28.240 position:63% line:0%
model. Once we have the language model, we are&nbsp;
going to create an output file structure. So&nbsp;&nbsp;

02:00:28.240 --> 02:00:34.720 position:63% line:0%
we saw that the ultimate objective of this&nbsp;
project is to capture four important content&nbsp;&nbsp;

02:00:34.720 --> 02:00:39.840 position:63% line:0%
four important components from the resume and&nbsp;
then make it a structured document which is name,&nbsp;&nbsp;

02:00:40.400 --> 02:00:46.640 position:63% line:0%
phone, email skills, and then these are going to&nbsp;
be the four columns that we have in our output&nbsp;&nbsp;

02:00:46.640 --> 02:00:53.040 position:63% line:0%
tabular format. And for that, we are creating a&nbsp;
dictionary a Python dictionary using the curly&nbsp;&nbsp;

02:00:53.040 --> 02:00:59.920 position:63% line:0%
braces. So if you remember your basics of Python,&nbsp;
a Python dictionary is created using curly braces,&nbsp;&nbsp;

02:00:59.920 --> 02:01:04.880 position:63% line:0%
a Python list is created using your square&nbsp;
brackets. So, what we are trying to do is we are&nbsp;&nbsp;

02:01:04.880 --> 02:01:12.720 position:63% line:0%
trying to create a result dictionary and then we&nbsp;
are also creating four placeholder values names,&nbsp;&nbsp;

02:01:12.720 --> 02:01:18.880 position:63% line:0%
phones, emails skills, and then we are making it a&nbsp;
list so that when we extract these information, we&nbsp;&nbsp;

02:01:18.880 --> 02:01:24.800 position:63% line:0%
can put that particular component the respective&nbsp;
component for example, let us assume that we have&nbsp;&nbsp;

02:01:24.800 --> 02:01:29.600 position:63% line:0%
extracted name from the first resume a secondary&nbsp;
email address, so we have three names, and those&nbsp;&nbsp;

02:01:29.600 --> 02:01:34.400 position:63% line:0%
three names will go into the placeholder list that&nbsp;
we have created names, the phone numbers will go&nbsp;&nbsp;

02:01:34.400 --> 02:01:40.880 position:63% line:0%
into phones, the email ids will go into emails&nbsp;
and then the skills will go into skills. So, with&nbsp;&nbsp;

02:01:40.880 --> 02:01:47.600 position:63% line:0%
this, we are ready with the placeholder the type&nbsp;
of output that we would like to have Once this is&nbsp;&nbsp;

02:01:47.600 --> 02:01:54.160 position:63% line:0%
done, we are getting into the core function which&nbsp;
is going to extract the content from the resuming.&nbsp;&nbsp;

02:01:54.160 --> 02:02:00.320 position:63% line:0%
So with the placeholder output now, we are moving&nbsp;
forward to see how to define the function that&nbsp;&nbsp;

02:02:00.320 --> 02:02:05.520 position:63% line:0%
will do the extraction the core for component&nbsp;
extraction for this particular project. Now&nbsp;&nbsp;

02:02:05.520 --> 02:02:11.680 position:63% line:0%
that we have got the output placeholder in place,&nbsp;
which is a dictionary and then couple of lists to&nbsp;&nbsp;

02:02:11.680 --> 02:02:17.840 position:63% line:0%
put the content inside it extracted content inside&nbsp;
it, we are moving forward to do the actual core&nbsp;&nbsp;

02:02:18.720 --> 02:02:23.680 position:63% line:0%
component extraction part of this particular&nbsp;
project. And this function will call it as&nbsp;&nbsp;

02:02:23.680 --> 02:02:29.280 position:63% line:0%
parse underscore content, which is to parse&nbsp;
the content that we have, and the argument is&nbsp;&nbsp;

02:02:29.280 --> 02:02:35.680 position:63% line:0%
text. So this function receives text, if you&nbsp;
remember, what we returned from this function is&nbsp;&nbsp;

02:02:36.320 --> 02:02:43.040 position:63% line:0%
the Convert PDF function is we opened the file&nbsp;
and then we read it, which is a file object&nbsp;&nbsp;

02:02:43.040 --> 02:02:47.680 position:63% line:0%
and then in this function, we are going to read a&nbsp;
text. So that is how we are interlinking those two&nbsp;&nbsp;

02:02:47.680 --> 02:02:53.360 position:63% line:0%
functions, and we'll see it in the future. So, the&nbsp;
first thing that is required for us is to define&nbsp;&nbsp;

02:02:53.360 --> 02:02:59.600 position:63% line:0%
what skill set that we are expecting to extract&nbsp;
from this project. So extract from the resume.&nbsp;&nbsp;

02:02:59.600 --> 02:03:04.880 position:63% line:0%
So, the first thing that we have to define is what&nbsp;
are the set of skills the skill set that we would&nbsp;&nbsp;

02:03:04.880 --> 02:03:11.520 position:63% line:0%
like to extract from the resuming. So, considering&nbsp;
a data science setup, what we are trying to do is&nbsp;&nbsp;

02:03:11.520 --> 02:03:16.240 position:63% line:0%
we are trying to see okay, I want Python and if&nbsp;
you remember your rejects, you might remember&nbsp;&nbsp;

02:03:16.240 --> 02:03:24.480 position:63% line:0%
that a pipe operator signifies or condition, so&nbsp;
Python or Java or SQL or Hadoop or tableau. So,&nbsp;&nbsp;

02:03:24.480 --> 02:03:30.160 position:63% line:0%
these are the five things that we are trying to&nbsp;
extract as skills from a particular resume and we&nbsp;&nbsp;

02:03:30.160 --> 02:03:34.400 position:63% line:0%
are trying to see whether this particular resume&nbsp;
has any of these things or all of these things.&nbsp;&nbsp;

02:03:35.280 --> 02:03:39.360 position:63% line:0%
The next thing is phone number. So, what&nbsp;
we are trying to do is we are trying to&nbsp;&nbsp;

02:03:40.080 --> 02:03:47.840 position:63% line:0%
create projects, that projects should be able to&nbsp;
capture phone number and this phone number rejects&nbsp;&nbsp;

02:03:47.840 --> 02:03:53.120 position:63% line:0%
has been extracted from this StackOverflow&nbsp;
answer. So, I would like to give credit to that&nbsp;&nbsp;

02:03:53.120 --> 02:03:59.520 position:63% line:0%
answer that has created a regex that can handle&nbsp;
multiple different types of phone numbers. So,&nbsp;&nbsp;

02:04:00.560 --> 02:04:06.560 position:63% line:0%
we saw we want this a skill set. So we are&nbsp;
compiling this expression and then saving it&nbsp;&nbsp;

02:04:06.560 --> 02:04:11.840 position:63% line:0%
in skill set and this is the regex to capture&nbsp;
the phone number and then we are compiling it&nbsp;&nbsp;

02:04:11.840 --> 02:04:19.680 position:63% line:0%
and saving it in for now. And then what we are&nbsp;
trying to do is we are trying to take the text&nbsp;&nbsp;

02:04:19.680 --> 02:04:26.160 position:63% line:0%
that we just got inside this function and then we&nbsp;
are trying to do annotation. So if you remember&nbsp;&nbsp;

02:04:26.160 --> 02:04:31.680 position:63% line:0%
the basics of spacey video The first thing that&nbsp;
we have to do is annotation. Once that is done&nbsp;&nbsp;

02:04:32.400 --> 02:04:40.640 position:63% line:0%
what we are trying to do is we are trying to&nbsp;
extract two entities from the annotated the past&nbsp;&nbsp;

02:04:40.640 --> 02:04:46.080 position:63% line:0%
are the natural language processing text. So the&nbsp;
text on which the natural language processing has&nbsp;&nbsp;

02:04:46.080 --> 02:04:53.040 position:63% line:0%
been done on the text is nothing but the resume&nbsp;
content okay. So from the past content or from&nbsp;&nbsp;

02:04:53.040 --> 02:04:58.640 position:63% line:0%
the extracted text content, now we are trying to&nbsp;
do two things. The first thing is extract name.&nbsp;&nbsp;

02:04:58.640 --> 02:05:04.560 position:63% line:0%
The second thing is E So, totally we want four&nbsp;
components, which is name, email, phone number&nbsp;&nbsp;

02:05:04.560 --> 02:05:09.920 position:63% line:0%
and skill set. And we just saw creating regular&nbsp;
expressions for skill set and phone number.&nbsp;&nbsp;

02:05:09.920 --> 02:05:15.120 position:63% line:0%
And now we are trying to extract name and email id&nbsp;
and to start with the name what we are trying to&nbsp;&nbsp;

02:05:15.120 --> 02:05:21.360 position:63% line:0%
do is entity any named entity recognition has&nbsp;
one particular level which is called a person&nbsp;&nbsp;

02:05:21.360 --> 02:05:27.440 position:63% line:0%
that signifies the name of a person. So, what&nbsp;
we are trying to do is we are trying to do&nbsp;&nbsp;

02:05:28.640 --> 02:05:36.880 position:63% line:0%
if the entity label is person, then give me the&nbsp;
entity text and assign it in name. So, this in&nbsp;&nbsp;

02:05:36.880 --> 02:05:41.360 position:63% line:0%
Python is called a list comprehension, which&nbsp;
means, instead of writing a for loop in multiple&nbsp;&nbsp;

02:05:41.360 --> 02:05:45.760 position:63% line:0%
steps, you can write it in a single step. So, what&nbsp;
we are doing is we are doing a list comprehension&nbsp;&nbsp;

02:05:45.760 --> 02:05:51.520 position:63% line:0%
and then we are saying okay, whenever the&nbsp;
entity recognized entity, post label is person,&nbsp;&nbsp;

02:05:52.160 --> 02:05:58.400 position:63% line:0%
then give me that entity text. And then we are&nbsp;
saying okay, what if a resume has multiple names,&nbsp;&nbsp;

02:05:58.400 --> 02:06:03.760 position:63% line:0%
for example, first, the name of the person would&nbsp;
be on the top of the resume, probably their dad's&nbsp;&nbsp;

02:06:03.760 --> 02:06:08.480 position:63% line:0%
name and mom's name is there. So for that,&nbsp;
with that assumption that the person's name is&nbsp;&nbsp;

02:06:08.480 --> 02:06:13.360 position:63% line:0%
always on top of the resume, you're saying you&nbsp;
mean the first name that you detect. So we are&nbsp;&nbsp;

02:06:13.360 --> 02:06:18.800 position:63% line:0%
trying to take the first name that is detected&nbsp;
in the resume and then as any to name. Next,&nbsp;&nbsp;

02:06:18.800 --> 02:06:24.080 position:63% line:0%
we are also printing the name for us to have some&nbsp;
reference whose resume may have passed. Next is&nbsp;&nbsp;

02:06:24.080 --> 02:06:29.840 position:63% line:0%
we are trying to do email id extraction. So what&nbsp;
we are trying to do is we are trying to say okay,&nbsp;&nbsp;

02:06:30.560 --> 02:06:37.280 position:63% line:0%
for every word, the tokenized word in the&nbsp;
document. If the word is like email show&nbsp;&nbsp;

02:06:37.280 --> 02:06:44.400 position:63% line:0%
spacey has such an attribute, like underscore&nbsp;
email, if this word like underscore email,&nbsp;&nbsp;

02:06:44.400 --> 02:06:50.960 position:63% line:0%
which is returning a boolean value, either true&nbsp;
or false. If it is true, then give me the word.&nbsp;&nbsp;

02:06:50.960 --> 02:06:55.520 position:63% line:0%
And I'm telling, okay, give me the first word,&nbsp;
there will be multiple email ids. But I don't&nbsp;&nbsp;

02:06:55.520 --> 02:06:59.920 position:63% line:0%
care about the second and third email id, at least&nbsp;
for this particular project. So what I'm saying is&nbsp;&nbsp;

02:06:59.920 --> 02:07:05.920 position:63% line:0%
okay, give me the first email id and then store&nbsp;
it in email, and then print the email id again,&nbsp;&nbsp;

02:07:05.920 --> 02:07:11.200 position:63% line:0%
for a reference. Now that we have built the&nbsp;
regular expression for skill set and phone number,&nbsp;&nbsp;

02:07:11.200 --> 02:07:16.160 position:63% line:0%
it is time for us to use the expression&nbsp;
that we have compiled and then extract.&nbsp;&nbsp;

02:07:16.160 --> 02:07:21.040 position:63% line:0%
So there is one thing that we have to notice, we&nbsp;
are trying to convert the text enter text into&nbsp;&nbsp;

02:07:21.040 --> 02:07:26.160 position:63% line:0%
a lowercase before even proceeding further with&nbsp;
the regular expression. This is to solve the case&nbsp;&nbsp;

02:07:26.160 --> 02:07:30.640 position:63% line:0%
issue. So it could be like for example, let's say&nbsp;
this is Python, someone could have written Python&nbsp;&nbsp;

02:07:30.640 --> 02:07:36.960 position:63% line:0%
as capital P y to H and someone could have&nbsp;
written SQL as SQL capital or small letter&nbsp;&nbsp;

02:07:36.960 --> 02:07:42.320 position:63% line:0%
Java could be with J capital. So to solve this,&nbsp;
all these issues, we are normalizing all the texts&nbsp;&nbsp;

02:07:42.320 --> 02:07:46.720 position:63% line:0%
or downgrading all the text to a lower&nbsp;
case. And then we are saying okay,&nbsp;&nbsp;

02:07:46.720 --> 02:07:52.240 position:63% line:0%
rejects find all where you have phone number&nbsp;
pattern, and then the string on which you have&nbsp;&nbsp;

02:07:52.240 --> 02:07:58.720 position:63% line:0%
to find this text, which is what the argument that&nbsp;
we got. And then after converting into lowercase,&nbsp;&nbsp;

02:07:58.720 --> 02:08:05.920 position:63% line:0%
and then we are assigning the output to form after&nbsp;
converting it into a string object. So, simply&nbsp;&nbsp;

02:08:05.920 --> 02:08:10.480 position:63% line:0%
we have the text, we are converting into a&nbsp;
lower text, the text is the resume matrix,&nbsp;&nbsp;

02:08:10.480 --> 02:08:16.320 position:63% line:0%
we are converting everything into lowercase. And&nbsp;
then we are trying to find all everywhere in this&nbsp;&nbsp;

02:08:16.320 --> 02:08:22.560 position:63% line:0%
resume with this regular expression. And then&nbsp;
we are converting that result into a string and&nbsp;&nbsp;

02:08:22.560 --> 02:08:27.280 position:63% line:0%
then as entering into a foreign object. And then&nbsp;
the same thing that we are trying to do here is&nbsp;&nbsp;

02:08:27.840 --> 02:08:34.240 position:63% line:0%
find all the skill set text lower, and then assign&nbsp;
it to a skills underscore list because we will&nbsp;&nbsp;

02:08:34.240 --> 02:08:38.800 position:63% line:0%
have multiple skills one resume could have Python&nbsp;
and Java both. So that is why we are calling it as&nbsp;&nbsp;

02:08:38.800 --> 02:08:44.560 position:63% line:0%
skills underscore list. Also, one thing that&nbsp;
we have to notice in one particular resume,&nbsp;&nbsp;

02:08:44.560 --> 02:08:49.680 position:63% line:0%
we could have multiple instances of Python and&nbsp;
Java. For example, let us assume in the technical&nbsp;&nbsp;

02:08:49.680 --> 02:08:54.480 position:63% line:0%
skill section, someone has mentioned Python, but&nbsp;
also while describing the project, they might have&nbsp;&nbsp;

02:08:54.480 --> 02:08:59.120 position:63% line:0%
used the word Python. So what we would end up&nbsp;
getting here is in the skills underscore list,&nbsp;&nbsp;

02:08:59.120 --> 02:09:03.200 position:63% line:0%
we would end up getting Python two times&nbsp;
and we don't want to record Python two times&nbsp;&nbsp;

02:09:03.200 --> 02:09:06.720 position:63% line:0%
for that matter, because we want to see&nbsp;
whether Python is present or not present.&nbsp;&nbsp;

02:09:07.360 --> 02:09:12.320 position:63% line:0%
So, what we are trying to do is we are trying to&nbsp;
say okay, converted to a dictionary, which means&nbsp;&nbsp;

02:09:12.320 --> 02:09:16.560 position:63% line:0%
of course, it will have only unique&nbsp;
elements. And then we are converting&nbsp;&nbsp;

02:09:16.560 --> 02:09:22.160 position:63% line:0%
that into a string and then assigning it to&nbsp;
unique underscore skills underscore list. So,&nbsp;&nbsp;

02:09:23.120 --> 02:09:27.680 position:63% line:0%
in this entire section, we have defined the&nbsp;
regular expression for skill set and for number&nbsp;&nbsp;

02:09:28.240 --> 02:09:33.040 position:63% line:0%
we have used spacey for annotation and then we&nbsp;
have used the annotated text to extract a Persian&nbsp;&nbsp;

02:09:33.040 --> 02:09:38.400 position:63% line:0%
and then as Enter to name to see whether there&nbsp;
is anything like email then as Enter to email&nbsp;&nbsp;

02:09:38.400 --> 02:09:43.840 position:63% line:0%
and then we have used phone number and skill set&nbsp;
regular expression that we just compiled to find&nbsp;&nbsp;

02:09:43.840 --> 02:09:50.240 position:63% line:0%
everywhere where we have got and then we have got&nbsp;
the skills and unique skills. So right now, after&nbsp;&nbsp;

02:09:50.240 --> 02:09:56.320 position:63% line:0%
this, what we are trying to do is we are trying&nbsp;
to append these names in the placeholder list&nbsp;&nbsp;

02:09:56.320 --> 02:10:01.280 position:63% line:0%
that we just created. So these are the four empty&nbsp;
placeholder lists. recreated, so we are trying to&nbsp;&nbsp;

02:10:01.280 --> 02:10:06.880 position:63% line:0%
append all these that we just extracted in those&nbsp;
lists. And then finally, we are trying to print a&nbsp;&nbsp;

02:10:06.880 --> 02:10:13.200 position:63% line:0%
message or message to the user to say, extraction&nbsp;
has been completed successfully. So for a small&nbsp;&nbsp;

02:10:13.200 --> 02:10:17.680 position:63% line:0%
summary, this is the function, the core function&nbsp;
where we are extracting the four components,&nbsp;&nbsp;

02:10:18.480 --> 02:10:23.360 position:63% line:0%
it takes one argument, which is the text of&nbsp;
the resume. And then initially we are compiling&nbsp;&nbsp;

02:10:23.360 --> 02:10:28.720 position:63% line:0%
the regular expression for skill set and phone&nbsp;
number. Next, we are annotating the text document&nbsp;&nbsp;

02:10:28.720 --> 02:10:33.840 position:63% line:0%
using natural language processing of spacey,&nbsp;
and then we are extracting name, and then we&nbsp;&nbsp;

02:10:33.840 --> 02:10:39.440 position:63% line:0%
are extracting email, and then we are extracting&nbsp;
phone number and then we are extracting skills,&nbsp;&nbsp;

02:10:39.440 --> 02:10:43.600 position:63% line:0%
and then making unique skills out of it.&nbsp;
And then we are appending all those values&nbsp;&nbsp;

02:10:43.600 --> 02:10:47.680 position:63% line:0%
in the placeholder list that we created in the&nbsp;
previous cell. And then finally printing our user&nbsp;&nbsp;

02:10:47.680 --> 02:10:53.040 position:63% line:0%
message to say extraction has been completed.&nbsp;
So let us execute this thing and it has been&nbsp;&nbsp;

02:10:53.040 --> 02:10:58.160 position:63% line:0%
successfully executed. In the next line, what we&nbsp;
are trying to do is we are trying to say okay,&nbsp;&nbsp;

02:10:59.120 --> 02:11:05.040 position:63% line:0%
now I've got two main functions, one to convert&nbsp;
all the PDF to text. And also, you know,&nbsp;&nbsp;

02:11:05.040 --> 02:11:11.040 position:63% line:0%
meanwhile, save that txt file in the particular&nbsp;
folder. Second, use the text content and extract&nbsp;&nbsp;

02:11:11.040 --> 02:11:17.520 position:63% line:0%
whatever I wanted the four components name,&nbsp;
phone number, email id skills. And with this set,&nbsp;&nbsp;

02:11:17.520 --> 02:11:23.120 position:63% line:0%
now what I have to do is, I have to make this&nbsp;
project work on multiple files rather than&nbsp;&nbsp;

02:11:23.120 --> 02:11:28.080 position:63% line:0%
only one PDF file. So that center objective of&nbsp;
doing an automated bulk resume a parser, right,&nbsp;&nbsp;

02:11:28.080 --> 02:11:33.920 position:63% line:0%
so you don't really want to use a code just to&nbsp;
pass one Li one resume because a human being Of&nbsp;&nbsp;

02:11:33.920 --> 02:11:37.760 position:63% line:0%
course, could be better in passing one resume,&nbsp;
but assume that you are a manager and then you&nbsp;&nbsp;

02:11:37.760 --> 02:11:44.480 position:63% line:0%
have got 100 resumes or 200 resumes or 50 resumes.&nbsp;
And this is the case, we want to have an automated&nbsp;&nbsp;

02:11:44.480 --> 02:11:49.120 position:63% line:0%
resume a parser bulk resume a parser and that&nbsp;
is exactly what we are trying to do here. So&nbsp;&nbsp;

02:11:49.120 --> 02:11:54.640 position:63% line:0%
what we are trying to do here is we are trying to&nbsp;
list down all the files inside the folder resume.&nbsp;&nbsp;

02:11:55.200 --> 02:12:00.080 position:63% line:0%
As we just saw, we have three files.&nbsp;
Inside resume, we have three resume files,&nbsp;&nbsp;

02:12:00.640 --> 02:12:06.000 position:63% line:0%
and then we are saying okay, lists down all the&nbsp;
files and iterate through each of the file calling&nbsp;&nbsp;

02:12:06.000 --> 02:12:12.160 position:63% line:0%
it has file. So we will take individual resumes,&nbsp;
and we are calling it file. And then we are trying&nbsp;&nbsp;

02:12:12.160 --> 02:12:18.000 position:63% line:0%
to just validate whether the file name ends with&nbsp;
dot PDF. So in the same folder, you could have,&nbsp;&nbsp;

02:12:18.000 --> 02:12:24.640 position:63% line:0%
let's say, forgotten to convert a docx file into&nbsp;
PDF. So what we are trying to do is we are trying&nbsp;&nbsp;

02:12:24.640 --> 02:12:29.440 position:63% line:0%
to add an extra layer of validation to say, Okay,&nbsp;
I want only PDF, because right now this code is&nbsp;&nbsp;

02:12:29.440 --> 02:12:34.320 position:63% line:0%
built only to function with PDF. And if you have&nbsp;
got a docx, you have to manually convert a docx&nbsp;&nbsp;

02:12:35.200 --> 02:12:42.160 position:63% line:0%
to a PDF or you can find a lot of script online to&nbsp;
convert docx to PDF. So we are saying okay, if the&nbsp;&nbsp;

02:12:42.160 --> 02:12:48.240 position:63% line:0%
file name ends with the dot PDF, then first print&nbsp;
the user message that we are reading the file&nbsp;&nbsp;

02:12:48.240 --> 02:12:53.520 position:63% line:0%
and then read the file. Convert underscore PDF&nbsp;
is the function that the function that we just&nbsp;&nbsp;

02:12:53.520 --> 02:12:59.360 position:63% line:0%
created, invoking that and then the path where we&nbsp;
have all the files is this one. So the first file,&nbsp;&nbsp;

02:12:59.920 --> 02:13:03.600 position:63% line:0%
the first iteration, it will be the name of the&nbsp;
first file. In the second iteration, it will&nbsp;&nbsp;

02:13:03.600 --> 02:13:07.680 position:63% line:0%
be the name of the second file. And in the third&nbsp;
iteration, it will be the name of the third file.&nbsp;&nbsp;

02:13:07.680 --> 02:13:13.520 position:63% line:0%
And as we saw in this convert underscore PDF,&nbsp;
we are returning a file object, we opened the&nbsp;&nbsp;

02:13:13.520 --> 02:13:21.440 position:63% line:0%
file using the path and also we read it. So we&nbsp;
are assigning that output inside this object&nbsp;&nbsp;

02:13:21.440 --> 02:13:28.640 position:63% line:0%
called txt. And then now we are passing this txt&nbsp;
to the function that we just built here. So this&nbsp;&nbsp;

02:13:28.640 --> 02:13:36.000 position:63% line:0%
takes one text object as argument. So we are&nbsp;
passing that as the parameter here saying okay,&nbsp;&nbsp;

02:13:36.000 --> 02:13:43.040 position:63% line:0%
parse underscore content. txt, once we run this,&nbsp;
okay, first resume is read. Allison Parker's&nbsp;&nbsp;

02:13:43.040 --> 02:13:49.120 position:63% line:0%
resume is read. And then the output is saved&nbsp;
successfully. Allison Packers, right is the name,&nbsp;&nbsp;

02:13:49.120 --> 02:13:54.640 position:63% line:0%
email id. So these are all hypothetical names&nbsp;
that do not exist. So it's a disclaimer that&nbsp;&nbsp;

02:13:54.640 --> 02:14:00.560 position:63% line:0%
this is these are all hypothetical resumes, and do&nbsp;
not reflect to any living human being. So this is&nbsp;&nbsp;

02:14:00.560 --> 02:14:06.320 position:63% line:0%
the first resume PDF is red text to successfully&nbsp;
saved the exact same message that we printed here.&nbsp;&nbsp;

02:14:07.680 --> 02:14:13.680 position:63% line:0%
And then we have the name, which we also printed&nbsp;
here. And then we print the email ad, which is&nbsp;&nbsp;

02:14:13.680 --> 02:14:20.720 position:63% line:0%
here. And then we finally say extraction has been&nbsp;
successful. So this is first resume. Then this is&nbsp;&nbsp;

02:14:20.720 --> 02:14:28.960 position:63% line:0%
second resume, reading john domnick. saving it&nbsp;
as txt name, email id extraction completed. And&nbsp;&nbsp;

02:14:28.960 --> 02:14:35.600 position:63% line:0%
then finally, actually miles reading, saving it as&nbsp;
text extracting name, email ID, which is what we&nbsp;&nbsp;

02:14:35.600 --> 02:14:40.720 position:63% line:0%
printed, we didn't print phone number and skills&nbsp;
and then extraction complete successfully. So now&nbsp;&nbsp;

02:14:40.720 --> 02:14:45.600 position:63% line:0%
that we know that we have got three resumes, all&nbsp;
those three resumes have been successfully read,&nbsp;&nbsp;

02:14:45.600 --> 02:14:50.960 position:63% line:0%
what we are going to do is we are going to use&nbsp;
these placeholder values which is now populated&nbsp;&nbsp;

02:14:50.960 --> 02:14:58.400 position:63% line:0%
with all those names. So to give you some&nbsp;
perspective, names will have all the names phone&nbsp;&nbsp;

02:15:00.080 --> 02:15:06.160 position:63% line:0%
We'll have all the phone numbers, skills, we'll&nbsp;
have all the skills. And then of course, emails,&nbsp;&nbsp;

02:15:06.160 --> 02:15:12.080 position:63% line:0%
we'll have all the emails. Now that we have got&nbsp;
all the values of this placeholders populated. Now&nbsp;&nbsp;

02:15:12.080 --> 02:15:18.720 position:63% line:0%
we are going to say okay, assign these into these.&nbsp;
So this is a dictionary with it is a key value&nbsp;&nbsp;

02:15:18.720 --> 02:15:25.120 position:63% line:0%
pair, and this is the key and then we are going&nbsp;
to put this against the respective key as values.&nbsp;&nbsp;

02:15:25.120 --> 02:15:30.400 position:63% line:0%
So what we are doing here is we are saying,&nbsp;
okay, the value of this key should be names,&nbsp;&nbsp;

02:15:30.400 --> 02:15:35.840 position:63% line:0%
the value of key, this key should be phones. and&nbsp;
the value of this key email key should be emails.&nbsp;&nbsp;

02:15:35.840 --> 02:15:42.800 position:63% line:0%
And then finally skills, then to see how does it&nbsp;
look, let us execute this, then say result. And&nbsp;&nbsp;

02:15:42.800 --> 02:15:46.640 position:63% line:0%
that's good, which is the result dictionary. So&nbsp;
as you can see, the starts with a curly brace ends&nbsp;&nbsp;

02:15:46.640 --> 02:15:51.120 position:63% line:0%
with the curly brace, this is the key, and this is&nbsp;
all the values, this is the key, this is all the&nbsp;&nbsp;

02:15:51.120 --> 02:15:56.640 position:63% line:0%
values. So this is how a typical dictionary&nbsp;
in Python will look like. And then finally,&nbsp;&nbsp;

02:15:56.640 --> 02:16:04.000 position:63% line:0%
we have to convert into a tabular format, which we&nbsp;
will do using pandas DataFrame. So in this video,&nbsp;&nbsp;

02:16:04.000 --> 02:16:10.720 position:63% line:0%
we saw how to start with importing libraries&nbsp;
define two important functions. One is converting&nbsp;&nbsp;

02:16:10.720 --> 02:16:16.400 position:63% line:0%
PDF to text. The second one is the code the&nbsp;
main function, the it's like the engine of the&nbsp;&nbsp;

02:16:16.400 --> 02:16:21.120 position:63% line:0%
entire project, which is parsing the content and&nbsp;
extracting required components. And then finally&nbsp;&nbsp;

02:16:21.120 --> 02:16:27.760 position:63% line:0%
storing the required components into a Python&nbsp;
dictionary, which in the next video, we'll see how&nbsp;&nbsp;

02:16:27.760 --> 02:16:33.760 position:63% line:0%
to convert into a tabular format using pandas, and&nbsp;
also to save that CSV as an Excel file CSV file.&nbsp;&nbsp;

02:16:35.760 --> 02:16:42.880 position:63% line:0%
In this video, we'll see how to convert the&nbsp;
dictionary that we created into a tabular format&nbsp;&nbsp;

02:16:42.880 --> 02:16:49.359 position:63% line:0%
using pandas. And we will also see how to then&nbsp;
finally save this entire thing as a script to run&nbsp;&nbsp;

02:16:50.000 --> 02:16:57.120 position:63% line:0%
on a bulk, you know, set of files in a particular&nbsp;
folder. So to start with, this is where we left in&nbsp;&nbsp;

02:16:57.120 --> 02:17:00.960 position:63% line:0%
the previous video where we had created a result&nbsp;
underscore dict, which is a dictionary Python&nbsp;&nbsp;

02:17:00.960 --> 02:17:06.640 position:63% line:0%
dictionary, with all the essential content that we&nbsp;
just extracted from the three resumes that we had&nbsp;&nbsp;

02:17:06.640 --> 02:17:12.880 position:63% line:0%
got in the race image folder. So to move ahead&nbsp;
with, we are going to use pandas, which we just&nbsp;&nbsp;

02:17:12.880 --> 02:17:19.359 position:63% line:0%
imported at the start import pandas as PD is what&nbsp;
we used. pd is an alias. So we are going to use&nbsp;&nbsp;

02:17:19.359 --> 02:17:27.839 position:63% line:0%
that alias PD dot data frame. So the beauty of&nbsp;
pandas is that panda's data frame is nothing but&nbsp;&nbsp;

02:17:28.399 --> 02:17:34.960 position:63% line:0%
a Python dictionary internally. So it is easier&nbsp;
for us to convert result underscore date into a&nbsp;&nbsp;

02:17:34.960 --> 02:17:42.480 position:63% line:0%
data frame just by invoking this function called&nbsp;
Data Frame. From this lspd pd dot data frame.&nbsp;&nbsp;

02:17:43.120 --> 02:17:49.599 position:63% line:0%
We're framus the SS capital D and therefore&nbsp;
capital and pass result underscore dict&nbsp;&nbsp;

02:17:49.600 --> 02:17:53.920 position:63% line:0%
as any to result underscore df df stands for&nbsp;
data frame or you can give any name that you&nbsp;&nbsp;

02:17:53.920 --> 02:18:00.080 position:63% line:0%
would like to and then I'm printing df, which says&nbsp;
okay, this is my name. This is my phone number.&nbsp;&nbsp;

02:18:00.640 --> 02:18:05.920 position:63% line:0%
This is my email. And these are the skills that&nbsp;
I've got. So Alison has got it on Tableau and&nbsp;&nbsp;

02:18:05.920 --> 02:18:13.520 position:63% line:0%
Java. JOHN Dominic has got How do Python and Java&nbsp;
actually Myles has got SQL and tableau. And then&nbsp;&nbsp;

02:18:13.520 --> 02:18:20.960 position:63% line:0%
the next step is for us to save this entire thing&nbsp;
into a CSV file. As we saw in the previous video,&nbsp;&nbsp;

02:18:20.960 --> 02:18:26.560 position:63% line:0%
the folder structure that we've got, where&nbsp;
output has two folders subfolders. One is text,&nbsp;&nbsp;

02:18:26.560 --> 02:18:32.320 position:63% line:0%
which stores all the text files that are&nbsp;
converted from PDF, and in the CSV where&nbsp;&nbsp;

02:18:32.319 --> 02:18:38.240 position:63% line:0%
we have got the output CSV, we are going&nbsp;
to say okay, save the output CSV there.&nbsp;&nbsp;

02:18:38.240 --> 02:18:45.439 position:63% line:0%
And then we can go ahead and open the folder&nbsp;
and see that the output CSV is present here.&nbsp;&nbsp;

02:18:46.160 --> 02:18:51.680 position:63% line:0%
So until now, what we have seen is take the&nbsp;
dictionary convert into a tabular format,&nbsp;&nbsp;

02:18:51.680 --> 02:18:56.400 position:63% line:0%
which is a panda's data frame, and then&nbsp;
save that data frame into a CSV file.&nbsp;&nbsp;

02:18:57.359 --> 02:19:04.080 position:63% line:0%
But this Jupyter Notebook is good for us to&nbsp;
prototype. But now, the objective is, we have&nbsp;&nbsp;

02:19:04.080 --> 02:19:08.640 position:63% line:0%
a folder full of resumes. And then you know,&nbsp;
you want to give this to someone who cannot use&nbsp;&nbsp;

02:19:09.520 --> 02:19:15.201 position:63% line:0%
proper Python coding, and then they should be&nbsp;
able to convert all those PDFs into structured&nbsp;&nbsp;

02:19:15.200 --> 02:19:19.599 position:63% line:0%
content. And for that purpose, we are going&nbsp;
to convert this Jupyter Notebook into a Python&nbsp;&nbsp;

02:19:19.600 --> 02:19:25.920 position:63% line:0%
script and then use the Python script to convert&nbsp;
all those PDFs into text. So let us go ahead&nbsp;&nbsp;

02:19:25.920 --> 02:19:33.840 position:63% line:0%
and then open file, and then go to download as and&nbsp;
then do.py. This will give us the Python script.&nbsp;&nbsp;

02:19:34.399 --> 02:19:38.479 position:63% line:0%
But before we do that, we have to remove&nbsp;
those instances that are not required.&nbsp;&nbsp;

02:19:39.280 --> 02:19:44.319 position:63% line:0%
For example, we have a lot of places where&nbsp;
we have printed these things, which is&nbsp;&nbsp;

02:19:44.319 --> 02:19:49.599 position:63% line:0%
quite unnecessary. So we'll delete these cells.&nbsp;
You can use x To delete a cell, or probably&nbsp;&nbsp;

02:19:49.600 --> 02:19:59.121 position:63% line:0%
you can go here and then try and delete cell. So&nbsp;
I'll use x, delete, delete, delete, delete. Cool,&nbsp;&nbsp;

02:19:59.120 --> 02:20:06.640 position:63% line:0%
and then I'm going to Delete this dictionary. So&nbsp;
we are done with this as of now, and we can save&nbsp;&nbsp;

02:20:06.640 --> 02:20:12.480 position:63% line:0%
and checkpointed just for our reference,&nbsp;
then what we can do further is we can go&nbsp;&nbsp;

02:20:12.479 --> 02:20:19.359 position:63% line:0%
download Python read poi, so we'll save the file,&nbsp;
and then make sure that you have got the file&nbsp;&nbsp;

02:20:20.000 --> 02:20:26.720 position:63% line:0%
inside the folder, the current project folder. So&nbsp;
bring that file here, the current project folder,&nbsp;&nbsp;

02:20:26.720 --> 02:20:33.680 position:63% line:0%
where we have got all the files. So now,&nbsp;
you should have the folders that we defined&nbsp;&nbsp;

02:20:33.680 --> 02:20:38.880 position:63% line:0%
with the resume is with the input files, that&nbsp;
resume is with all the PDF regimens that we want&nbsp;&nbsp;

02:20:38.880 --> 02:20:45.840 position:63% line:0%
to be parsed. And then the output folder&nbsp;
with two subfolders, CSV and txt. txt.&nbsp;&nbsp;

02:20:46.479 --> 02:20:51.040 position:63% line:0%
And then also, the PDF to txt dot&nbsp;
p y should be inside this folder.&nbsp;&nbsp;

02:20:51.760 --> 02:20:57.840 position:63% line:0%
And this is the notebook that we just created&nbsp;
to create this entire project. And then finally,&nbsp;&nbsp;

02:20:58.399 --> 02:21:05.200 position:63% line:0%
the Python script of this Jupyter Notebook.&nbsp;
With this, we are good to go that we have got&nbsp;&nbsp;

02:21:05.200 --> 02:21:11.280 position:63% line:0%
resume underscore passing with this script will&nbsp;
use this script on command level as a CLA tool&nbsp;&nbsp;

02:21:11.280 --> 02:21:17.840 position:63% line:0%
to automate this entire process of converting PDFs&nbsp;
into a structured format of valuable content. But&nbsp;&nbsp;

02:21:17.840 --> 02:21:24.800 position:63% line:0%
before we do that, let us go ahead and then delete&nbsp;
these things because these were created when we&nbsp;&nbsp;

02:21:24.800 --> 02:21:29.920 position:63% line:0%
ran this particular code in the Jupyter Notebook.&nbsp;
But to make sure that the project is successful,&nbsp;&nbsp;

02:21:29.920 --> 02:21:33.680 position:63% line:0%
we'll delete this. And also we'll delete&nbsp;
the output file, we have got an output file,&nbsp;&nbsp;

02:21:33.680 --> 02:21:39.920 position:63% line:0%
we'll delete this output file also. So right now,&nbsp;
let us just validate, we have got three resumes,&nbsp;&nbsp;

02:21:39.920 --> 02:21:46.240 position:63% line:0%
Alison Parker, Ashley Mays, Dominic, john Dominic.&nbsp;
And in fact, you can notice that this is all three&nbsp;&nbsp;

02:21:46.240 --> 02:21:53.280 position:63% line:0%
different formats. This is a double column, this&nbsp;
is a single page resume. So we have got different&nbsp;&nbsp;

02:21:53.280 --> 02:21:58.559 position:63% line:0%
resume formats. And then output does not have&nbsp;
anything, output is empty with two subfolders,&nbsp;&nbsp;

02:21:58.560 --> 02:22:06.241 position:63% line:0%
empty subfolders. And then we are all set to test&nbsp;
our script on this the resumes folder. To see&nbsp;&nbsp;

02:22:06.240 --> 02:22:10.399 position:63% line:0%
the code that we just have created using the&nbsp;
Jupyter Notebook the Python script that we just&nbsp;&nbsp;

02:22:10.399 --> 02:22:15.920 position:63% line:0%
downloaded from the Jupyter Notebook, it could&nbsp;
be used for automation, so open the terminal. Or&nbsp;&nbsp;

02:22:15.920 --> 02:22:22.160 position:63% line:0%
if you are using Windows, please open your command&nbsp;
prompt. And then make sure that you are inside the&nbsp;&nbsp;

02:22:22.160 --> 02:22:28.880 position:63% line:0%
project folder. So my project folder name is&nbsp;
resuming parsing, I can use LS to check Okay,&nbsp;&nbsp;

02:22:29.520 --> 02:22:36.560 position:63% line:0%
or if you are using Windows, check the command&nbsp;
to see where you have got your current folder. So&nbsp;&nbsp;

02:22:36.560 --> 02:22:41.600 position:63% line:0%
you can see that this is my current folder. And&nbsp;
then it shows that I've got this file regime&nbsp;&nbsp;

02:22:41.600 --> 02:22:48.960 position:63% line:0%
underscore parsing in place. They've also got the&nbsp;
folders like output resumes, and the main PDF to&nbsp;&nbsp;

02:22:48.960 --> 02:22:57.840 position:63% line:0%
txt dot p file. So with this, what we can do is&nbsp;
we can say resume a underscore parsing dot p y&nbsp;&nbsp;

02:22:57.840 --> 02:23:05.760 position:63% line:0%
but before we do that, we have to say Python&nbsp;
three phase resume underscore parsing.py. So the&nbsp;&nbsp;

02:23:05.760 --> 02:23:10.800 position:63% line:0%
same name that we have given here to say Python&nbsp;
three ratio parsing that py. Once you press enter,&nbsp;&nbsp;

02:23:11.840 --> 02:23:16.800 position:63% line:0%
we'll see all the details that we have done. So&nbsp;
for example, this is exactly what we saw. First&nbsp;&nbsp;

02:23:16.800 --> 02:23:23.520 position:63% line:0%
reading Allison Parker's the first resume output&nbsp;
is txt saved name, email extraction completed&nbsp;&nbsp;

02:23:23.520 --> 02:23:30.480 position:63% line:0%
second resume at john Dominic, john Dominic&nbsp;
txt saved name email id successfully completed&nbsp;&nbsp;

02:23:30.479 --> 02:23:39.040 position:63% line:0%
and then the third resume actually miles CSV&nbsp;
reading PDF saving txt name email ad successfully&nbsp;&nbsp;

02:23:39.040 --> 02:23:46.399 position:63% line:0%
completed now we can see okay LS nothing has&nbsp;
changed. Let us enter into resumes folder.&nbsp;&nbsp;

02:23:47.600 --> 02:23:52.720 position:63% line:0%
And then we will see okay, LS we can see that&nbsp;
there are three files which is what we used as&nbsp;&nbsp;

02:23:52.720 --> 02:24:00.480 position:63% line:0%
input. Now let us come out you see the space dot&nbsp;
dot coming out and then doing LS just to validate&nbsp;&nbsp;

02:24:00.479 --> 02:24:08.240 position:63% line:0%
where we are and then let us get into output. And&nbsp;
then you can see LS, we have two folders, CD txt&nbsp;&nbsp;

02:24:09.120 --> 02:24:14.880 position:63% line:0%
and then LS we can see that we have got three txt&nbsp;
files. So initially before we started with this&nbsp;&nbsp;

02:24:15.520 --> 02:24:21.680 position:63% line:0%
execution of the script, we did not have these&nbsp;
txt files. Now we have this txt file which means&nbsp;&nbsp;

02:24:22.240 --> 02:24:27.679 position:63% line:0%
the conversion of PDF to txt has been successful.&nbsp;
Now let us also validate whether we have got the&nbsp;&nbsp;

02:24:27.680 --> 02:24:36.160 position:63% line:0%
structured information in the form of CSV. So let&nbsp;
us go out cd space dot.we are again inside output.&nbsp;&nbsp;

02:24:36.160 --> 02:24:42.399 position:63% line:0%
We'll get into CSV and then say okay,&nbsp;
we have got the CSV inside CSV, LS.&nbsp;&nbsp;

02:24:42.960 --> 02:24:49.520 position:63% line:0%
We have got parsed underscore resumes dot&nbsp;
CSV, which means the script that we executed&nbsp;&nbsp;

02:24:50.080 --> 02:24:55.840 position:63% line:0%
has completely done what we did with the&nbsp;
notebook which means the script is perfect,&nbsp;&nbsp;

02:24:56.479 --> 02:25:03.280 position:63% line:0%
that the automation is successful, that it picks&nbsp;
all the resumes folder resume. And it converts&nbsp;&nbsp;

02:25:03.280 --> 02:25:08.880 position:63% line:0%
everything into txt and saves inside txt. And then&nbsp;
it also finally creates one CSV file, which is&nbsp;&nbsp;

02:25:09.520 --> 02:25:18.081 position:63% line:0%
the parsed resumes file. So now let us go ahead&nbsp;
and go to output, open CSV now that we find CSV&nbsp;&nbsp;

02:25:18.080 --> 02:25:23.840 position:63% line:0%
in this folder, let us right click it and open&nbsp;
the CSV with Microsoft Excel for us to see, okay,&nbsp;&nbsp;

02:25:24.640 --> 02:25:30.720 position:63% line:0%
this is Excel, the CSV has been opened, you&nbsp;
can see that okay name is their phone number,&nbsp;&nbsp;

02:25:30.720 --> 02:25:36.640 position:63% line:0%
their email it is their skill is there? And&nbsp;
how can you use the output of this project? Let&nbsp;&nbsp;

02:25:36.640 --> 02:25:41.201 position:63% line:0%
us assume that you are HR manager or you are the&nbsp;
recruiting manager, and you want to use the output&nbsp;&nbsp;

02:25:41.200 --> 02:25:45.840 position:63% line:0%
of this project and you have got, let's say maybe&nbsp;
100 names like that. The way you can use it is,&nbsp;&nbsp;

02:25:46.560 --> 02:25:52.000 position:63% line:0%
right now you have a requirement for a SQL&nbsp;
Developer, SQL Developer, what can you do?&nbsp;&nbsp;

02:25:52.000 --> 02:26:01.600 position:63% line:0%
You can just go there, apply this filter and say,&nbsp;
Okay, I want someone with SQL. What do you get?&nbsp;&nbsp;

02:26:03.600 --> 02:26:11.360 position:63% line:0%
Let's say you go to the header, let us format&nbsp;
this header a little bit. And then you go to&nbsp;&nbsp;

02:26:11.359 --> 02:26:18.559 position:63% line:0%
the header, and then say filter, and I&nbsp;
want someone with SQL, then you see Oh,&nbsp;&nbsp;

02:26:18.560 --> 02:26:24.000 position:63% line:0%
you've got Ashley miles with SQL skillset. And&nbsp;
additionally, Ashley miles also has tableau.&nbsp;&nbsp;

02:26:24.000 --> 02:26:30.800 position:63% line:0%
So maybe let us pick up Ashley, my email ad and&nbsp;
then male and ask if he would be interested in&nbsp;&nbsp;

02:26:30.800 --> 02:26:36.240 position:63% line:0%
joining our company for an interview or let us&nbsp;
assume that you have another requirement where&nbsp;&nbsp;

02:26:36.240 --> 02:26:44.240 position:63% line:0%
you want someone with Tableau and then in this&nbsp;
case, you will go put a filter and say one blue,&nbsp;&nbsp;

02:26:45.200 --> 02:26:50.479 position:63% line:0%
then you see okay, Alison Parker right. And Ashley&nbsp;
Mize has Tableau skill set. And then you know,&nbsp;&nbsp;

02:26:50.479 --> 02:26:55.359 position:63% line:0%
now let us prioritize that these two resumes for&nbsp;
interview and then go ahead and then call them for&nbsp;&nbsp;

02:26:55.359 --> 02:27:01.040 position:63% line:0%
interview. So this is the main objective of this&nbsp;
project. So if you have got a lot of resumes, like&nbsp;&nbsp;

02:27:01.040 --> 02:27:05.840 position:63% line:0%
50 resumes, it is nearly impossible for one human&nbsp;
being to literally go through all the resumes.&nbsp;&nbsp;

02:27:05.840 --> 02:27:10.640 position:63% line:0%
But using an automated script, a bulk resume a&nbsp;
parser that we have built using this project,&nbsp;&nbsp;

02:27:10.640 --> 02:27:16.080 position:63% line:0%
what we can do is we can extract the essential&nbsp;
skill set that we want. And as you know, you can&nbsp;&nbsp;

02:27:16.080 --> 02:27:21.760 position:63% line:0%
change the skill set like you wanted in the regex&nbsp;
expression that we built, and then filter it using&nbsp;&nbsp;

02:27:21.760 --> 02:27:27.200 position:63% line:0%
Excel to say, Okay, these are the resumes that I'm&nbsp;
going to focus instead of just going randomly with&nbsp;&nbsp;

02:27:27.200 --> 02:27:34.800 position:63% line:0%
all the 50 resumes. So in this section, we learned&nbsp;
how to build an automated bulk resume parser&nbsp;&nbsp;

02:27:34.800 --> 02:27:40.160 position:63% line:0%
using natural language processing and regular&nbsp;
expression. We also alongside learned basics&nbsp;&nbsp;

02:27:40.160 --> 02:27:46.240 position:63% line:0%
of regular expression and how to implement it in&nbsp;
Python. And we also saw introduction to spacey,&nbsp;&nbsp;

02:27:46.800 --> 02:27:52.080 position:63% line:0%
and natural language processing using spacey.&nbsp;
And then once we successfully built the script&nbsp;&nbsp;

02:27:52.080 --> 02:27:57.120 position:63% line:0%
to completely convert a resume a which&nbsp;
is in PDF and an unstructured format into&nbsp;&nbsp;

02:27:57.120 --> 02:28:02.880 position:63% line:0%
a structured tabular format. We saved it&nbsp;
in CSV and we saw how we can use that CSV&nbsp;&nbsp;

02:28:02.880 --> 02:28:07.680 position:63% line:0%
to prioritize resumes for selecting the&nbsp;
right resume for the job requirement.&nbsp;&nbsp;

02:28:08.560 --> 02:28:11.840 position:63% line:0%
Thank you for watching this video,&nbsp;
and we'll see the next section.&nbsp;&nbsp;

02:28:14.000 --> 02:28:20.000 position:63% line:0%
In this section, we'll learn how to build an image&nbsp;
typeconverter. Converting images from one image&nbsp;&nbsp;

02:28:20.000 --> 02:28:28.000 position:63% line:0%
type to another image type like PNG to JPG JPG&nbsp;
to PNG, or BMP to PNG is one of the most wanted&nbsp;&nbsp;

02:28:28.000 --> 02:28:34.000 position:63% line:0%
tools that every one of us expect to have handy.&nbsp;
To build such a tool, we'll start learning with&nbsp;&nbsp;

02:28:34.000 --> 02:28:39.040 position:63% line:0%
basic image manipulation in Python, then we'll&nbsp;
understand what are the Python packages used for&nbsp;&nbsp;

02:28:39.040 --> 02:28:44.240 position:63% line:0%
image manipulation. And then finally, we'll build&nbsp;
a tool that helps us do image type conversion.&nbsp;&nbsp;

02:28:45.040 --> 02:28:51.120 position:63% line:0%
The section contains following topics, what are&nbsp;
the different types of an image what is an image&nbsp;&nbsp;

02:28:51.120 --> 02:28:57.599 position:63% line:0%
type converter, Introduction to image manipulation&nbsp;
in Python, and the Python packages used further.&nbsp;&nbsp;

02:28:57.600 --> 02:29:03.281 position:63% line:0%
And then finally, we'll build a script project&nbsp;
that will help us do image type conversion. In&nbsp;&nbsp;

02:29:03.280 --> 02:29:08.960 position:63% line:0%
the next video, we'll learn what are the different&nbsp;
types of image file formats, and its details.&nbsp;&nbsp;

02:29:11.040 --> 02:29:17.840 position:63% line:0%
In this video, we'll learn what are the different&nbsp;
type of image file formats, and its details. image&nbsp;&nbsp;

02:29:17.840 --> 02:29:23.520 position:63% line:0%
file formats are standardized means of organizing&nbsp;
and storing digital images. The image file&nbsp;&nbsp;

02:29:23.520 --> 02:29:29.121 position:63% line:0%
format is usually identified by the image file&nbsp;
format extension that comes with the file name,&nbsp;&nbsp;

02:29:29.680 --> 02:29:37.120 position:63% line:0%
and image file format is required to store data&nbsp;
in an uncompressed or compressed or vector format.&nbsp;&nbsp;

02:29:37.120 --> 02:29:42.960 position:63% line:0%
Once rasterized, an image becomes a grid of&nbsp;
pixels, each of which has a number of bits to&nbsp;&nbsp;

02:29:42.960 --> 02:29:50.319 position:63% line:0%
designate its color equal to the color depth of&nbsp;
the device displaying it. In general, an image&nbsp;&nbsp;

02:29:50.319 --> 02:29:57.599 position:63% line:0%
file format defines how data is stored the image&nbsp;
data is stored in that particular file format. And&nbsp;&nbsp;

02:29:57.600 --> 02:30:03.520 position:63% line:0%
image compression can be of two types. lossless&nbsp;
compression The other one is a lossy compression.&nbsp;&nbsp;

02:30:03.520 --> 02:30:10.161 position:63% line:0%
In a lossless compression the image and file&nbsp;
format is change the compression is usually&nbsp;&nbsp;

02:30:10.160 --> 02:30:17.040 position:63% line:0%
lossless, which means there is no information loss&nbsp;
in a lossy compression. The algorithm preserves a&nbsp;&nbsp;

02:30:17.040 --> 02:30:23.040 position:63% line:0%
representation of the original uncompressed image&nbsp;
that may appear to be a perfect copy but it is not&nbsp;&nbsp;

02:30:23.040 --> 02:30:28.560 position:63% line:0%
so often lossy compression able to achieve&nbsp;
smaller file sizes than lossless compression&nbsp;&nbsp;

02:30:28.560 --> 02:30:34.161 position:63% line:0%
and it is highly preferred when you're going to&nbsp;
transfer image from one place to another place&nbsp;&nbsp;

02:30:34.800 --> 02:30:40.560 position:63% line:0%
where you need to compress the image. What are&nbsp;
the various different types of image file format,&nbsp;&nbsp;

02:30:41.200 --> 02:30:47.679 position:63% line:0%
the most widely used and in internet the file&nbsp;
format that has been highly preferred to be&nbsp;&nbsp;

02:30:47.680 --> 02:30:54.560 position:63% line:0%
used for Image Transfer is JPEG. jpg stands&nbsp;
for joint photographic experts group,&nbsp;&nbsp;

02:30:54.560 --> 02:31:00.720 position:63% line:0%
which is a lossy compression which means JPEG&nbsp;
is a compression algorithm that stores image&nbsp;&nbsp;

02:31:00.720 --> 02:31:09.440 position:63% line:0%
data in a compressed format. After JPEG on of the&nbsp;
highly preferred file format is PNG. png stands&nbsp;&nbsp;

02:31:09.439 --> 02:31:16.639 position:63% line:0%
for Portable Network graphics file format. png was&nbsp;
originally created as an alternative for GIF, or&nbsp;&nbsp;

02:31:16.640 --> 02:31:23.120 position:63% line:0%
GIF, however you want to share it give stands for&nbsp;
graphics Interchange Format. In the next video,&nbsp;&nbsp;

02:31:23.120 --> 02:31:27.840 position:63% line:0%
we'll see what are the different Python packages&nbsp;
that we'll be using in this particular project.&nbsp;&nbsp;

02:31:29.600 --> 02:31:34.241 position:63% line:0%
In this video will learn about the different&nbsp;
types of Python packages that we will be&nbsp;&nbsp;

02:31:34.240 --> 02:31:39.840 position:63% line:0%
using in this particular project. For image&nbsp;
manipulation, we are going to use a package called&nbsp;&nbsp;

02:31:41.359 --> 02:31:48.080 position:63% line:0%
PPI L stands for Python imaging library. Python&nbsp;
imaging library is one of the most popular Python&nbsp;&nbsp;

02:31:48.080 --> 02:31:53.600 position:63% line:0%
package which is free for image manipulation&nbsp;
in Python. However, there was no recent&nbsp;&nbsp;

02:31:53.600 --> 02:32:01.201 position:63% line:0%
support from ti l for any Python version that is&nbsp;
greater than three, which means PL supports only&nbsp;&nbsp;

02:32:01.200 --> 02:32:08.399 position:63% line:0%
Python version that is lesser than 2.7. So for&nbsp;
this, someone has formed a friendly fork of PL&nbsp;&nbsp;

02:32:08.399 --> 02:32:14.479 position:63% line:0%
repository, and that is called pillow pillow now&nbsp;
supports any new latest Python version that is&nbsp;&nbsp;

02:32:14.479 --> 02:32:20.959 position:63% line:0%
greater than three below was created by Alex Clark&nbsp;
and its contributors to pillow is the library for&nbsp;&nbsp;

02:32:20.960 --> 02:32:26.240 position:63% line:0%
image manipulation that we are going to use in&nbsp;
this particular project below follows the same&nbsp;&nbsp;

02:32:26.240 --> 02:32:32.399 position:63% line:0%
syntax as PL you have to make sure in a computer&nbsp;
where you have installed below that you do not&nbsp;&nbsp;

02:32:32.399 --> 02:32:38.960 position:63% line:0%
have bi l below can be installed using PIP which&nbsp;
we'll see later on. The next package that we are&nbsp;&nbsp;

02:32:38.960 --> 02:32:46.160 position:63% line:0%
going to use in this project is globe. globe is&nbsp;
simply for Unix style path manipulation. So to&nbsp;&nbsp;

02:32:46.160 --> 02:32:51.840 position:63% line:0%
identify the files images in our current folder,&nbsp;
we are going to use globe. So we are going to use&nbsp;&nbsp;

02:32:51.840 --> 02:32:57.360 position:63% line:0%
Glo to identify the current image files that is&nbsp;
in our current directory. And then we are going&nbsp;&nbsp;

02:32:57.359 --> 02:33:03.120 position:63% line:0%
to use pillow for converting into from one&nbsp;
format to another format. In the next video,&nbsp;&nbsp;

02:33:03.120 --> 02:33:07.920 position:63% line:0%
we'll learn how to install the required Python&nbsp;
packages and loading them into a project.&nbsp;&nbsp;

02:33:09.680 --> 02:33:15.520 position:63% line:0%
In this video, we'll learn how to install the&nbsp;
required Python packages and loading them into&nbsp;&nbsp;

02:33:15.520 --> 02:33:21.760 position:63% line:0%
our project. As we discussed earlier, the back&nbsp;
end that we are going to use is called below. So&nbsp;&nbsp;

02:33:21.760 --> 02:33:26.480 position:63% line:0%
let us open our terminal. If you are going to use&nbsp;
Mac, open your terminal. Or if you're going to use&nbsp;&nbsp;

02:33:26.479 --> 02:33:32.639 position:63% line:0%
Windows, open your command prompt. And make sure&nbsp;
that in your computer, if you have Python three,&nbsp;&nbsp;

02:33:33.200 --> 02:33:39.214 position:63% line:0%
you're going to use PIP three. So if you're going&nbsp;
to have Python three, use PIP three or if you're&nbsp;&nbsp;

02:33:39.215 --> 02:33:44.161 position:63% line:0%
going to have fight them less than 3.0 use PIP&nbsp;
so in my computer, I've got python 3.7. So I'm&nbsp;&nbsp;

02:33:44.160 --> 02:33:51.040 position:63% line:0%
going to use PIP three, install and below. Make&nbsp;
sure that your pee in pillow isn't capital letter&nbsp;&nbsp;

02:33:51.040 --> 02:33:57.920 position:63% line:0%
and then press enter the installation procedure&nbsp;
will start now. So right now, you can see that&nbsp;&nbsp;

02:33:57.920 --> 02:34:01.920 position:63% line:0%
below has been installed successfully for&nbsp;
you to verify a pillow has been installed&nbsp;&nbsp;

02:34:01.920 --> 02:34:08.319 position:63% line:0%
successfully. You can open Python console here&nbsp;
using Python three and then import pillow.&nbsp;&nbsp;

02:34:11.040 --> 02:34:17.200 position:63% line:0%
The reason that pillow is not found here is&nbsp;
because we also saw that pillow follows the&nbsp;&nbsp;

02:34:17.200 --> 02:34:23.679 position:63% line:0%
same syntax as pa l but it is just a simple folk.&nbsp;
But in this case, if you are going to use pillow,&nbsp;&nbsp;

02:34:23.680 --> 02:34:28.960 position:63% line:0%
you have to just simply input bi l make&nbsp;
sure that you have only one version of&nbsp;&nbsp;

02:34:28.960 --> 02:34:32.960 position:63% line:0%
pillow installed in your machine so that&nbsp;
there is no clash among the packages.&nbsp;&nbsp;

02:34:34.800 --> 02:34:39.200 position:63% line:0%
This is the only package that was required for&nbsp;
us to install. The other package that we saw&nbsp;&nbsp;

02:34:39.200 --> 02:34:46.720 position:63% line:0%
below is already available which also we can&nbsp;
verify by using import glow. It has been imported,&nbsp;&nbsp;

02:34:46.720 --> 02:34:52.640 position:63% line:0%
which means the package is available already by&nbsp;
default in python 3.0. In the next video, we'll&nbsp;&nbsp;

02:34:52.640 --> 02:35:01.120 position:63% line:0%
start with the coding part of creating our image&nbsp;
typeconverter script in this video We'll learn how&nbsp;&nbsp;

02:35:01.120 --> 02:35:07.599 position:63% line:0%
to code or image type converter script to begin&nbsp;
with, open your PI charm or any other Python ID&nbsp;&nbsp;

02:35:07.600 --> 02:35:12.800 position:63% line:0%
that you are going to use for this particular&nbsp;
project. Once you open your ID or pi charm in&nbsp;&nbsp;

02:35:12.800 --> 02:35:20.000 position:63% line:0%
my particular case, go to File and click New to&nbsp;
create a new Python file. Once you click New,&nbsp;&nbsp;

02:35:20.000 --> 02:35:25.280 position:63% line:0%
you'll get all these options and select Python&nbsp;
file to create a new Python file, you might have&nbsp;&nbsp;

02:35:25.280 --> 02:35:32.880 position:63% line:0%
to name the file upfront. So give a meaningful&nbsp;
name like image conversion new.pi. For ease of&nbsp;&nbsp;

02:35:32.880 --> 02:35:38.160 position:63% line:0%
process, I've already created the code and I'll&nbsp;
take you through section by section. The first&nbsp;&nbsp;

02:35:38.160 --> 02:35:42.559 position:63% line:0%
section we are going to load the library that&nbsp;
we are going to use in this particular project.&nbsp;&nbsp;

02:35:43.120 --> 02:35:48.399 position:63% line:0%
As we discussed earlier, you under the package&nbsp;
name that we are going to use is called pillow,&nbsp;&nbsp;

02:35:49.040 --> 02:35:57.280 position:63% line:0%
because it is a fork of p i e l library. So we&nbsp;
are going to use p L. So from PL we want to import&nbsp;&nbsp;

02:35:57.280 --> 02:36:04.399 position:63% line:0%
the class object image. And then we are going to&nbsp;
import blob, which is to identify the files with&nbsp;&nbsp;

02:36:04.399 --> 02:36:10.399 position:63% line:0%
a particular extension. So in this step, we are&nbsp;
going to use print globe dot globe. And we are&nbsp;&nbsp;

02:36:10.399 --> 02:36:16.160 position:63% line:0%
going to use this small regular expression pattern&nbsp;
that tells us that anything that starts with&nbsp;&nbsp;

02:36:17.120 --> 02:36:22.319 position:63% line:0%
anything, and then followed by a dot, and&nbsp;
then finally ends with a PNG, which means&nbsp;&nbsp;

02:36:22.319 --> 02:36:28.719 position:63% line:0%
we are going to tell Python that please give me&nbsp;
the list of files that have an extension PNG.&nbsp;&nbsp;

02:36:29.359 --> 02:36:35.519 position:63% line:0%
To understand this, let us see the current working&nbsp;
directory of the current working directory offers.&nbsp;&nbsp;

02:36:36.160 --> 02:36:41.760 position:63% line:0%
We have three PNG files. As you can see, the first&nbsp;
one is Batman logo. The second one is Powerpuff&nbsp;&nbsp;

02:36:41.760 --> 02:36:47.281 position:63% line:0%
Girls, and the third one is Tom and Jerry dot&nbsp;
png. So all these PNG files will be displayed.&nbsp;&nbsp;

02:36:47.840 --> 02:36:53.760 position:63% line:0%
Once we run this code. The next section, we&nbsp;
are going to iterate through the PNG files,&nbsp;&nbsp;

02:36:53.760 --> 02:36:59.120 position:63% line:0%
each and every file. And then we are going to open&nbsp;
the image file and then assign it to a new Python&nbsp;&nbsp;

02:36:59.120 --> 02:37:05.920 position:63% line:0%
variable called iron. Once we assign it to the new&nbsp;
Python variable called Iam, we are going to use&nbsp;&nbsp;

02:37:05.920 --> 02:37:12.880 position:63% line:0%
this is to apply a method called convert where&nbsp;
we are converting into tune to its RGB file&nbsp;&nbsp;

02:37:12.880 --> 02:37:20.880 position:63% line:0%
format. Our GB stands for red, green, blue, which&nbsp;
forms the complete color that we usually see.&nbsp;&nbsp;

02:37:20.880 --> 02:37:26.160 position:63% line:0%
So in this step, we're going to convert&nbsp;
the image that we read, which is a PNG&nbsp;&nbsp;

02:37:26.160 --> 02:37:31.840 position:63% line:0%
image after getting assigned into a new object,&nbsp;
we're going to convert it into its RGB format.&nbsp;&nbsp;

02:37:32.800 --> 02:37:40.160 position:63% line:0%
Please note that image conversion can also&nbsp;
have RGB, but RGBA is not something that&nbsp;&nbsp;

02:37:40.160 --> 02:37:45.359 position:63% line:0%
we are going to use here for that purpose&nbsp;
because JPEG is a file format that cannot&nbsp;&nbsp;

02:37:45.359 --> 02:37:53.120 position:63% line:0%
retain transparency. A stands for alpha alpha&nbsp;
represents transparency. So for a JPEG image,&nbsp;&nbsp;

02:37:53.120 --> 02:37:58.000 position:63% line:0%
it has only three properties, which is&nbsp;
our G B. But for a PNG image, for example,&nbsp;&nbsp;

02:37:58.000 --> 02:38:04.080 position:63% line:0%
if you're going to convert from a JPG to PNG&nbsp;
image, you need to have RGB A, which will convert&nbsp;&nbsp;

02:38:04.080 --> 02:38:10.319 position:63% line:0%
the image into a new file format along with this&nbsp;
attribute alpha, which stands for transparency,&nbsp;&nbsp;

02:38:10.319 --> 02:38:15.840 position:63% line:0%
which is not required for our current use&nbsp;
case. So we will use RGB format and convert&nbsp;&nbsp;

02:38:15.840 --> 02:38:21.280 position:63% line:0%
the input image. And then finally, while saving&nbsp;
the image, we are going to use the same file name,&nbsp;&nbsp;

02:38:22.080 --> 02:38:28.960 position:63% line:0%
which is what we read. And then we are just going&nbsp;
to replace the extension from PNG to jpg. And then&nbsp;&nbsp;

02:38:28.960 --> 02:38:34.399 position:63% line:0%
it also gives us the flexibility of setting the&nbsp;
quality value depending upon how large the images.&nbsp;&nbsp;

02:38:34.399 --> 02:38:39.519 position:63% line:0%
So if you want the image to be more compressed low&nbsp;
quality, if you want to upload it online, then you&nbsp;&nbsp;

02:38:39.520 --> 02:38:44.640 position:63% line:0%
can reduce the quality which means the size of&nbsp;
the image will also be reduced. Because we have&nbsp;&nbsp;

02:38:44.640 --> 02:38:50.480 position:63% line:0%
given it in a for loop, it is going to happen for&nbsp;
all the files that we have got. So let us go ahead&nbsp;&nbsp;

02:38:50.479 --> 02:38:56.319 position:63% line:0%
and run the code. So to run the code, we can go&nbsp;
here and pi charm and then just execute the code.&nbsp;&nbsp;

02:38:56.319 --> 02:39:01.840 position:63% line:0%
As you can see, the code has completely executed&nbsp;
and then it has displayed all the PNG that we had.&nbsp;&nbsp;

02:39:02.560 --> 02:39:08.081 position:63% line:0%
And then it also has finished with exit code&nbsp;
zero. As you might have noticed, initially,&nbsp;&nbsp;

02:39:08.080 --> 02:39:14.800 position:63% line:0%
when we had opened this finder, the Explorer where&nbsp;
we had all the files, we had only PNG file format,&nbsp;&nbsp;

02:39:14.800 --> 02:39:21.440 position:63% line:0%
but you can see now that we have also created&nbsp;
new JPG file format. And to notice the difference&nbsp;&nbsp;

02:39:21.439 --> 02:39:26.719 position:63% line:0%
when you open Batman Lego file you can actually&nbsp;
see that there is no background in there,&nbsp;&nbsp;

02:39:26.720 --> 02:39:32.720 position:63% line:0%
which means it is completely transparent, which&nbsp;
is one of the attributes of a PNG image. But when&nbsp;&nbsp;

02:39:32.720 --> 02:39:37.760 position:63% line:0%
you actually see the JPEG image, which is this&nbsp;
one, you actually see that the entire background&nbsp;&nbsp;

02:39:37.760 --> 02:39:42.640 position:63% line:0%
has been filled with the black color. That is what&nbsp;
happens when we had done this conversion where the&nbsp;&nbsp;

02:39:42.640 --> 02:39:49.600 position:63% line:0%
attribute alpha has been lost. So in this project,&nbsp;
we learned how to import the Python image library,&nbsp;&nbsp;

02:39:49.600 --> 02:39:55.520 position:63% line:0%
how to find PNG in the current working directory,&nbsp;
and then how to convert this image from one file&nbsp;&nbsp;

02:39:55.520 --> 02:40:01.201 position:63% line:0%
format to another file format with different&nbsp;
quality level outcomes. impression level. In the&nbsp;&nbsp;

02:40:01.200 --> 02:40:07.760 position:63% line:0%
next video, we'll learn how to execute our Python&nbsp;
project that we just created using the terminal.&nbsp;&nbsp;

02:40:09.760 --> 02:40:16.800 position:63% line:0%
In this video, we'll learn how to execute a Python&nbsp;
project using terminal or Command Prompt. What we&nbsp;&nbsp;

02:40:16.800 --> 02:40:22.240 position:63% line:0%
did in the previous project has been imported&nbsp;
below package. And then we iterated through all&nbsp;&nbsp;

02:40:22.240 --> 02:40:27.920 position:63% line:0%
the PNG files in our current directory. And then&nbsp;
we converted all those PNG files into a JPEG.&nbsp;&nbsp;

02:40:27.920 --> 02:40:32.880 position:63% line:0%
But the problem with that in sharing the code&nbsp;
is that someone has to have the knowledge of&nbsp;&nbsp;

02:40:32.880 --> 02:40:38.960 position:63% line:0%
Python to open the text editor, or to open pi&nbsp;
charm and then run the code. To avoid that,&nbsp;&nbsp;

02:40:38.960 --> 02:40:44.880 position:63% line:0%
we can convert this enter code into a Python&nbsp;
executable file, which is something that we have&nbsp;&nbsp;

02:40:44.880 --> 02:40:51.200 position:63% line:0%
already created in the previous project. So the.py&nbsp;
file that we had created in the previous project&nbsp;&nbsp;

02:40:51.200 --> 02:40:57.760 position:63% line:0%
is what we are going to use in our terminal&nbsp;
or bash, or shell, a Windows command prompt,&nbsp;&nbsp;

02:40:57.760 --> 02:41:04.720 position:63% line:0%
and then use that py file to execute and then&nbsp;
convert everything within our shell itself. So&nbsp;&nbsp;

02:41:04.720 --> 02:41:11.520 position:63% line:0%
this way, we can convert the entire project into a&nbsp;
single click command line utility. So let us first&nbsp;&nbsp;

02:41:11.520 --> 02:41:17.520 position:63% line:0%
get into our current working directory where we&nbsp;
have got all the files under code. In my case,&nbsp;&nbsp;

02:41:17.520 --> 02:41:22.560 position:63% line:0%
image type conversion is where I've got&nbsp;
image underscore conversion is where&nbsp;&nbsp;

02:41:22.560 --> 02:41:30.161 position:63% line:0%
I've got my code, and then project file to check&nbsp;
that we can use their Linux command ls to see what&nbsp;&nbsp;

02:41:30.160 --> 02:41:35.439 position:63% line:0%
are all the files in our current directory.&nbsp;
So as you can see, we have three PNG files,&nbsp;&nbsp;

02:41:35.439 --> 02:41:41.679 position:63% line:0%
and we have the Python file that we had created&nbsp;
in the previous project. So to execute this file,&nbsp;&nbsp;

02:41:41.680 --> 02:41:50.320 position:63% line:0%
let us first copy this file name, right click&nbsp;
Copy. And once the file name is copied, remember&nbsp;&nbsp;

02:41:50.319 --> 02:41:57.599 position:63% line:0%
whether you have got Python, or just Python three,&nbsp;
which means if you have got Python less than 3.0,&nbsp;&nbsp;

02:41:57.600 --> 02:42:02.800 position:63% line:0%
you have to use this command Python. Or if you&nbsp;
have to, if you have Python version greater&nbsp;&nbsp;

02:42:02.800 --> 02:42:09.920 position:63% line:0%
than 3.0, you have to use Python three. So in my&nbsp;
case, I've got Python version 3.0. So I'm going&nbsp;&nbsp;

02:42:09.920 --> 02:42:16.640 position:63% line:0%
to use Python three here as the first command. And&nbsp;
then I'm going to put my file name which is image&nbsp;&nbsp;

02:42:16.640 --> 02:42:22.080 position:63% line:0%
underscore conversion dot p y. This command is&nbsp;
going to execute image underscore conversion.py,&nbsp;&nbsp;

02:42:23.040 --> 02:42:29.840 position:63% line:0%
which will iterate through these PNG files and&nbsp;
create new JPEG files. So let us see. So as we&nbsp;&nbsp;

02:42:29.840 --> 02:42:36.000 position:63% line:0%
have executed, in just a microsecond, this nta&nbsp;
code has got executed. And then we can see that&nbsp;&nbsp;

02:42:36.000 --> 02:42:41.520 position:63% line:0%
the pipe PNG files have got listed, and then&nbsp;
the code is completely successfully executed.&nbsp;&nbsp;

02:42:41.520 --> 02:42:46.480 position:63% line:0%
Now let us see whether the new files are there&nbsp;
available in the current working directory.&nbsp;&nbsp;

02:42:46.479 --> 02:42:52.799 position:63% line:0%
So to check that we can use the same command ls,&nbsp;
and then see, as you can see, we have new files,&nbsp;&nbsp;

02:42:52.800 --> 02:43:02.080 position:63% line:0%
which has this extension called JPG and JPEG and&nbsp;
jpg. So let us go to the folder where we have got&nbsp;&nbsp;

02:43:02.080 --> 02:43:07.840 position:63% line:0%
all these files. As you can see, initially, we&nbsp;
had only PNG files. And after this execution,&nbsp;&nbsp;

02:43:08.560 --> 02:43:14.400 position:63% line:0%
we have all these JPG files. To just verify this,&nbsp;
once again, we'll delete all these JPG files.&nbsp;&nbsp;

02:43:16.000 --> 02:43:21.840 position:63% line:0%
And then we'll go back and then check using&nbsp;
a list. Yes, there is no JPG files in this&nbsp;&nbsp;

02:43:21.840 --> 02:43:28.400 position:63% line:0%
current directory. And then we'll run the same&nbsp;
command again, to execute the image conversion&nbsp;&nbsp;

02:43:28.399 --> 02:43:34.000 position:63% line:0%
Python file. I'm going to use Python three&nbsp;
because my Python version is greater than 2.7.&nbsp;&nbsp;

02:43:35.359 --> 02:43:40.559 position:63% line:0%
So once we executed this, we can go to the current&nbsp;
working directory, and then see that we have got&nbsp;&nbsp;

02:43:40.560 --> 02:43:48.560 position:63% line:0%
new JPG files. And as we see last time, this&nbsp;
Batman Lego has got no background, which is one&nbsp;&nbsp;

02:43:48.560 --> 02:43:55.201 position:63% line:0%
of the properties of PNG files we saw but alpha&nbsp;
and the JPEG version of the same Batman Lego has&nbsp;&nbsp;

02:43:55.200 --> 02:44:02.479 position:63% line:0%
got a black color background, which means the JPG&nbsp;
file has replaced the transparent background with&nbsp;&nbsp;

02:44:02.479 --> 02:44:10.160 position:63% line:0%
a black color. So this project, we learned how to&nbsp;
create an image type converter using Python using&nbsp;&nbsp;

02:44:10.160 --> 02:44:18.000 position:63% line:0%
the library pi L, which stands for Python image&nbsp;
library. And then we converted that code into a&nbsp;&nbsp;

02:44:18.000 --> 02:44:25.520 position:63% line:0%
shell script where we can execute in one line that&nbsp;
the entire conversion will happen for all the PNG&nbsp;&nbsp;

02:44:25.520 --> 02:44:29.920 position:63% line:0%
files in our current working directory. Thank&nbsp;
you for listening. See you in the next section.&nbsp;&nbsp;

02:44:31.359 --> 02:44:36.080 position:63% line:0%
In this section, we'll learn how to build an&nbsp;
automated new summarizer. The reason we call it&nbsp;&nbsp;

02:44:36.080 --> 02:44:41.279 position:63% line:0%
an automated new summary is because the machine&nbsp;
learning algorithm is doing the summarization&nbsp;&nbsp;

02:44:41.279 --> 02:44:47.359 position:63% line:0%
technique for us with no manual effort of going&nbsp;
through the long text of news. News summarization&nbsp;&nbsp;

02:44:47.359 --> 02:44:52.160 position:63% line:0%
is nothing but the text summarization of news.&nbsp;
We'll start seeing an introduction to text&nbsp;&nbsp;

02:44:52.160 --> 02:44:58.160 position:63% line:0%
summarizer and its techniques. we'll implement&nbsp;
one such text summarization procedure and Python.&nbsp;&nbsp;

02:44:58.160 --> 02:45:03.120 position:63% line:0%
With that, we would have extracted this summarise&nbsp;
text of the news and thus we would have got our&nbsp;&nbsp;

02:45:03.120 --> 02:45:07.760 position:63% line:0%
automated news summaries are in place. Let us&nbsp;
go ahead and start seeing the course section.&nbsp;&nbsp;

02:45:09.040 --> 02:45:14.080 position:63% line:0%
In this video we will learn about take&nbsp;
summarization. Take summarization is the process&nbsp;&nbsp;

02:45:14.080 --> 02:45:19.840 position:63% line:0%
of extracting meaningful text that is shorter&nbsp;
in length from a huge chunk of larger text.&nbsp;&nbsp;

02:45:19.840 --> 02:45:23.680 position:63% line:0%
Using algorithms powered by natural&nbsp;
language processing and machine learning.&nbsp;&nbsp;

02:45:23.680 --> 02:45:28.320 position:63% line:0%
Take summarization is actually one of the most&nbsp;
exciting fields in machine learning and natural&nbsp;&nbsp;

02:45:28.319 --> 02:45:33.679 position:63% line:0%
language processing, which is NLP. Automated text&nbsp;
summarization allows engineers and data scientists&nbsp;&nbsp;

02:45:33.680 --> 02:45:39.201 position:63% line:0%
to create software's and tools that can&nbsp;
quickly find and extract keywords and phrases&nbsp;&nbsp;

02:45:39.200 --> 02:45:44.240 position:63% line:0%
from documents thus creating a summarized takes&nbsp;
take summarizes are implemented in a variety of&nbsp;&nbsp;

02:45:44.240 --> 02:45:50.080 position:63% line:0%
web applications and mobile applications&nbsp;
to deliver summarized content, or news.&nbsp;&nbsp;

02:45:50.080 --> 02:45:55.200 position:63% line:0%
And the example is there is an app in short, which&nbsp;
is one of the most popular news apps in India&nbsp;&nbsp;

02:45:55.200 --> 02:46:02.720 position:63% line:0%
that delivers a summarized text from a larger&nbsp;
use. Take summarization usually are of two types,&nbsp;&nbsp;

02:46:02.720 --> 02:46:06.480 position:63% line:0%
the technique is of two types. The first&nbsp;
one is extraction. And then the second&nbsp;&nbsp;

02:46:06.479 --> 02:46:12.639 position:63% line:0%
one is abstraction. The extraction technique, the&nbsp;
automated system or algorithm that we have built,&nbsp;&nbsp;

02:46:12.640 --> 02:46:18.800 position:63% line:0%
extracts objects from the entire collection of&nbsp;
text without modifying the objects, which means&nbsp;&nbsp;

02:46:18.800 --> 02:46:24.800 position:63% line:0%
it extracts key phrases from the entire text that&nbsp;
we have given and then ranks those sentences based&nbsp;&nbsp;

02:46:24.800 --> 02:46:31.279 position:63% line:0%
on its importance. And then finally gives a text&nbsp;
summarized format of text using only those most&nbsp;&nbsp;

02:46:31.279 --> 02:46:37.359 position:63% line:0%
important sentences. So in this case, there is no&nbsp;
modification of objects that are present inside&nbsp;&nbsp;

02:46:37.359 --> 02:46:44.000 position:63% line:0%
the actual text that has been provided. The second&nbsp;
technique is abstraction, under abstraction,&nbsp;&nbsp;

02:46:44.000 --> 02:46:49.200 position:63% line:0%
instead of just merely copying the information&nbsp;
from the given text. What it does is it&nbsp;&nbsp;

02:46:49.200 --> 02:46:55.279 position:63% line:0%
actually pair up phrases the entire section. So&nbsp;
it takes the entire text, paraphrases the section,&nbsp;&nbsp;

02:46:55.279 --> 02:47:02.319 position:63% line:0%
and then finally identify key words and then key&nbsp;
phrases, and then uses natural language processing&nbsp;&nbsp;

02:47:02.319 --> 02:47:07.840 position:63% line:0%
to create a new text which is more meaningful,&nbsp;
and also covers the context. And then finally,&nbsp;&nbsp;

02:47:07.840 --> 02:47:13.840 position:63% line:0%
it uses the summarized text of the original text&nbsp;
that is given. So there are two techniques. The&nbsp;&nbsp;

02:47:13.840 --> 02:47:19.440 position:63% line:0%
first one is extraction, which actually returns&nbsp;
the entire document without modifying the objects&nbsp;&nbsp;

02:47:19.439 --> 02:47:25.519 position:63% line:0%
but a minimalistic version of using only important&nbsp;
sentences. The second one is it breaks down the&nbsp;&nbsp;

02:47:25.520 --> 02:47:30.800 position:63% line:0%
entire sentence, multiple objects, and then it&nbsp;
builds meaningful sentences using natural language&nbsp;&nbsp;

02:47:30.800 --> 02:47:36.880 position:63% line:0%
processing by paraphrasing the sections, and then&nbsp;
we get the summarize text. In the next video,&nbsp;&nbsp;

02:47:36.880 --> 02:47:41.120 position:63% line:0%
we'll learn about what kind of technique we&nbsp;
are going to use in this particular project,&nbsp;&nbsp;

02:47:41.120 --> 02:47:46.000 position:63% line:0%
what Python package we are going to use for that&nbsp;
purpose, and how to install that Python package to&nbsp;&nbsp;

02:47:46.000 --> 02:47:52.720 position:63% line:0%
proceed further. Thank you. In the previous video,&nbsp;
we learned a bit about text summarization. In this&nbsp;&nbsp;

02:47:52.720 --> 02:47:57.200 position:63% line:0%
video, we will see what kind of text summarization&nbsp;
Are we going to use, and then the Python library&nbsp;&nbsp;

02:47:57.200 --> 02:48:02.800 position:63% line:0%
required for that. So text summarization is&nbsp;
of two types. As we saw in the previous video,&nbsp;&nbsp;

02:48:02.800 --> 02:48:07.760 position:63% line:0%
one is extraction. The second one is abstraction.&nbsp;
So in this particular project, we'll use&nbsp;&nbsp;

02:48:07.760 --> 02:48:12.960 position:63% line:0%
extraction method for text summarization. And the&nbsp;
Python package that we are going to use is called&nbsp;&nbsp;

02:48:12.960 --> 02:48:19.120 position:63% line:0%
Jensen. So the Jensen implementation of text&nbsp;
summarization is based on a popular algorithm&nbsp;&nbsp;

02:48:19.120 --> 02:48:25.599 position:63% line:0%
called text rank. Text rank algorithm is a&nbsp;
graph based ranking model for text processing.&nbsp;&nbsp;

02:48:25.600 --> 02:48:30.960 position:63% line:0%
An important aspect of text rank is that it&nbsp;
does not require deep linguistic knowledge,&nbsp;&nbsp;

02:48:30.960 --> 02:48:36.960 position:63% line:0%
which means text rank model is highly portable&nbsp;
to any other domain or language. Which means if&nbsp;&nbsp;

02:48:36.960 --> 02:48:41.920 position:63% line:0%
you have built a model using English language,&nbsp;
you can use the same algorithm for a different&nbsp;&nbsp;

02:48:41.920 --> 02:48:50.000 position:63% line:0%
language without any further major changes. Jensen&nbsp;
is also known as topic modeling in Python gensim&nbsp;&nbsp;

02:48:50.000 --> 02:48:56.880 position:63% line:0%
is a pythonic library for topic modeling, document&nbsp;
indexing and similarity retrieval for large text&nbsp;&nbsp;

02:48:56.880 --> 02:49:02.800 position:63% line:0%
corpora. The target audience for Jensen is the&nbsp;
one who uses natural language processing and&nbsp;&nbsp;

02:49:02.800 --> 02:49:09.120 position:63% line:0%
information retrieval or information extraction.&nbsp;
gensim is particularly one of the most popular&nbsp;&nbsp;

02:49:09.120 --> 02:49:15.200 position:63% line:0%
Python libraries especially for topic modeling.&nbsp;
gensim is been open sourced by a company called&nbsp;&nbsp;

02:49:15.200 --> 02:49:22.479 position:63% line:0%
Ray technologist or a ray technologists, let us&nbsp;
see how to install gensim on our computer, open&nbsp;&nbsp;

02:49:22.479 --> 02:49:28.639 position:63% line:0%
your terminal or if you're using Windows, open&nbsp;
your command prompt. And then type crypt three as&nbsp;&nbsp;

02:49:28.640 --> 02:49:33.600 position:63% line:0%
we have seen before, if you're using Python&nbsp;
three, you need to type PIP three install&nbsp;&nbsp;

02:49:33.600 --> 02:49:39.040 position:63% line:0%
if you already have got gensim so use for&nbsp;
upgrade Jensen, once you type this on enter&nbsp;&nbsp;

02:49:39.680 --> 02:49:45.760 position:63% line:0%
gensim would start getting downloaded on your&nbsp;
machine as Jensen is related to topic modeling and&nbsp;&nbsp;

02:49:45.760 --> 02:49:51.040 position:63% line:0%
then much more. There are many pre trained models&nbsp;
that comes with gentlemen language models also.&nbsp;&nbsp;

02:49:51.040 --> 02:49:55.920 position:63% line:0%
So for that purpose gensim is quite heavy and it&nbsp;
will take some time to get installed. So as we can&nbsp;&nbsp;

02:49:55.920 --> 02:50:02.480 position:63% line:0%
see gensim has got installed successfully. So let&nbsp;
us clear that up. mil and open our Python console&nbsp;&nbsp;

02:50:02.479 --> 02:50:10.240 position:63% line:0%
to see if Jensen has been successfully installed.&nbsp;
So import gensim Yeah, as you can see gensim&nbsp;&nbsp;

02:50:10.240 --> 02:50:15.679 position:63% line:0%
has been successfully installed without any&nbsp;
error. So we can now exit Jensen. So Jensen&nbsp;&nbsp;

02:50:15.680 --> 02:50:21.760 position:63% line:0%
is the library that we are going to use for text&nbsp;
summarization, automatic summarization. But for&nbsp;&nbsp;

02:50:21.760 --> 02:50:28.400 position:63% line:0%
us to get the text itself because we are going to&nbsp;
do new summarization, we need to extract the text&nbsp;&nbsp;

02:50:28.399 --> 02:50:33.920 position:63% line:0%
from news which means the news is published on&nbsp;
internet and we need to extract text from news&nbsp;&nbsp;

02:50:33.920 --> 02:50:40.160 position:63% line:0%
and to extract text from news we are going to use&nbsp;
something called a beautiful so as we have seen in&nbsp;&nbsp;

02:50:40.160 --> 02:50:46.479 position:63% line:0%
the previous sections beautifulsoup is the library&nbsp;
that we are going to use for extracting text from&nbsp;&nbsp;

02:50:46.479 --> 02:50:52.959 position:63% line:0%
internet. As we can see, it could be from HTML or&nbsp;
XML. So Beautiful Soup is the library that we are&nbsp;&nbsp;

02:50:52.960 --> 02:50:59.920 position:63% line:0%
going to use for web scraping, which is to extract&nbsp;
text from internet to install beautifulsoup we&nbsp;&nbsp;

02:50:59.920 --> 02:51:06.240 position:63% line:0%
need to type pip install Beautiful Soup for so&nbsp;
let us once again open our terminal or shell&nbsp;&nbsp;

02:51:06.240 --> 02:51:11.519 position:63% line:0%
and clear the text that we have gotten there and&nbsp;
then installed beautiful so PIP three install&nbsp;&nbsp;

02:51:12.080 --> 02:51:17.840 position:63% line:0%
Beautiful Soup work because it is the latest&nbsp;
version of Beautiful Soup. So we have to type&nbsp;&nbsp;

02:51:17.840 --> 02:51:23.760 position:63% line:0%
Beautiful Soup for so as you can see here the&nbsp;
terminal that I have already got Beautiful Soup&nbsp;&nbsp;

02:51:23.760 --> 02:51:28.560 position:63% line:0%
installed in the previous section. So my Beautiful&nbsp;
Soup requirement has been already satisfied.&nbsp;&nbsp;

02:51:28.560 --> 02:51:34.640 position:63% line:0%
If you have not got beautiful soup, Beautiful Soup&nbsp;
would get freshly installed on your machine. Let&nbsp;&nbsp;

02:51:34.640 --> 02:51:40.161 position:63% line:0%
us open our Python console. And then try to&nbsp;
see if we have got Beautiful Soup installed.&nbsp;&nbsp;

02:51:40.160 --> 02:51:47.599 position:63% line:0%
So let us save from bs for import Beautiful&nbsp;
Soup, which is the object of our interest. So&nbsp;&nbsp;

02:51:47.600 --> 02:51:54.480 position:63% line:0%
as you can see beautifulsoup the object from the&nbsp;
package beautiful. So for it's been successfully&nbsp;&nbsp;

02:51:54.479 --> 02:51:59.599 position:63% line:0%
imported. So remember this always when we&nbsp;
install Beautiful Soup, it should be installed&nbsp;&nbsp;

02:51:59.600 --> 02:52:04.480 position:63% line:0%
as Beautiful Soup for all and small critters.&nbsp;
But when you are importing Beautiful Soup,&nbsp;&nbsp;

02:52:04.479 --> 02:52:10.959 position:63% line:0%
it is from this package bs four and then you input&nbsp;
the object beautiful. So let us exhibit evil soup.&nbsp;&nbsp;

02:52:11.680 --> 02:52:18.400 position:63% line:0%
So in this video, we learned a little bit about&nbsp;
the kind of text summarization technique that we&nbsp;&nbsp;

02:52:18.399 --> 02:52:24.080 position:63% line:0%
are going to use in this project. The package name&nbsp;
Jensen that we are going to use in this project,&nbsp;&nbsp;

02:52:24.080 --> 02:52:28.720 position:63% line:0%
how to install Jensen, and then a little bit&nbsp;
about Jensen and we also saw that we need&nbsp;&nbsp;

02:52:28.720 --> 02:52:33.840 position:63% line:0%
beautifulsoup the Python package beautifulsoup&nbsp;
for web scraping, which is to extract&nbsp;&nbsp;

02:52:33.840 --> 02:52:39.200 position:63% line:0%
text from the web, you are the news&nbsp;
that we are going to be of our interest.&nbsp;&nbsp;

02:52:39.200 --> 02:52:45.279 position:63% line:0%
In the next video, we'll learn how to extract the&nbsp;
news text from the internet using beautifulsoup.&nbsp;&nbsp;

02:52:46.960 --> 02:52:52.240 position:63% line:0%
In this video, we'll see how to use Beautiful&nbsp;
Soup the Python package Beautiful Soup&nbsp;&nbsp;

02:52:52.240 --> 02:52:58.080 position:63% line:0%
to extract text from the internet news source.&nbsp;
So to begin with, let us import the packages&nbsp;&nbsp;

02:52:58.080 --> 02:53:04.800 position:63% line:0%
that we want for text extraction. The first one&nbsp;
is beautiful. So as we know before Beautiful Soup&nbsp;&nbsp;

02:53:04.800 --> 02:53:10.160 position:63% line:0%
is a web scraping library that we are going&nbsp;
to use to extract text from a new source. The&nbsp;&nbsp;

02:53:10.160 --> 02:53:16.639 position:63% line:0%
second package that we are going to use is called&nbsp;
request. The request package is used to extract a&nbsp;&nbsp;

02:53:16.640 --> 02:53:22.880 position:63% line:0%
web content Beautiful Soup is used to parse the&nbsp;
text content that we extracted using a request&nbsp;&nbsp;

02:53:22.880 --> 02:53:30.160 position:63% line:0%
package. So after we import the packages from bs&nbsp;
four input Beautiful Soup from request input gate,&nbsp;&nbsp;

02:53:30.160 --> 02:53:34.960 position:63% line:0%
so the reason why we are importing a particular&nbsp;
object or a function from a package instead of&nbsp;&nbsp;

02:53:34.960 --> 02:53:41.359 position:63% line:0%
loading the entire package is because memory&nbsp;
management if we have got a huge package like&nbsp;&nbsp;

02:53:41.359 --> 02:53:47.920 position:63% line:0%
Jensen, and if we import the entire package, then&nbsp;
the primary memory will be occupied with a huge&nbsp;&nbsp;

02:53:47.920 --> 02:53:53.760 position:63% line:0%
memory chunk of this particular package. So it&nbsp;
is always better to import only the packages&nbsp;&nbsp;

02:53:53.760 --> 02:53:58.880 position:63% line:0%
only the functions only the objects that are our&nbsp;
interest rather than importing the entire package.&nbsp;&nbsp;

02:53:58.880 --> 02:54:03.120 position:63% line:0%
So likewise, Beautiful Soup object is of our&nbsp;
interest and in the function request that we&nbsp;&nbsp;

02:54:03.120 --> 02:54:09.359 position:63% line:0%
wanted from the request package. So once we do&nbsp;
that thing, let us create a custom function. The&nbsp;&nbsp;

02:54:09.359 --> 02:54:16.639 position:63% line:0%
purpose of this function is to extract one Li the&nbsp;
text component, so extract only the text component&nbsp;&nbsp;

02:54:16.640 --> 02:54:23.760 position:63% line:0%
from paragraph text. So in a typical website, a&nbsp;
web URL you will see text spread across different&nbsp;&nbsp;

02:54:23.760 --> 02:54:30.800 position:63% line:0%
tags. It could be in a span tag, it could be in&nbsp;
a h1 tag h2 tag h3 tag, or it could be in a div,&nbsp;&nbsp;

02:54:30.800 --> 02:54:36.800 position:63% line:0%
it could be anywhere. So the tag that is of our&nbsp;
interest is paragraph tag, which is a HTML tag&nbsp;&nbsp;

02:54:36.800 --> 02:54:42.080 position:63% line:0%
which is denoted by this symbol P. So what we are&nbsp;
going to do is we are going to create a custom&nbsp;&nbsp;

02:54:42.080 --> 02:54:48.000 position:63% line:0%
function. The first step in the function is the&nbsp;
function is reading the URL. So the function is&nbsp;&nbsp;

02:54:48.000 --> 02:54:54.479 position:63% line:0%
trying to get a sense HTTP request to get the URL&nbsp;
using request package and then it stores it in&nbsp;&nbsp;

02:54:54.479 --> 02:55:01.759 position:63% line:0%
page. Once it stores it in page we are going&nbsp;
to use beautifulsoup to parse the content Using&nbsp;&nbsp;

02:55:01.760 --> 02:55:09.040 position:63% line:0%
a XML parser. So we are using l XML parser to&nbsp;
parse the content that we just extracted using the&nbsp;&nbsp;

02:55:09.040 --> 02:55:15.120 position:63% line:0%
get function and then we are storing it in soup.&nbsp;
So next step is we are going to identify why only&nbsp;&nbsp;

02:55:15.120 --> 02:55:20.800 position:63% line:0%
the paragraph text, and then we are going&nbsp;
to save it in text. The reason we are using&nbsp;&nbsp;

02:55:20.800 --> 02:55:26.400 position:63% line:0%
lambda function is to iterate these four different&nbsp;
tags. The reason is, because in a particular page,&nbsp;&nbsp;

02:55:26.399 --> 02:55:32.080 position:63% line:0%
there could be different paragraph text. So&nbsp;
we are using soup dot find all to find all&nbsp;&nbsp;

02:55:32.080 --> 02:55:37.920 position:63% line:0%
the paragraph text and then we are using lambda&nbsp;
function to iterate this page or text to all this&nbsp;&nbsp;

02:55:37.920 --> 02:55:42.240 position:63% line:0%
paragraph function that we found out. And then&nbsp;
we are finally using join to join all the text&nbsp;&nbsp;

02:55:42.240 --> 02:55:48.399 position:63% line:0%
and store it in a text object. The next thing is,&nbsp;
it is always good to present the title. So what&nbsp;&nbsp;

02:55:48.399 --> 02:55:53.759 position:63% line:0%
we are going to do is, apart from the text that we&nbsp;
extracted, we are going to extract the title also,&nbsp;&nbsp;

02:55:53.760 --> 02:56:00.080 position:63% line:0%
the reason we are using soup, low title, dots,&nbsp;
strings is because the title might sometimes&nbsp;&nbsp;

02:56:00.080 --> 02:56:07.279 position:63% line:0%
come with escape strings like slash in the denotes&nbsp;
end of line or slash tab that denotes a tab space.&nbsp;&nbsp;

02:56:07.279 --> 02:56:12.960 position:63% line:0%
So to strip out those strings, we are using soup&nbsp;
dot title dot strip strings. And then again, we&nbsp;&nbsp;

02:56:12.960 --> 02:56:18.160 position:63% line:0%
are using join to join all the words that we have&nbsp;
got and then store it in title. And then finally,&nbsp;&nbsp;

02:56:18.160 --> 02:56:25.120 position:63% line:0%
we are returning this as title comma text,&nbsp;
which will be read as a tupple. So finally,&nbsp;&nbsp;

02:56:25.120 --> 02:56:29.120 position:63% line:0%
we are sending it as a tupple. And then the&nbsp;
custom function that we wanted to create is done,&nbsp;&nbsp;

02:56:29.120 --> 02:56:34.080 position:63% line:0%
the function name is get underscore onely&nbsp;
underscore txt, and then the argument that we&nbsp;&nbsp;

02:56:34.080 --> 02:56:40.240 position:63% line:0%
are passing is the URL that we want to extract&nbsp;
the text from. So once this function is done,&nbsp;&nbsp;

02:56:40.240 --> 02:56:46.880 position:63% line:0%
let us execute this. And then the next step is the&nbsp;
news URL from which we are going to extract the&nbsp;&nbsp;

02:56:46.880 --> 02:56:53.120 position:63% line:0%
text. This is the URL from where we are extracting&nbsp;
the News, the news is from a very popular media&nbsp;&nbsp;

02:56:53.120 --> 02:56:58.319 position:63% line:0%
publishing site called works. The news title is&nbsp;
California is cracking down on the gig economy.&nbsp;&nbsp;

02:56:58.319 --> 02:57:02.240 position:63% line:0%
And then this is what we are going to&nbsp;
use to extract and summarize text from&nbsp;&nbsp;

02:57:02.960 --> 02:57:08.160 position:63% line:0%
once we take this URL, and then we put this URL&nbsp;
within the function that we just created. So&nbsp;&nbsp;

02:57:08.160 --> 02:57:13.359 position:63% line:0%
you can see, the function that we created is&nbsp;
called get underscore only underscore text.&nbsp;&nbsp;

02:57:13.359 --> 02:57:20.080 position:63% line:0%
And then we are passing this URL as a character or&nbsp;
string, the string argument is passed on to this&nbsp;&nbsp;

02:57:20.080 --> 02:57:26.960 position:63% line:0%
URL. And let us execute this URL. As you can see,&nbsp;
it just finished executing. And let us print the&nbsp;&nbsp;

02:57:26.960 --> 02:57:33.439 position:63% line:0%
text object to see if it has successfully scraped&nbsp;
extracted the text. So you can see that the text&nbsp;&nbsp;

02:57:33.439 --> 02:57:40.799 position:63% line:0%
is available now. And let us just see how large&nbsp;
this text is. In other words, how many number of&nbsp;&nbsp;

02:57:40.800 --> 02:57:46.960 position:63% line:0%
words we have got. So once we execute this thing,&nbsp;
the way we find it out is we take the string,&nbsp;&nbsp;

02:57:46.960 --> 02:57:53.279 position:63% line:0%
and then we split the strings using str dot&nbsp;
split as words and then we are using the length&nbsp;&nbsp;

02:57:53.279 --> 02:58:00.559 position:63% line:0%
of the words to see how many words we have got. So&nbsp;
you might doubt Why have I used text one instead&nbsp;&nbsp;

02:58:00.560 --> 02:58:07.201 position:63% line:0%
of just text. So as we created the function before&nbsp;
I mentioned that we are returning it as a tupple.&nbsp;&nbsp;

02:58:07.200 --> 02:58:12.000 position:63% line:0%
A tupple is a different type of Python object&nbsp;
from a list. So a tupple is an immutable&nbsp;&nbsp;

02:58:12.000 --> 02:58:18.080 position:63% line:0%
object. So the reason we have returned it as&nbsp;
a tupple is because we wanted to return title&nbsp;&nbsp;

02:58:18.080 --> 02:58:25.120 position:63% line:0%
and takes in the same expression. So that is&nbsp;
why we have returned both. So if you see text&nbsp;&nbsp;

02:58:27.040 --> 02:58:34.399 position:63% line:0%
length of text, it will show you two which means&nbsp;
it is a tupple with two objects in it. So you can&nbsp;&nbsp;

02:58:34.399 --> 02:58:41.200 position:63% line:0%
also see it opens with an open bracket and it ends&nbsp;
with a close bracket as opposed to a list which&nbsp;&nbsp;

02:58:41.200 --> 02:58:45.599 position:63% line:0%
would open with a square bracket and close with&nbsp;
the square bracket. And that is the reason why&nbsp;&nbsp;

02:58:45.600 --> 02:58:52.000 position:63% line:0%
we are excluding this because text of zero would&nbsp;
be the title and text of one is the actual text&nbsp;&nbsp;

02:58:52.000 --> 02:59:00.080 position:63% line:0%
that we want. So text of zero would be the title&nbsp;
and the text of one is what we actually wanted.&nbsp;&nbsp;

02:59:00.080 --> 02:59:06.479 position:63% line:0%
And that is why we are using text of one to use&nbsp;
string split and then split it by words and then&nbsp;&nbsp;

02:59:06.479 --> 02:59:13.040 position:63% line:0%
calculate the number of words entered. So in&nbsp;
this video, we learned how to use beautifulsoup&nbsp;&nbsp;

02:59:13.760 --> 02:59:21.200 position:63% line:0%
and request to extract the text from the new&nbsp;
source. And we also saw what is the length of the&nbsp;&nbsp;

02:59:21.760 --> 02:59:28.400 position:63% line:0%
text the extracted text which is 1600 25. In&nbsp;
the next video, we will learn how to do text&nbsp;&nbsp;

02:59:28.399 --> 02:59:36.879 position:63% line:0%
summarization using Jensen. In this video, we'll&nbsp;
see how to do text summarization automated text&nbsp;&nbsp;

02:59:36.880 --> 02:59:40.800 position:63% line:0%
summarization of that extracted text&nbsp;
that we did it in the previous video.&nbsp;&nbsp;

02:59:40.800 --> 02:59:46.240 position:63% line:0%
So as a first step, we need to import all the&nbsp;
required Python packages. The Python package that&nbsp;&nbsp;

02:59:46.240 --> 02:59:52.240 position:63% line:0%
we are going to use here is Jensen as we know&nbsp;
before and within gensim. We are interested of&nbsp;&nbsp;

02:59:52.240 --> 02:59:57.439 position:63% line:0%
two functions one is summarize the second one is&nbsp;
keywords. So from Jensen, we are going to import&nbsp;&nbsp;

02:59:57.439 --> 03:00:05.279 position:63% line:0%
summarize and keywords. So Say do from Jensen dot&nbsp;
summarization towards summarizer import summarize,&nbsp;&nbsp;

03:00:06.080 --> 03:00:12.319 position:63% line:0%
and then from Jensen dot summarization import&nbsp;
keywords once you have typed this in execute&nbsp;&nbsp;

03:00:12.319 --> 03:00:17.279 position:63% line:0%
your Jupyter notebooks. So once this is&nbsp;
executed, your Python package has been&nbsp;&nbsp;

03:00:17.279 --> 03:00:24.160 position:63% line:0%
successfully imported. So the next step is for&nbsp;
us to do text summarization, text summarization,&nbsp;&nbsp;

03:00:24.160 --> 03:00:30.559 position:63% line:0%
as it might look very complicated gensim is&nbsp;
offering us this in a single function. So, how&nbsp;&nbsp;

03:00:30.560 --> 03:00:35.920 position:63% line:0%
we can do this is the first one is the function&nbsp;
called summarize, and then we have to pass the&nbsp;&nbsp;

03:00:35.920 --> 03:00:43.120 position:63% line:0%
text to this. So, the text that we have extracted&nbsp;
in the previous step as we saw as a tupple. So,&nbsp;&nbsp;

03:00:43.120 --> 03:00:49.279 position:63% line:0%
what we have to do is we have to do text dot&nbsp;
one, and then the summarize function as a first&nbsp;&nbsp;

03:00:49.279 --> 03:00:54.559 position:63% line:0%
argument it takes text the actual text content&nbsp;
as a second argument it actually takes ratio.&nbsp;&nbsp;

03:00:55.680 --> 03:01:00.640 position:63% line:0%
And then the third argument is word count. The&nbsp;
thing with this is it can be either done with&nbsp;&nbsp;

03:01:00.640 --> 03:01:07.280 position:63% line:0%
ratio or with the word God not with both. So, if&nbsp;
you supply both with means ratio, let us say ratio&nbsp;&nbsp;

03:01:07.279 --> 03:01:14.800 position:63% line:0%
is equal to point 01. So, the ratio is nothing but&nbsp;
the ratio of text summarised text that you want,&nbsp;&nbsp;

03:01:14.800 --> 03:01:20.880 position:63% line:0%
as opposed to the original text. So, in text&nbsp;
summarization, we use summaries as a function,&nbsp;&nbsp;

03:01:20.880 --> 03:01:27.520 position:63% line:0%
we can either use ratio or word count as&nbsp;
argument to extract to limit the amount of text&nbsp;&nbsp;

03:01:27.520 --> 03:01:34.720 position:63% line:0%
that we wanted. So, let us start with the first&nbsp;
method, which we'll use using word count. So,&nbsp;&nbsp;

03:01:35.600 --> 03:01:40.720 position:63% line:0%
using summarize function, we are passing the text&nbsp;
which is of text one, and then we are using the&nbsp;&nbsp;

03:01:40.720 --> 03:01:46.400 position:63% line:0%
word count that I want us 100 which means I do not&nbsp;
want more than 100. So, in the previous video, we&nbsp;&nbsp;

03:01:46.399 --> 03:01:54.080 position:63% line:0%
saw that we have totally 1600 25 words, and then&nbsp;
we are going to extract only 100 words out of it,&nbsp;&nbsp;

03:01:54.080 --> 03:02:00.080 position:63% line:0%
which is meaningful as summarized text. So, to&nbsp;
make it a little bit, the cosmetic changes to&nbsp;&nbsp;

03:02:00.080 --> 03:02:05.200 position:63% line:0%
the output, we are going to say okay, this is&nbsp;
the title and then we are using text of zero&nbsp;&nbsp;

03:02:05.200 --> 03:02:09.679 position:63% line:0%
to print the title and then we are saying&nbsp;
this is somebody and then this embrace text.&nbsp;&nbsp;

03:02:09.680 --> 03:02:15.201 position:63% line:0%
Once we execute this thing, we see that we&nbsp;
have got the title of walks. And then we are&nbsp;&nbsp;

03:02:15.200 --> 03:02:20.160 position:63% line:0%
getting the summarized text which says okay,&nbsp;
the State Assembly has passed a bill which&nbsp;&nbsp;

03:02:20.160 --> 03:02:24.960 position:63% line:0%
makes it harder for companies to label worker as&nbsp;
an independent contractor instead of employees,&nbsp;&nbsp;

03:02:24.960 --> 03:02:30.880 position:63% line:0%
which is what usually happens in gig economy.&nbsp;
So, as a first step, we have extracted our text&nbsp;&nbsp;

03:02:30.880 --> 03:02:39.680 position:63% line:0%
and the number of words that we have got is let us&nbsp;
say, is 98. So we limited our word count to 100.&nbsp;&nbsp;

03:02:39.680 --> 03:02:46.560 position:63% line:0%
And then we have got 98 words. So this is the&nbsp;
first method where we have extracted the text&nbsp;&nbsp;

03:02:47.120 --> 03:02:52.160 position:63% line:0%
using word count as an argument to put a&nbsp;
threshold. In the second method, what we are&nbsp;&nbsp;

03:02:52.160 --> 03:02:57.760 position:63% line:0%
going to do is we are going to say I do not want&nbsp;
to put a threshold of word count, what I want is&nbsp;&nbsp;

03:02:57.760 --> 03:03:03.360 position:63% line:0%
I'm giving a ratio, the ratio can be anything&nbsp;
between zero and one. And then within this,&nbsp;&nbsp;

03:03:03.359 --> 03:03:09.679 position:63% line:0%
it will use as an approximation as the ratio of&nbsp;
the original text which is 1600 25. And then given&nbsp;&nbsp;

03:03:09.680 --> 03:03:16.480 position:63% line:0%
this ratio, it will give us how much text that we&nbsp;
are going to be given. So what we are going to do&nbsp;&nbsp;

03:03:16.479 --> 03:03:21.759 position:63% line:0%
is we are going to use the same function, text&nbsp;
off one because we just wanted the text and then&nbsp;&nbsp;

03:03:21.760 --> 03:03:27.120 position:63% line:0%
we are going to say ratio of point one and then&nbsp;
see how much are we getting. So you can see that&nbsp;&nbsp;

03:03:27.120 --> 03:03:32.080 position:63% line:0%
you've got the title, and then you've got the&nbsp;
text. If you want to reduce this text further,&nbsp;&nbsp;

03:03:32.080 --> 03:03:40.399 position:63% line:0%
we can say instead of point 01, we can say point&nbsp;
zero, let's say 7.07, which further reduces their&nbsp;&nbsp;

03:03:40.399 --> 03:03:44.799 position:63% line:0%
takes. If you are interested in reading more&nbsp;
text instead of point 01, we can say point&nbsp;&nbsp;

03:03:46.000 --> 03:03:54.800 position:63% line:0%
two which is giving us more text point one giving&nbsp;
us less text. So as you can see that we have&nbsp;&nbsp;

03:03:54.800 --> 03:03:59.760 position:63% line:0%
extracted the summary using a different&nbsp;
method other than specifying the word count.&nbsp;&nbsp;

03:03:59.760 --> 03:04:05.120 position:63% line:0%
But still it is good for us to see how much it&nbsp;
has reduced. So what we'll do is we'll copy this&nbsp;&nbsp;

03:04:05.120 --> 03:04:11.680 position:63% line:0%
function, which is where we have got the output&nbsp;
text. And then we'll say we are going to put it as&nbsp;&nbsp;

03:04:11.680 --> 03:04:19.360 position:63% line:0%
summarized. Text is equal to this is an we'll&nbsp;
execute this once we execute this, we have got&nbsp;&nbsp;

03:04:19.359 --> 03:04:26.240 position:63% line:0%
the summary sticks. Now, we are going to use the&nbsp;
summarize text and then put it inside our text&nbsp;&nbsp;

03:04:26.800 --> 03:04:32.960 position:63% line:0%
length function to see how many words we have&nbsp;
got we have got 217 words. In the previous&nbsp;&nbsp;

03:04:32.960 --> 03:04:38.240 position:63% line:0%
muttered we got 98 words because we had set a&nbsp;
threshold using the word count. In this method,&nbsp;&nbsp;

03:04:38.240 --> 03:04:44.479 position:63% line:0%
we have set a threshold using the ratio and then&nbsp;
we have got 217 words. So this is how we have&nbsp;&nbsp;

03:04:44.479 --> 03:04:51.120 position:63% line:0%
extracted summaries text, but sometimes not just&nbsp;
summarize text is enough but you also want to see&nbsp;&nbsp;

03:04:51.120 --> 03:04:56.160 position:63% line:0%
the keywords that are more important that the&nbsp;
algorithm has found out. So what we are going&nbsp;&nbsp;

03:04:56.160 --> 03:05:00.720 position:63% line:0%
to do in this step is we are going to extract&nbsp;
the keywords that is of more importance. And&nbsp;&nbsp;

03:05:00.720 --> 03:05:05.440 position:63% line:0%
we are going to use the same method. So, we are&nbsp;
going to say keywords, which is the function name&nbsp;&nbsp;

03:05:06.000 --> 03:05:10.560 position:63% line:0%
for the first argument is the text that we are&nbsp;
passing the original takes. The second argument&nbsp;&nbsp;

03:05:10.560 --> 03:05:15.520 position:63% line:0%
is we are setting a threshold using the ratio. And&nbsp;
then the third argument says whether you want to&nbsp;&nbsp;

03:05:15.520 --> 03:05:22.241 position:63% line:0%
do lemmatization or not. So, to understand what is&nbsp;
lemmatization So, let us first exude this function&nbsp;&nbsp;

03:05:22.240 --> 03:05:27.679 position:63% line:0%
without lemmatization function. So, once you&nbsp;
exude this thing you might see okay the critical&nbsp;&nbsp;

03:05:27.680 --> 03:05:34.800 position:63% line:0%
keywords are drivers, code codes, workers,&nbsp;
worker states state contractors contractor&nbsp;&nbsp;

03:05:35.760 --> 03:05:39.520 position:63% line:0%
So, even though it gives us keywords,&nbsp;
sometimes you might see the reputation&nbsp;&nbsp;

03:05:39.520 --> 03:05:47.280 position:63% line:0%
one has quote unquote, state and states&nbsp;
contractors and contract This is because we have&nbsp;&nbsp;

03:05:47.279 --> 03:05:53.279 position:63% line:0%
not done lemmatization lemmatization is a process&nbsp;
of taking a word and then converting it to a root&nbsp;&nbsp;

03:05:53.279 --> 03:05:59.359 position:63% line:0%
word. For example, workers would be converted&nbsp;
into worker coats would be converted into code&nbsp;&nbsp;

03:05:59.359 --> 03:06:03.920 position:63% line:0%
contractors would be converted into contractor&nbsp;
which means we would not see duplication because&nbsp;&nbsp;

03:06:03.920 --> 03:06:10.800 position:63% line:0%
of that just one extra word. So, let us go ahead&nbsp;
and then do lemmatization Lemma ties through,&nbsp;&nbsp;

03:06:11.439 --> 03:06:16.879 position:63% line:0%
it's a Boolean flag. Once we execute this thing,&nbsp;
now, we have got the new set of keywords, which is&nbsp;&nbsp;

03:06:16.880 --> 03:06:23.120 position:63% line:0%
just quotes Ober, contractor, business worker,&nbsp;
and there is no plural form and singular form&nbsp;&nbsp;

03:06:23.120 --> 03:06:30.080 position:63% line:0%
because we have done lemmatization we can do this&nbsp;
for that other method also. So in this video, we&nbsp;&nbsp;

03:06:30.080 --> 03:06:36.880 position:63% line:0%
have learned how to successfully do automated text&nbsp;
summarization using the Jensen function summarize&nbsp;&nbsp;

03:06:36.880 --> 03:06:42.319 position:63% line:0%
and also we learned how to do it using two&nbsp;
different methods. One is using ratio, the second&nbsp;&nbsp;

03:06:42.319 --> 03:06:49.679 position:63% line:0%
one is using word count. Apart from this, we also&nbsp;
learned how to do Tech's keyword extraction. So&nbsp;&nbsp;

03:06:49.680 --> 03:06:55.360 position:63% line:0%
one is text summarization. The next one is keyword&nbsp;
extraction. To find out more relevant or important&nbsp;&nbsp;

03:06:55.359 --> 03:07:00.160 position:63% line:0%
keywords, for example, if you are going to run a&nbsp;
Google AdWords campaign for this particular text,&nbsp;&nbsp;

03:07:00.160 --> 03:07:04.479 position:63% line:0%
then you need to understand what are the keywords&nbsp;
critical keywords that are presented in this&nbsp;&nbsp;

03:07:04.479 --> 03:07:09.279 position:63% line:0%
particular word, text, and then we'll run the&nbsp;
campaign we'll do the bidding accordingly.&nbsp;&nbsp;

03:07:09.279 --> 03:07:15.599 position:63% line:0%
So in the next video, we'll learn how to make this&nbsp;
a complete project and then we'll see a summary.&nbsp;&nbsp;

03:07:17.520 --> 03:07:22.161 position:63% line:0%
In this video, we'll see how you can take&nbsp;
this further forward. So, as you can see,&nbsp;&nbsp;

03:07:22.160 --> 03:07:26.639 position:63% line:0%
what we have done is we have used a Jupyter&nbsp;
Notebook to create this particular project.&nbsp;&nbsp;

03:07:26.640 --> 03:07:32.880 position:63% line:0%
So Jupyter Notebook is good if we want to&nbsp;
incorporate text, which is narrative as markdown&nbsp;&nbsp;

03:07:32.880 --> 03:07:38.640 position:63% line:0%
and also the code and also the output. But Jupyter&nbsp;
Notebook is not applicable for every purpose.&nbsp;&nbsp;

03:07:38.640 --> 03:07:43.920 position:63% line:0%
So for example, let us take that you want to do&nbsp;
this project as an automation. So what you want&nbsp;&nbsp;

03:07:43.920 --> 03:07:48.560 position:63% line:0%
to do is you want to take a particular URL, and&nbsp;
then you want to shedule this in your computer&nbsp;&nbsp;

03:07:48.560 --> 03:07:52.640 position:63% line:0%
to get the summarized text from a news&nbsp;
source every day, let us say morning.&nbsp;&nbsp;

03:07:52.640 --> 03:07:56.880 position:63% line:0%
So in that case, what you can actually do&nbsp;
is you can go to your Jupyter Notebook file,&nbsp;&nbsp;

03:07:57.760 --> 03:08:03.440 position:63% line:0%
and then you can download this Jupyter Notebook&nbsp;
as a.py file. So instead of having it as a Jupyter&nbsp;&nbsp;

03:08:03.439 --> 03:08:09.120 position:63% line:0%
Notebook, you can download this as a.py file,&nbsp;
which means you are going to get a Python code.py&nbsp;&nbsp;

03:08:10.319 --> 03:08:16.240 position:63% line:0%
file, which you can use your Windows Task&nbsp;
Scheduler or Mac Automator, to schedule it&nbsp;&nbsp;

03:08:16.240 --> 03:08:21.200 position:63% line:0%
every day at a certain point of time. So this is&nbsp;
one thing that you can do this in this project.&nbsp;&nbsp;

03:08:21.200 --> 03:08:27.359 position:63% line:0%
The second thing, what you can do is, instead&nbsp;
of a Jupyter Notebook, you can use this Jupyter&nbsp;&nbsp;

03:08:27.359 --> 03:08:32.960 position:63% line:0%
Notebook to create a more generalized version of&nbsp;
this project. And then you can convert it as a&nbsp;&nbsp;

03:08:32.960 --> 03:08:38.880 position:63% line:0%
command line project. So where you can just&nbsp;
invoke this project with an argument of URL,&nbsp;&nbsp;

03:08:38.880 --> 03:08:44.080 position:63% line:0%
and then it will give you a summarized text.&nbsp;
So in this project in this URL, if you see,&nbsp;&nbsp;

03:08:44.080 --> 03:08:50.000 position:63% line:0%
we have hard coded the URL. But instead of hard&nbsp;
coding the URL, what you can actually do is&nbsp;&nbsp;

03:08:50.000 --> 03:08:54.960 position:63% line:0%
you can use this as an argument that could be&nbsp;
paused at the command level. And then what you&nbsp;&nbsp;

03:08:54.960 --> 03:09:01.279 position:63% line:0%
can do is you can use your terminal to invoke this&nbsp;
Python project, passing the desired URL in the&nbsp;&nbsp;

03:09:01.279 --> 03:09:06.800 position:63% line:0%
terminal as an argument and then you can extract&nbsp;
the text as an output. So there are two things&nbsp;&nbsp;

03:09:06.800 --> 03:09:12.000 position:63% line:0%
that you can do further with this project. One is&nbsp;
extracting the Python code and then scheduling it&nbsp;&nbsp;

03:09:12.000 --> 03:09:16.479 position:63% line:0%
so that you get the news into your inbox every&nbsp;
day. Or instead of that you can have it as a&nbsp;&nbsp;

03:09:16.479 --> 03:09:22.719 position:63% line:0%
Python project, the same.py file, but in a more&nbsp;
generalized format instead of hard coding the URL.&nbsp;&nbsp;

03:09:22.720 --> 03:09:28.640 position:63% line:0%
And then you can get the extracted summarized&nbsp;
text whenever you supply a URL to this particular&nbsp;&nbsp;

03:09:28.640 --> 03:09:33.520 position:63% line:0%
project. But if you do not wish to do any of&nbsp;
these things, you can just keep it as this Jupyter&nbsp;&nbsp;

03:09:33.520 --> 03:09:37.520 position:63% line:0%
Notebook. And then what you can do is whenever you&nbsp;
want to change the URL, you can give a different&nbsp;&nbsp;

03:09:37.520 --> 03:09:42.720 position:63% line:0%
URL here and then there under text and the text to&nbsp;
this algorithm, this notebook would give you the&nbsp;&nbsp;

03:09:42.720 --> 03:09:48.960 position:63% line:0%
desired output where you can use to read the news&nbsp;
of a summarized format. Like just like headlines&nbsp;&nbsp;

03:09:48.960 --> 03:09:54.319 position:63% line:0%
are how the in shorts app which we saw that&nbsp;
most popular news application in India would&nbsp;&nbsp;

03:09:54.319 --> 03:09:59.920 position:63% line:0%
be doing to send a card of text, which is a&nbsp;
very summarized version of the actual news.&nbsp;&nbsp;

03:10:00.880 --> 03:10:06.960 position:63% line:0%
In this video, we'll learn how to take this&nbsp;
project further. So far. In this section,&nbsp;&nbsp;

03:10:06.960 --> 03:10:12.239 position:63% line:0%
we learned how to build an automated new&nbsp;
summarizer. We started with understanding&nbsp;&nbsp;

03:10:12.239 --> 03:10:16.639 position:63% line:0%
what is the new summarizer and what kind of&nbsp;
techniques are available. And then we learned&nbsp;&nbsp;

03:10:16.640 --> 03:10:23.120 position:63% line:0%
about the Python packages required for it. And&nbsp;
then finally, we did new summarizer using Jensen&nbsp;&nbsp;

03:10:23.120 --> 03:10:29.040 position:63% line:0%
and the text extracted using beautifulsoup. I&nbsp;
hope you enjoyed the project. Thank you very much.

